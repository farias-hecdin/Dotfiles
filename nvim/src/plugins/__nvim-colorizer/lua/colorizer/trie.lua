local a=require"ffi"a.cdef[[
struct Trie {
	bool is_leaf;
	struct Trie* character[62];
};
void *malloc(size_t size);
void free(void *ptr);
]]local b=a.typeof"struct Trie"local c=a.typeof("$ *",b)local d=a.sizeof(b)local function e()local f=a.C.malloc(d)a.fill(f,d)return a.cast(c,f)end;local function g(h)if h==nil then return end;for i=0,61 do local j=h.character[i]if j~=nil then g(j)end end;a.C.free(h)end;local k=255;local l=a.new("uint8_t[?]",k)local m="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-"do local n=string.byte;local o={[n"-"]=true}local p={["0"]=n"0",["9"]=n"9",["a"]=n"a",["A"]=n"A",["z"]=n"z",["Z"]=n"Z"}for i=0,k do if i>=p["0"]and i<=p["9"]then l[i]=i-p["0"]elseif i>=p["A"]and i<=p["Z"]then l[i]=i-p["A"]+10 elseif i>=p["a"]and i<=p["z"]then l[i]=i-p["a"]+10+26 elseif o[i]then else l[i]=k end end end;local function q(h,r)if h==nil then return false end;local s=h;for i=1,#r do local t=l[r:byte(i)]if t==k then return false end;if s.character[t]==nil then s.character[t]=e()end;s=s.character[t]end;s.is_leaf=true;return s,h end;local function u(h,r,v)if h==nil then return false end;local s=h;for i=v or 1,#r do local t=l[r:byte(i)]if t==k then return end;local j=s.character[t]if j==nil then return false end;s=j end;return s.is_leaf end;local function w(h,r,v,x)if h==nil then return false end;v=v or 1;local s=h;local y=nil;for i=v,#r do local t=l[r:byte(i)]if t==k then break end;local j=s.character[t]if j==nil then break end;if j.is_leaf then y=i end;s=j end;if y then if v==1 and y==#r then return r end;if not x then return r:sub(v,y)end end end;local function z(h,A)assert(type(A)=="table")for B,C in ipairs(A)do q(h,C)end end;local function D(t)if t<0 or t>61 then return end;return m:sub(t+1,t+1)end;local function E(h)if h==nil then return nil end;local F={}for i=0,61 do local j=h.character[i]if j~=nil then local G=E(j)G.c=D(i)table.insert(F,G)end end;return{is_leaf=h.is_leaf,children=F}end;local function H(I)local J;if not I then return{"nil"}end;if I.c then if I.is_leaf then J=I.c.."*"else J=I.c.."─"end else J="├─"end;if#I.children==0 then return{J}end;local K={}for B,j in ipairs(I.children)do local L=H(j)for B,M in ipairs(L)do table.insert(K,M)end end;local N=0;for i,O in ipairs(K)do local P={}if O:match"^%w"then N=N+1;if i==1 then P={J}elseif i==#K or N==#I.children then P={"└─"}else P={"├─"}end else if i==1 then P={J}elseif#I.children>1 and N~=#I.children then P={"│ "}else P={"  "}end end;table.insert(P,O)K[i]=table.concat(P)end;return K end;local function Q(h)if h==nil then return"nil"end;local R=E(h)return table.concat(H(R),"\n")end;local S={__new=function(B,T)local h=e()if type(T)=="table"then z(h,T)end;return h end,__index={insert=q,search=u,longest_prefix=w,extend=z,destroy=g},__tostring=Q,__gc=g}return a.metatype("struct Trie",S)
