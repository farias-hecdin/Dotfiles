local a=vim.api;local b=a.nvim_buf_set_extmark;local c=a.nvim_buf_get_lines;local d=a.nvim_create_namespace;local e=a.nvim_buf_clear_namespace;local f=a.nvim_set_hl;local g=require"colorizer.color"local h=g.is_bright;local i=require("colorizer.matcher").make;local j=require"colorizer.sass"local k=j.update_variables;local l=j.cleanup;local m=require"colorizer.tailwind"local n=m.setup_lsp_colors;local o=m.cleanup;local p={}local q="colorizer"local r={}p.default_namespace=d"colorizer"p.highlight_mode_names={background="mb",foreground="mf",virtualtext="mv"}function p.clear_hl_cache()r={}end;local function s(t,u)return table.concat({q,p.highlight_mode_names[u],t},"_")end;local function v(w,u)u=u or"background"w=w:lower()local x=table.concat({p.highlight_mode_names[u],w},"_")local y=r[x]if y then return y end;if#w==3 then w=table.concat{w:sub(1,1):rep(2),w:sub(2,2):rep(2),w:sub(3,3):rep(2)}end;y=s(w,u)if u=="foreground"then f(0,y,{fg="#"..w})else local z,A,B=w:sub(1,2),w:sub(3,4),w:sub(5,6)local C,D,E=tonumber(z,16),tonumber(A,16),tonumber(B,16)local F;if h(C,D,E)then F="Black"else F="White"end;f(0,y,{fg=F,bg="#"..w})end;r[x]=y;return y end;function p.add_highlight(G,H,I,J,K,L)e(G,H,I,J)local u=L.mode=="background"and"background"or"foreground"if vim.tbl_contains({"foreground","background"},L.mode)then for M,N in pairs(K)do for O,P in ipairs(N)do local Q=v(P.rgb_hex,u)a.nvim_buf_add_highlight(G,H,Q,M,P.range[1],P.range[2])end end elseif L.mode=="virtualtext"then for M,N in pairs(K)do for O,P in ipairs(N)do local Q=v(P.rgb_hex,u)b(0,H,M,P.range[2],{end_col=P.range[2],virt_text={{L.virtualtext or"â– ",Q}},hl_mode="combine"})end end end end;function p.highlight(G,H,I,J,L,R)local S={detach={ns={},functions={}}}if G==0 or G==nil then G=a.nvim_get_current_buf()end;local T=c(G,I,J,false)H=H or p.default_namespace;if R.__event~="WinScrolled"and L.sass and L.sass.enable then table.insert(S.detach.functions,l)k(G,0,-1,nil,i(L.sass.parsers or{css=true}),L,R)end;local K=p.parse_lines(G,T,I,L)or{}p.add_highlight(G,H,I,J,K,L)if L.tailwind=="lsp"or L.tailwind=="both"then n(G,L,R,p.add_highlight)table.insert(S.detach.functions,o)end;return true,S end;function p.parse_lines(G,T,I,L)local U=i(L)if not U then return end;local K={}for V,W in ipairs(T)do V=V-1+I;K[V]=K[V]or{}local X=1;while X<#W do local Y,w=U(W,X,G)if Y and w then table.insert(K[V],{rgb_hex=w,range={X-1,X+Y-1}})X=X+Y else X=X+1 end end end;return K end;local Z={}local function _(G)if not Z[G]then Z[G]={}end;local a0=a.nvim_buf_call(G,function()return{vim.fn.line"w0",vim.fn.line"w$"}end)local a1,a2;local a3,a4=a0[1]-1,a0[2]local a5,a6=Z[G]["min"],Z[G]["max"]if a5 and a6 then if a6==a4 or a5==a3 then a1,a2=a3,a4 elseif a6<a4 then a1=a6;a2=a4 elseif a6>a4 then a1=a3;a2=a3+a6-a4 end;if a2-a1>a4-a3 then a1=a3;a2=a4 end end;a1=a1 or a3;a2=a2 or a4;Z[G]["max"]=a4;Z[G]["min"]=a3;return a1,a2 end;function p.rehighlight(G,L,R,a7)if G==0 or G==nil then G=a.nvim_get_current_buf()end;local H=p.default_namespace;local a1,a2;if a7 and R then a1,a2=R.__startline or 0,R.__endline or-1 else a1,a2=_(G)end;local a8,S=p.highlight(G,H,a1,a2,L,R or{})table.insert(S.detach.functions,function()Z[G]=nil end)return a8,S end;return p
