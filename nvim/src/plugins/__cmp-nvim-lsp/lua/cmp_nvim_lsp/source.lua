local a={}a.new=function(b)local self=setmetatable({},{__index=a})self.client=b;self.request_ids={}return self end;a.get_debug_name=function(self)return table.concat({'nvim_lsp',self.client.name},':')end;a.is_available=function(self)if self.client.is_stopped()then return false end;if not vim.lsp.buf_get_clients(vim.api.nvim_get_current_buf())[self.client.id]then return false end;if not self:_get(self.client.server_capabilities,{'completionProvider'})then return false end;return true end;a.get_position_encoding_kind=function(self)return self:_get(self.client.server_capabilities,{'positionEncoding'})or self.client.offset_encoding or'utf-16'end;a.get_trigger_characters=function(self)return self:_get(self.client.server_capabilities,{'completionProvider','triggerCharacters'})or{}end;a.get_keyword_pattern=function(self,c)local d;d=c.option or{}d=d[self.client.name]or{}return d.keyword_pattern or require('cmp').get_config().completion.keyword_pattern end;a.complete=function(self,c,e)local f=vim.lsp.util.make_position_params(0,self.client.offset_encoding)f.context={}f.context.triggerKind=c.completion_context.triggerKind;f.context.triggerCharacter=c.completion_context.triggerCharacter;self:_request('textDocument/completion',f,function(g,h)e(h)end)end;a.resolve=function(self,i,e)if self.client.is_stopped()then return e()end;if not self:_get(self.client.server_capabilities,{'completionProvider','resolveProvider'})then return e()end;self:_request('completionItem/resolve',i,function(g,h)e(h or i)end)end;a.execute=function(self,i,e)if self.client.is_stopped()then return e()end;if not i.command then return e()end;self:_request('workspace/executeCommand',i.command,function(g,g)e()end)end;a._get=function(g,j,k)local l=j;for g,m in ipairs(k)do l=l[m]if not l then return nil end end;return l end;a._request=function(self,n,c,e)if self.request_ids[n]~=nil then self.client.cancel_request(self.request_ids[n])self.request_ids[n]=nil end;local g,o;g,o=self.client.request(n,c,function(p,q,r)if self.request_ids[n]~=o then return end;self.request_ids[n]=nil;if p and p.code==-32801 then self:_request(n,c,e)return end;if n==q then e(p,r)else e(p,q)end end)self.request_ids[n]=o end;return a
