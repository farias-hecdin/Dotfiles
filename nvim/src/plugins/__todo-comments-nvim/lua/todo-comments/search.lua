local a=require("todo-comments.config")local b=require("todo-comments.highlight")local c=require("todo-comments.util")local d={}local function e(f)assert(not f or type(f)=="string","'keywords' must be a comma separated string or nil")local g=vim.tbl_keys(a.keywords)if not f then return g end;local h=vim.split(f,",")return vim.tbl_filter(function(i)return vim.tbl_contains(h,i)end,g)end;function d.process(j)local k={}for l,m in pairs(j)do local n,o,p,q=m:match("^(.+):(%d+):(%d+):(.*)$")if n then local r={filename=n,lnum=tonumber(o),col=tonumber(p),line=q}local s,t,i=b.match(q)if s then i=a.keywords[i]or i;r.tag=i;r.text=vim.trim(q:sub(s))r.message=vim.trim(q:sub(t+1))table.insert(k,r)end end end;return k end;function d.search(u,v)v=v or{}v.cwd=v.cwd or"."v.cwd=vim.fn.fnamemodify(v.cwd,":p")v.disable_not_found_warnings=v.disable_not_found_warnings or false;if not a.loaded then c.error("todo-comments isn't loaded. Did you run setup()?")return end;local w=a.options.search.command;if vim.fn.executable(w)~=1 then c.error(w.." was not found on your path")return end;local x,y=pcall(require,"plenary.job")if not x then c.error("search requires https://github.com/nvim-lua/plenary.nvim")return end;local z=vim.tbl_flatten({a.options.search.args,a.search_regex(e(v.keywords)),v.cwd})y:new({command=w,args=z,on_exit=vim.schedule_wrap(function(A,B)if B==2 then local C=table.concat(A:stderr_result(),"\n")c.error(w.." failed with code "..B.."\n"..C)end;if B==1 and v.disable_not_found_warnings~=true then c.warn("no todos found")end;local j=A:result()u(d.process(j))end)}):start()end;local function D(v)if not v or type(v)~="string"then return v end;return{keywords=v:match("keywords=(%S*)"),cwd=v:match("cwd=(%S*)")}end;function d.setqflist(v)d.setlist(v)end;function d.setloclist(v)d.setlist(v,true)end;function d.setlist(v,E)v=D(v)or{}v.open=v.open~=nil and v.open or true;d.search(function(k)if E then vim.fn.setloclist(0,{}," ",{title="Todo",id="$",items=k})else vim.fn.setqflist({}," ",{title="Todo",id="$",items=k})end;if v.open then if E then vim.cmd([[lopen]])else vim.cmd([[copen]])end end;local F=vim.fn.getqflist({winid=true})if F.winid~=0 then b.highlight_win(F.winid,true)end end,v)end;return d
