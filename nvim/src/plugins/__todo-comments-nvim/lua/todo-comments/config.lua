local a=require("todo-comments.util")local b={}b.keywords={}b.options={}b.loaded=false;b.ns=vim.api.nvim_create_namespace("todo-comments")local c={signs=true,sign_priority=8,keywords={FIX={icon=" ",color="error",alt={"FIXME","BUG","FIXIT","ISSUE"}},TODO={icon=" ",color="info"},HACK={icon=" ",color="warning"},WARN={icon=" ",color="warning",alt={"WARNING","XXX"}},PERF={icon=" ",alt={"OPTIM","PERFORMANCE","OPTIMIZE"}},NOTE={icon=" ",color="hint",alt={"INFO"}},TEST={icon="⏲ ",color="test",alt={"TESTING","PASSED","FAILED"}}},gui_style={fg="NONE",bg="BOLD"},merge_keywords=true,highlight={multiline=true,multiline_pattern="^.",multiline_context=10,before="",keyword="wide",after="fg",pattern=[[.*<(KEYWORDS)\s*:]],comments_only=true,max_line_len=400,exclude={},throttle=200},colors={error={"DiagnosticError","ErrorMsg","#DC2626"},warning={"DiagnosticWarn","WarningMsg","#FBBF24"},info={"DiagnosticInfo","#2563EB"},hint={"DiagnosticHint","#10B981"},default={"Identifier","#7C3AED"},test={"Identifier","#FF00FF"}},search={command="rg",args={"--color=never","--no-heading","--with-filename","--line-number","--column"},pattern=[[\b(KEYWORDS):]]}}b._options=nil;function b.setup(d)if vim.fn.has("nvim-0.8.0")==0 then error("todo-comments needs Neovim >= 0.8.0. Use the 'neovim-pre-0.8.0' branch for older versions")end;b._options=d;if vim.api.nvim_get_vvar("vim_did_enter")==0 then vim.defer_fn(function()b._setup()end,0)else b._setup()end end;function b._setup()b.options=vim.tbl_deep_extend("force",{},c,b.options or{},b._options or{})if b._options and b._options.keywords and b._options.merge_keywords==false then b.options.keywords=b._options.keywords end;for e,f in pairs(b.options.keywords)do b.keywords[e]=e;for g,h in pairs(f.alt or{})do b.keywords[h]=e end end;local function i(j)local k=j or vim.tbl_keys(b.keywords)table.sort(k,function(l,m)return#m<#l end)return table.concat(k,"|")end;function b.search_regex(j)return b.options.search.pattern:gsub("KEYWORDS",i(j))end;b.hl_regex={}local n=b.options.highlight.pattern;n=type(n)=="table"and n or{n}for g,o in pairs(n)do o=o:gsub("KEYWORDS",i())table.insert(b.hl_regex,o)end;b.colors()b.signs()require("todo-comments.highlight").start()b.loaded=true end;function b.signs()for e,f in pairs(b.options.keywords)do vim.fn.sign_define("todo-sign-"..e,{text=f.icon,texthl="TodoSign"..e})end end;function b.colors()local p=a.get_hl("Normal")local q=a.is_dark(p.foreground or"#ffffff")and p.foreground or p.background;local r=a.is_dark(p.foreground or"#ffffff")and p.background or p.foreground;q=q or"#000000"r=r or"#ffffff"local s=b.options.gui_style.fg;local t=b.options.gui_style.bg;local u=a.get_hl("SignColumn")local v=u and u.background and u.background or"NONE"for e,f in pairs(b.options.keywords)do local w=f.color or"default"local x;if w:sub(1,1)=="#"then x=w else local y=b.options.colors[w]y=type(y)=="string"and{y}or y;for g,z in pairs(y)do if z:sub(1,1)=="#"then x=z;break end;local A=a.get_hl(z)if A and A.foreground then x=A.foreground;break end end end;if not x then error("Todo: no color for "..e)end;local B=a.is_dark(x)and r or q;vim.cmd("hi def TodoBg"..e.." guibg="..x.." guifg="..B.." gui="..t)vim.cmd("hi def TodoFg"..e.." guibg=NONE guifg="..x.." gui="..s)vim.cmd("hi def TodoSign"..e.." guibg="..v.." guifg="..x.." gui=NONE")end end;return b
