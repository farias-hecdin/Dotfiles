local a=require("plenary.popup")local b={}local c={}local d='^#+ 'local e='^(#+) (.*)'local f='%s*<h(%d)[^>]*>(.-)</h%d>%s*$'local g={width=60,height=10,borderchars={'─','│','─','│','╭','╮','╯','╰'}}local function h(i)c={}local j=vim.api.nvim_buf_line_count(i)for k=0,j-1 do local l=vim.api.nvim_buf_get_lines(i,k,k+1,false)[1]local m=0;local n=''if l:match(d)then m,n=l:match(e)m=#m elseif l:match(f)then m,n=l:match(f)end;if tonumber(m)>0 then table.insert(c,{line=k,text=string.rep(" ",m-1)..n})end end end;local function o(i)local l=vim.api.nvim_win_get_cursor(0)[1]local p=0;for k=0,l do local q=vim.api.nvim_buf_get_lines(i,k,k+1,false)[1]if string.match(q,d)or string.match(q,f)then p=p+1 end end;return p end;local function r(s)local i=vim.api.nvim_create_buf(false,true)local t=g.width;local u=g.height;local v=g.borderchars;local w,x=a.create(i,{title="Markdown Headers",highlight="MarkdownHeadersWindow",line=math.floor((vim.o.lines-u)/2-1),col=math.floor((vim.o.columns-t)/2),minwidth=t,minheight=u,borderchars=v})vim.api.nvim_win_set_option(x.border.win_id,"winhl","Normal:MarkdownHeadersBorder")local y={}for w,z in ipairs(c)do table.insert(y,z.text)end;vim.api.nvim_buf_set_lines(i,0,#y,false,y)vim.api.nvim_buf_set_option(i,"modifiable",false)vim.api.nvim_set_current_buf(i)vim.api.nvim_win_set_cursor(x.win_id,{s,0})end;local function A(B)local C=vim.api.nvim_get_current_win()vim.api.nvim_win_close(C,true)vim.api.nvim_win_set_cursor(0,{c[B].line+1,0})end;b.select_header=function()local l=vim.api.nvim_win_get_cursor(0)[1]A(l)end;b.close_header_window=function()local C=vim.api.nvim_get_current_win()vim.api.nvim_win_close(C,true)end;b.markdown_headers=function(D)local i=vim.api.nvim_get_current_buf()h(i)local s=nil;if D then s=o(i)else s=1 end;r(s)vim.api.nvim_win_set_option(0,"number",false)vim.api.nvim_win_set_option(0,"relativenumber",false)vim.api.nvim_win_set_option(0,"cursorline",false)vim.api.nvim_buf_set_keymap(0,'n','<CR>',':lua require("md-headers").select_header()<CR>',{noremap=true,silent=true})vim.api.nvim_buf_set_keymap(0,'n','q',':lua require("md-headers").close_header_window()<CR>',{noremap=true,silent=true})vim.api.nvim_buf_set_keymap(0,'n','<Esc>',':lua require("md-headers").close_header_window()<CR>',{noremap=true,silent=true})end;b.setup=function(E)if E then for F,G in pairs(E)do g[F]=G end end end;return b
