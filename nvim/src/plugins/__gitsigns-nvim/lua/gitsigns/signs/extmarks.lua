local a=vim.api;local b=require('gitsigns.config').Config.SignsConfig;local c=require('gitsigns.config').config;local d=require('gitsigns.signs.base')local e={}local f='gitsigns_extmark_signs_'function e.new(g,h)local self=setmetatable({},{__index=e})self.config=g;self.group=f..(h or'')self.ns=a.nvim_create_namespace(self.group)return self end;function e:on_lines(i,j,k,l)if k>l then self:remove(i,l+1,k)end end;function e:remove(m,n,o)if n then a.nvim_buf_clear_namespace(m,self.ns,n-1,o or n)else a.nvim_buf_clear_namespace(m,self.ns,0,-1)end end;function e:add(m,p)if not c.signcolumn and not c.numhl and not c.linehl then return end;local g=self.config;for j,q in ipairs(p)do if not self:contains(m,q.lnum)then local r=g[q.type]local s=r.text;if c.signcolumn and r.show_count and q.count then local t=q.count;local u=c.count_chars;local v=u[t]or u['+']or''s=r.text..v end;local w,x=pcall(a.nvim_buf_set_extmark,m,self.ns,q.lnum-1,-1,{id=q.lnum,sign_text=c.signcolumn and s or'',priority=c.sign_priority,sign_hl_group=r.hl,number_hl_group=c.numhl and r.numhl or nil,line_hl_group=c.linehl and r.linehl or nil})if not w and c.debug_mode then vim.schedule(function()error(table.concat({string.format('Error placing extmark on line %d',q.lnum),x},'\n'))end)end end end end;function e:contains(m,y,z)local A=a.nvim_buf_get_extmarks(m,self.ns,{y-1,0},{z or y,0},{limit=1})return#A>0 end;function e:reset()for j,i in ipairs(a.nvim_list_bufs())do self:remove(i)end end;return e
