local a={debug_mode=false,verbose=false,messages={}}local function b(c,d)d=d+1;local e;local f;local g=1;while true do local h,i=debug.getlocal(d,g)if not h then break end;if h==c then e=i;f=true end;g=g+1 end;if f then return e end;local j=debug.getinfo(d).func;g=1;while true do local h,i=debug.getupvalue(j,g)if not h then break end;if h==c then return i end;g=g+1 end;return getfenv(j)[c]end;local function k(d)d=d+1;local l={}l.name=b('__FUNC__',d)if not l.name then local m=debug.getinfo(d,'n').name or''l.name=m:gsub('(.*)%d+$','%1')end;l.bufnr=b('bufnr',d)or b('_bufnr',d)or b('cbuf',d)or b('buf',d)return l end;local function n(o,d)d=d+1;local p=type(o)=="string"and o or vim.inspect(o)local q=k(d)local r;if q.bufnr then r=string.format('%s(%s): %s',q.name,q.bufnr,p)else r=string.format('%s: %s',q.name,p)end;table.insert(a.messages,r)end;function a.dprint(o)if not a.debug_mode then return end;n(o,2)end;function a.dprintf(o,...)if not a.debug_mode then return end;n(o:format(...),2)end;function a.vprint(o)if not(a.debug_mode and a.verbose)then return end;n(o,2)end;function a.vprintf(o,...)if not(a.debug_mode and a.verbose)then return end;n(o:format(...),2)end;local function s(p,t)local u=debug.getinfo(t+2,'Sl')if u then p=string.format('(ERROR) %s(%d): %s',u.short_src,u.currentline,p)end;a.messages[#a.messages+1]=p;if a.debug_mode then error(p)end end;function a.eprint(p)s(p,1)end;function a.eprintf(v,...)s(v:format(...),1)end;local function w(x,y)if y[#y]==vim.inspect.METATABLE then return nil elseif type(x)=="function"then return nil elseif type(x)=="table"then local z=y[#y]if z=='compare_text'then local A=x;return{'...',length=#A,head=A[1]}elseif not vim.tbl_isempty(x)and z=='staged_diffs'then return{'...',length=#vim.tbl_keys(x)}end end;return x end;function a.add_debug_functions(B)local C={}C.dump_cache=function()local D=vim.inspect(B,{process=w})vim.api.nvim_echo({{D}},false,{})return B end;C.debug_messages=function(E)if not E then for F,G in ipairs(a.messages)do vim.api.nvim_echo({{G}},false,{})end end;return a.messages end;C.clear_debug=function()a.messages={}end;return C end;return a
