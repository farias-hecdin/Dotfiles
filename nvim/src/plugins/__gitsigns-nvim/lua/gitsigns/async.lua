local a={}local b=coroutine.running()function a.wrap(c,d)assert(d)return function(...)if coroutine.running()==b then return c(...)end;return coroutine.yield(c,d,...)end end;function a.void(c)return function(...)if coroutine.running()~=b then return c(...)end;local e=coroutine.create(c)local function f(...)local g={coroutine.resume(e,...)}local h,i,j=unpack(g)if not h then error(string.format("The coroutine failed with this message: %s\n%s",i,debug.traceback(e)))end;if coroutine.status(e)=='dead'then return end;assert(type(i)=="function","type error :: expected func")local k={select(4,unpack(g))}k[j]=f;i(unpack(k,1,j))end;f(...)end end;a.scheduler=a.wrap(vim.schedule,1)return a
