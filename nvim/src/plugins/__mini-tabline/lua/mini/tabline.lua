local a={}local b={}a.setup=function(c)_G.MiniTabline=a;c=b.setup_config(c)b.apply_config(c)vim.api.nvim_exec([[function! MiniTablineSwitchBuffer(buf_id, clicks, button, mod)
        execute 'buffer' a:buf_id
      endfunction]],false)vim.api.nvim_exec([[hi default link MiniTablineCurrent TabLineSel
      hi default link MiniTablineVisible TabLineSel
      hi default link MiniTablineHidden  TabLine
      hi default link MiniTablineModifiedCurrent StatusLine
      hi default link MiniTablineModifiedVisible StatusLine
      hi default link MiniTablineModifiedHidden  StatusLineNC
      hi default link MiniTablineTabpagesection Search
      hi default MiniTablineFill NONE]],false)end;a.config={show_icons=true,set_vim_settings=true,tabpage_section='right'}a.make_tabline_string=function()if b.is_disabled()then return''end;b.make_tabpage_section()b.list_tabs()b.finalize_labels()b.fit_width()return b.concat_tabs()end;b.default_config=a.config;b.tabs={}b.tablineat=vim.fn.has('tablineat')b.unnamed_buffers_seq_ids={}b.path_sep=package.config:sub(1,1)b.tabpage_section=''b.center_buf_id=nil;b.setup_config=function(c)vim.validate({config={c,'table',true}})c=vim.tbl_deep_extend('force',b.default_config,c or{})vim.validate({show_icons={c.show_icons,'boolean'},set_vim_settings={c.set_vim_settings,'boolean'},tabpage_section={c.tabpage_section,'string'}})return c end;b.apply_config=function(c)a.config=c;if c.set_vim_settings then vim.o.showtabline=2;vim.o.hidden=true end;vim.o.tabline='%!v:lua.MiniTabline.make_tabline_string()'end;b.is_disabled=function()return vim.g.minitabline_disable==true or vim.b.minitabline_disable==true end;b.get_config=function(c)return vim.tbl_deep_extend('force',a.config,vim.b.minitabline_config or{},c or{})end;b.make_tabpage_section=function()local d=vim.fn.tabpagenr('$')if d==1 or b.get_config().tabpage_section=='none'then b.tabpage_section=''return end;local e=vim.fn.tabpagenr()b.tabpage_section=('   %s:%s '):format(e,d)end;b.list_tabs=function()local f={}for g,h in ipairs(vim.api.nvim_list_bufs())do if b.is_buffer_in_minitabline(h)then local i={buf_id=h}i['hl']=b.construct_highlight(h)i['tabfunc']=b.construct_tabfunc(h)i['label'],i['label_extender']=b.construct_label_data(h)table.insert(f,i)end end;b.tabs=f end;b.is_buffer_in_minitabline=function(h)return vim.api.nvim_buf_get_option(h,'buflisted')end;b.construct_highlight=function(h)local j;if h==vim.api.nvim_get_current_buf()then j='Current'elseif vim.fn.bufwinnr(h)>0 then j='Visible'else j='Hidden'end;if vim.api.nvim_buf_get_option(h,'modified')then j='Modified'..j end;return string.format('%%#MiniTabline%s#',j)end;b.construct_tabfunc=function(h)if b.tablineat>0 then return string.format('%%%d@MiniTablineSwitchBuffer@',h)else return''end end;b.construct_label_data=function(h)local k,l;local m=vim.api.nvim_buf_get_name(h)if m~=''then k=vim.fn.fnamemodify(m,':t')l=b.make_path_extender(h)else k=b.make_unnamed_label(h)l=function(n)return n end end;return k,l end;b.make_path_extender=function(h)return function(k)local o=vim.api.nvim_buf_get_name(h)local p=string.format('[^%s]+%s%s$',vim.pesc(b.path_sep),vim.pesc(b.path_sep),vim.pesc(k))return string.match(o,p)or k end end;b.make_unnamed_label=function(h)local k;if vim.api.nvim_buf_get_option(h,'buftype')=='quickfix'then k='*quickfix*'else k=b.is_buffer_scratch(h)and'!'or'*'end;local q=b.get_unnamed_id(h)if q>1 then k=string.format('%s(%d)',k,q)end;return k end;b.is_buffer_scratch=function(h)local r=vim.api.nvim_buf_get_option(h,'buftype')return r=='acwrite'or r=='nofile'end;b.get_unnamed_id=function(h)local s=b.unnamed_buffers_seq_ids[h]if s~=nil then return s end;b.unnamed_buffers_seq_ids[h]=vim.tbl_count(b.unnamed_buffers_seq_ids)+1;return b.unnamed_buffers_seq_ids[h]end;b.finalize_labels=function()local t=b.get_nonunique_tab_ids()while#t>0 do local u=true;for g,h in ipairs(t)do local i=b.tabs[h]local v=i.label;i.label=i.label_extender(i.label)if v~=i.label then u=false end end;if u then break end;t=b.get_nonunique_tab_ids()end;local w,x;local y=b.get_config().show_icons;if y then w,x=pcall(require,'nvim-web-devicons')end;for g,i in pairs(b.tabs)do if y and w then local z=vim.fn.fnamemodify(i.label,':e')local A=x.get_icon(i.label,z,{default=true})i.label=string.format(' %s %s ',A,i.label)else i.label=string.format(' %s ',i.label)end end end;b.get_nonunique_tab_ids=function()local B={}for C,i in ipairs(b.tabs)do local k=i.label;if B[k]==nil then B[k]={C}else table.insert(B[k],C)end end;return vim.tbl_flatten(vim.tbl_filter(function(n)return#n>1 end,B))end;b.fit_width=function()b.update_center_buf_id()local D=1;local E=0;for g,i in pairs(b.tabs)do i.label_width=vim.api.nvim_strwidth(i.label)i.chars_on_left=E;E=E+i.label_width;if i.buf_id==b.center_buf_id then D=E end end;local F=b.compute_display_interval(D,E)b.truncate_tabs_display(F)end;b.update_center_buf_id=function()local G=vim.api.nvim_get_current_buf()if b.is_buffer_in_minitabline(G)then b.center_buf_id=G end end;b.compute_display_interval=function(D,H)local E=vim.o.columns-vim.api.nvim_strwidth(b.tabpage_section)local I=math.min(H,math.floor(D+0.5*E))local J=math.max(1,I-E+1)I=J+math.min(E,H)-1;return{J,I}end;b.truncate_tabs_display=function(F)local K,L=F[1],F[2]local f={}for g,i in ipairs(b.tabs)do local M=i.chars_on_left+1;local N=i.chars_on_left+i.label_width;if K<=N and M<=L then local O=math.max(0,K-M)local P=math.max(0,N-L)i.label=vim.fn.strcharpart(i.label,O,i.label_width-P)table.insert(f,i)end end;b.tabs=f end;b.concat_tabs=function()local Q={}for g,i in ipairs(b.tabs)do table.insert(Q,('%s%s%s'):format(i.hl,i.tabfunc,i.label:gsub('%%','%%%%')))end;local R=('%s%%X%%#MiniTablineFill#'):format(table.concat(Q,''))local S=b.get_config().tabpage_section;if b.tabpage_section~=''then if not vim.tbl_contains({'none','left','right'},S)then b.message([[`config.tabpage_section` should be one of 'left', 'right', 'none'.]])end;if S=='left'then R=('%%#MiniTablineTabpagesection#%s%s'):format(b.tabpage_section,R)end;if S=='right'then R=('%s%%=%%#MiniTablineTabpagesection#%s'):format(R,b.tabpage_section)end end;return R end;b.echo=function(T,U)T=type(T)=='string'and{{T}}or T;table.insert(T,1,{'(mini.tabline) ','WarningMsg'})vim.cmd([[echo '' | redraw]])vim.api.nvim_echo(T,U,{})end;b.message=function(T)b.echo(T,true)end;return a
