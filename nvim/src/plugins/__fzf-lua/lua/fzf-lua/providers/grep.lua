local a=require"fzf-lua.path"local b=require"fzf-lua.core"local c=require"fzf-lua.utils"local d=require"fzf-lua.config"local e=require"fzf-lua.libuv"local f=require"fzf-lua.make_entry"local function g(h)if h.__MODULE__ and h.__MODULE__.get_last_search then return h.__MODULE__.get_last_search(h)end;local i=d.globals.grep._last_search or{}return i.query,i.no_esc end;local function j(h,k,l)if h.__MODULE__ and h.__MODULE__.set_last_search then h.__MODULE__.set_last_search(h,k,l)return end;d.globals.grep._last_search={query=k,no_esc=l}if d.__resume_data then d.__resume_data.last_query=k end end;local function m(n)return n:match("^%*")and n or"*"..n end;local o={}local p=function(h,q,l)if h.raw_cmd and#h.raw_cmd>0 then return h.raw_cmd end;local r=nil;if h.cmd and#h.cmd>0 then r=h.cmd elseif vim.fn.executable("rg")==1 then r=string.format("rg %s",h.rg_opts)else r=string.format("grep %s",h.grep_opts)end;if h.rg_glob and not r:match("^rg")then h.rg_glob=false;c.warn("'--glob|iglob' flags require 'rg', ignoring 'rg_glob' option.")end;if h.rg_glob then local s,t=f.glob_parse(q,h)if t then if not(l or h.no_esc)then s=c.rg_escape(s)h.no_esc=true;h.search=("%s%s"):format(s,q:match(h.glob_separator..".*"))end;q=s;r=("%s %s"):format(r,t)end end;local u=""if h.filespec and#h.filespec>0 then u=h.filespec elseif h.filename and#h.filename>0 then u=e.shellescape(h.filename)end;q=q or""if not(l or h.no_esc)then q=c.rg_escape(q)end;if not h.no_column_hide and#q==0 then r=r:gsub("%s%-%-column","")end;if not(l==2 or h.no_esc==2)then q=e.shellescape(q)end;r=("%s %s %s"):format(r,q,u)if h.filter and#h.filter>0 then r=("%s | %s"):format(r,h.filter)end;return r end;o.grep=function(h)h=d.normalize_opts(h,d.globals.grep)if not h then return end;h.__MODULE__=h.__MODULE__ or o;local l=false;if not h.search and h.resume then h.search,l=g(h)h.search=h.search or h.resume_search_default end;if not h.search and not h.raw_cmd then h.search=c.input(h.input_prompt)or""end;h.cmd=p(h,h.search,l)j(h,h.search,l or h.no_esc)local v=b.mt_cmd_wrapper(vim.tbl_deep_extend("force",h,{rg_glob=false}))if type(v)=="string"then v=v.." 2>&1"end;h.fn_post_fzf=function(w,x)local i,x=g(w)local y=d.__resume_data and d.__resume_data.last_query;if not i or#i==0 and(y and#y>0)then j(h,y)end end;h=b.set_header(h,h.headers or{"actions","cwd","search"})h=b.set_fzf_field_index(h)b.fzf_exec(v,h)end;o.live_grep_st=function(h)h=d.normalize_opts(h,d.globals.grep)if not h then return end;h.__MODULE__=h.__MODULE__ or o;h.prompt=m(h.prompt)assert(not h.multiprocess)local l=false;if not h.search and h.resume then h.search,l=g(h)end;h.query=h.search or""if h.search and#h.search>0 then if not(l or h.no_esc)then h.query=c.rg_escape(h.search)end;j(h,h.query,true)end;h.fn_reload=function(k)if k and not(h.save_last_search==false)then j(h,k,true)end;k=k or""h.no_esc=nil;return p(h,k,true)end;if h.requires_processing or h.git_icons or h.file_icons then h.fn_transform=h.fn_transform or function(z)return f.file(z,h)end;h.fn_preprocess=h.fn_preprocess or function(w)return f.preprocess(w)end end;if not h._is_skim then h.save_query=true;h.fn_post_fzf=function(w,x)local i,x=g(w)local y=d.__resume_data and d.__resume_data.last_query;if not h.exec_empty_query and i~=y then j(h,y or"")end end end;h=b.set_header(h,h.headers or{"actions","cwd"})h=b.set_fzf_field_index(h)b.fzf_exec(nil,h)end;o.live_grep_mt=function(h)h=d.normalize_opts(h,d.globals.grep)if not h then return end;h.__MODULE__=h.__MODULE__ or o;h.__module__=h.__module__ or"grep"h.prompt=m(h.prompt)if h.rg_glob then h.requires_processing=true end;assert(h.multiprocess)local l=false;if not h.search and h.resume then h.search,l=g(h)end;h.query=h.search or""if h.search and#h.search>0 then if not(l or h.no_esc)then h.query=c.rg_escape(h.search)end;j(h,h.query,true)end;h.argv_expr=true;h.cmd=p(h,b.fzf_query_placeholder,2)local r=b.mt_cmd_wrapper(h)if r~=h.cmd then r=r:gsub(b.fzf_query_placeholder,"{argvz}").." "..b.fzf_query_placeholder end;h.fn_reload=r;if not h._is_skim then h.save_query=true;h.fn_post_fzf=function(w,x)local i,x=g(w)local y=d.__resume_data and d.__resume_data.last_query;if not h.exec_empty_query and i~=y or not h.requires_processing and not h.git_icons and not h.file_icons then j(h,y or"",true)end end end;h=b.set_header(h,h.headers or{"actions","cwd"})h=b.set_fzf_field_index(h)b.fzf_exec(nil,h)end;o.live_grep_glob_st=function(h)if vim.fn.executable("rg")~=1 then c.warn("'--glob|iglob' flags requires 'rg' (https://github.com/BurntSushi/ripgrep)")return end;h=h or{}h.rg_glob=true;return o.live_grep_st(h)end;o.live_grep_glob_mt=function(h)if vim.fn.executable("rg")~=1 then c.warn("'--glob|iglob' flags requires 'rg' (https://github.com/BurntSushi/ripgrep)")return end;h=h or{}h.rg_glob=true;return o.live_grep_mt(h)end;o.live_grep_native=function(h)h=h or{}h.git_icons=false;h.file_icons=false;h.rg_glob=false;return o.live_grep_mt(h)end;o.live_grep=function(h)h=d.normalize_opts(h,d.globals.grep)if not h then return end;if h.multiprocess then return o.live_grep_mt(h)else return o.live_grep_st(h)end end;o.live_grep_glob=function(h)h=d.normalize_opts(h,d.globals.grep)if not h then return end;if h.multiprocess then return o.live_grep_glob_mt(h)else return o.live_grep_glob_st(h)end end;o.live_grep_resume=function(h)if not h then h={}end;h.resume=true;return o.live_grep(h)end;o.grep_last=function(h)if not h then h={}end;h.resume=true;return o.grep(h)end;o.grep_cword=function(h)if not h then h={}end;h.search=vim.fn.expand("<cword>")return o.grep(h)end;o.grep_cWORD=function(h)if not h then h={}end;h.search=vim.fn.expand("<cWORD>")return o.grep(h)end;o.grep_visual=function(h)if not h then h={}end;h.search=c.get_visual_selection()return o.grep(h)end;o.grep_project=function(h)if not h then h={}end;if not h.search then h.search=""end;if not h.fzf_opts or h.fzf_opts["--nth"]==nil then h.fzf_opts=h.fzf_opts or{}h.fzf_opts["--nth"]="2.."end;return o.grep(h)end;o.grep_curbuf=function(h)if type(h)=="function"then h=h()elseif not h then h={}end;h.rg_glob=false;h.rg_opts=d.globals.grep.rg_opts.." --with-filename"h.grep_opts=d.globals.grep.grep_opts.." --with-filename"if h.exec_empty_query==nil then h.exec_empty_query=true end;h.fzf_opts=vim.tbl_extend("keep",h.fzf_opts or{},d.globals.blines.fzf_opts)h.filename=vim.api.nvim_buf_get_name(0)if#h.filename>0 and vim.loop.fs_stat(h.filename)then h.filename=a.relative(h.filename,vim.loop.cwd())if h.lgrep then return o.live_grep(h)else h.search=h.search or""return o.grep(h)end else c.info("Rg current buffer requires file on disk")return end end;o.lgrep_curbuf=function(h)if type(h)=="function"then h=h()elseif not h then h={}end;h.lgrep=true;return o.grep_curbuf(h)end;return o
