local a=require"fzf-lua.core"local b=require"fzf-lua.utils"local c=require"fzf-lua.shell"local d=require"fzf-lua.config"local e=require"fzf-lua.actions"local function f()if vim.g.colors_name then return vim.g.colors_name else return"default"end end;local g={}g.colorschemes=function(h)h=d.normalize_opts(h,d.globals.colorschemes)if not h then return end;local i=f()local j=vim.o.background;local k=vim.list_extend(h.colors or{},vim.fn.getcompletion("","color"))h.fzf_opts["--no-multi"]=""if h.live_preview then h.fzf_opts["--preview-window"]="nohidden:right:0"h.preview=c.raw_action(function(l)if h.live_preview and l then local m=l[1]vim.cmd("colorscheme "..m)end end,nil,h.debug)end;h.fn_selected=function(n)if h.live_preview and(not n or#n[1]>0)then vim.o.background=j;vim.cmd("colorscheme "..i)vim.o.background=j end;if n then e.act(h.actions,n)end;if h.post_reset_cb then h.post_reset_cb()end end;a.fzf_exec(k,h)end;g.highlights=function(h)h=d.normalize_opts(h,d.globals.highlights)if not h then return end;local o=function(p)local q=vim.api.nvim_get_color_map()local r=vim.fn.getcompletion("","highlight")local function s(t,u)local v=b.ansi_from_hl(t,t,q)p(v,function(w)if u then coroutine.resume(u)end;if w then p(nil,function()end)end end)if u then coroutine.yield()end end;local function x(y,z,u)for A,B in ipairs(y)do z(B,u)end;p(nil,function()if u then coroutine.resume(u)end end)end;local C=h.coroutinify==nil and false or h.coroutinify;if not C then x(r,s)else coroutine.wrap(function()x(r,function(v,u)vim.schedule(function()s(v,u)end)end,coroutine.running())coroutine.yield()end)()end end;h.fzf_opts["--no-multi"]=""a.fzf_exec(o,h)end;return g
