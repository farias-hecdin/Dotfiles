local a=require"fzf-lua.fzf"local b=require"fzf-lua.path"local c=require"fzf-lua.utils"local d=require"fzf-lua.config"local e=require"fzf-lua.actions"local f=require"fzf-lua.win"local g=require"fzf-lua.libuv"local h=require"fzf-lua.shell"local i=require"fzf-lua.make_entry"local j={}j.fzf_exec=function(k,l)if not l or not l._normalized then l=d.normalize_opts(l or{},{})if not l then return end end;l.fn_selected=l.fn_selected or function(m)if not m then return end;e.act(l.actions,m,l)end;if type(k)=="string"and(l.fn_transform or l.fn_preprocess)then k=g.spawn_nvim_fzf_cmd({cmd=k,cwd=l.cwd,pid_cb=l._pid_cb},l.fn_transform or function(n)return n end,l.fn_preprocess)end;if type(l.fn_reload)=="string"then if not l.fn_transform then l=j.setup_fzf_interactive_native(l.fn_reload,l)k=l.__fzf_init_cmd else local o=l.fn_reload;l.fn_reload=function(p)if o:match(j.fzf_query_placeholder)then return o:gsub(j.fzf_query_placeholder,p or"")else return string.format("%s %s",o,p or"")end end end end;if type(l.fn_reload)=="function"then l.__fn_transform=l.fn_transform;l.__fn_reload=function(q)if d.__resume_data then d.__resume_data.last_query=q end;return l.fn_reload(q)end;l=j.setup_fzf_interactive_wrap(l)k=l.__fzf_init_cmd end;return j.fzf_wrap(l,k)()end;j.fzf_live=function(k,l)assert(k)l=l or{}l.fn_reload=k;return j.fzf_exec(nil,l)end;j.fzf_resume=function(l)if not d.__resume_data or not d.__resume_data.opts then c.info("No resume data available, is 'global_resume' enabled?")return end;l=vim.tbl_deep_extend("force",d.__resume_data.opts,l or{})local r=d.__resume_data.last_query;if not r or#r==0 then r=false end;l.__resume=true;l.query=r;j.fzf_exec(d.__resume_data.contents,l)end;j.fzf_wrap=function(l,k,s)l=l or{}return coroutine.wrap(function()l.fn_selected=l.fn_selected or s;local m=j.fzf(k,l)if l.fn_selected then l.fn_selected(m,l)end end)end;j.fzf=function(k,l)if not l or not l._normalized then l=d.normalize_opts(l or{},{})if not l then return end end;if l.fn_pre_win then l.fn_pre_win(l)end;if l.global_resume then d.__resume_data=d.__resume_data or{}d.__resume_data.opts=c.deepcopy(l)d.__resume_data.contents=k and c.deepcopy(k)or nil;if not l.__resume then d.__resume_data.last_query=nil end;l.__resume_data=d.__resume_data end;if l.save_query or l.global_resume and l.global_resume_query then l.fzf_opts["--print-query"]=""l.fn_save_query=function(q)d.__resume_data.last_query=q and#q>0 and q or nil end end;local t=f(l)if not t then return end;local u,v=nil,nil;if l.previewer and type(l.previewer)=="string"then v=d.globals.previewers[l.previewer]if not v then c.warn(("invalid previewer '%s'"):format(l.previewer))end elseif l.previewer and type(l.previewer)=="table"then v=l.previewer end;if v and type(v.new)=="function"then u=v:new(v,l,t)elseif v and type(v._new)=="function"then u=v._new()(v,l,t)elseif v and type(v._ctor)=="function"then u=v._ctor()(v,l,t)end;if u then l.preview=u:cmdline()if type(u.preview_window)=="function"then l.fzf_opts["--preview-window"]=u:preview_window(l.preview_window)end;if type(u.fzf_delimiter)=="function"then l.fzf_opts["--delimiter"]=u:fzf_delimiter()end;if type(u.preview_offset)=="function"then l.preview_offset=u:preview_offset()end elseif not l.preview and not l.fzf_opts["--preview"]then l.fzf_opts["--preview-window"]="hidden:right:0"end;if l.__fn_pre_fzf then l.__fn_pre_fzf(l)end;if l._fn_pre_fzf then l._fn_pre_fzf(l)end;if l.fn_pre_fzf then l.fn_pre_fzf(l)end;t:attach_previewer(u)t:create()l.winopts.preview=t.winopts.preview;local m,w=a.raw_fzf(k,j.build_fzf_cli(l),{fzf_bin=l.fzf_bin,cwd=l.cwd,silent_fail=l.silent_fail})if m and#m>0 and l.fzf_opts["--print-query"]~=nil then if l.fn_save_query and not(l._is_skim and l.fn_reload)then l.fn_save_query(m[1])end;table.remove(m,1)end;if l.__fn_post_fzf then l.__fn_post_fzf(l,m)end;if l._fn_post_fzf then l._fn_post_fzf(l,m)end;if l.fn_post_fzf then l.fn_post_fzf(l,m)end;g.process_kill(l._pid)t:check_exit_status(w)local x=e.normalize_selected(l.actions,m)local y=x and l.actions and l.actions[x]if not t:autoclose()==false and type(y)~="table"then t:close()end;return m end;j.preview_window=function(z)local A=("%s:%s:%s:"):format(z.winopts.preview.hidden,z.winopts.preview.border,z.winopts.preview.wrap)if z.winopts.preview.layout=="horizontal"or z.winopts.preview.layout=="flex"and vim.o.columns>z.winopts.preview.flip_columns then A=A..z.winopts.preview.horizontal else A=A..z.winopts.preview.vertical end;return A end;j.get_color=function(B,C)return vim.fn.synIDattr(vim.fn.synIDtrans(vim.fn.hlID(B)),C)end;j.create_fzf_colors=function(l)local D=l and l.fzf_colors;if type(D)=="function"then D=D(l)end;if not D then return end;local E={}for F,G in pairs(D)do local H=j.get_color(G[2],G[1])local I=H:match("#[%x]+")or H:match("^[0-9]+")if I then table.insert(E,("%s:%s"):format(F,I))end;for J=3,#G do table.insert(E,("%s:%s"):format(F,G[J]))end end;return not vim.tbl_isempty(E)and table.concat(E,",")end;j.create_fzf_binds=function(K)if not K or vim.tbl_isempty(K)then return end;local E={}local L={}for M,N in pairs(K)do if N then local O,y=N:match("(.*):(.*)")if y then M,N=O,y end;L[M]=N end end;for O,y in pairs(L)do table.insert(E,string.format("%s:%s",O,y))end;return vim.fn.shellescape(table.concat(E,","))end;j.build_fzf_cli=function(l)l.fzf_opts=vim.tbl_extend("force",d.globals.fzf_opts,l.fzf_opts or{})for P,z in ipairs({"fzf_ansi","fzf_colors","fzf_layout","keymap"})do l[z]=l[z]or d.globals[z]end;for P,z in ipairs({"query","preview"})do local Q=string.format("--%s",z)if l[z]~=nil then l.fzf_opts[Q]=l[z]and vim.fn.shellescape(l[z])else l.fzf_opts[Q]=l.fzf_opts[Q]end end;l.fzf_opts["--bind"]=j.create_fzf_binds(l.keymap.fzf)if l.fzf_colors then l.fzf_opts["--color"]=j.create_fzf_colors(l)end;l.fzf_opts["--expect"]=e.expect(l.actions)if l.fzf_opts["--preview-window"]==nil then l.fzf_opts["--preview-window"]=j.preview_window(l)end;if l.preview_offset and#l.preview_offset>0 then l.fzf_opts["--preview-window"]=l.fzf_opts["--preview-window"]..":"..l.preview_offset end;l.fzf_opts["--prompt"]=(l.prompt or l.fzf_opts["--prompt"])and vim.fn.shellescape(l.prompt or l.fzf_opts["--prompt"])if l.nomulti or l.fzf_opts["--no-multi"]then l.fzf_opts["--multi"]=nil;l.fzf_opts["--no-multi"]=""else l.fzf_opts["--multi"]=""l.fzf_opts["--no-multi"]=nil end;for M,N in pairs({["--ansi"]="fzf_ansi",["--layout"]="fzf_layout"})do if l[N]and#l[N]==0 then l.fzf_opts[M]=nil elseif l[N]then l.fzf_opts[M]=l[N]end end;local R=""for P,z in ipairs({"fzf_args","fzf_raw_args","fzf_cli_args","_fzf_cli_args"})do if l[z]then R=R.." "..l[z]end end;if l._is_skim then local S=l.fzf_opts["--info"]l.fzf_opts["--info"]=nil;if S=="inline"then l.fzf_opts["--inline-info"]=""end;local T=l.fzf_opts["--border"]if T=="none"then l.fzf_opts["--border"]=nil else l.fzf_opts["--border"]=""end end;local U=""for M,N in pairs(l.fzf_opts)do if type(N)=="table"then N=nil elseif type(N)=="number"then N=string.format("%d",N)end;if N then N=N:gsub(M.."=","")U=U..(" %s%s"):format(M,#N>0 and"="..N or"")end end;return U..R end;j.mt_cmd_wrapper=function(l)assert(l and l.cmd)local V=function(W)return"[["..W:gsub("[%]]",function(n)return"\\"..n end).."]]"end;local X=function(z)local Y={"debug","argv_expr","cmd","cwd","stdout","stderr","stderr_to_stdout","git_dir","git_worktree","git_icons","file_icons","color_icons","path_shorten","strip_cwd_prefix","file_ignore_patterns","rg_glob","__module__"}if z.rg_glob then table.insert(Y,"glob_flag")table.insert(Y,"glob_separator")end;local Z=""for P,_ in ipairs(Y)do if z[_]~=nil then if#Z>0 then Z=Z..","end;local a0=z[_]if type(a0)=="string"then a0=V(a0)end;if type(a0)=="table"then a0=vim.inspect(a0)end;Z=Z..("%s=%s"):format(_,a0)end end;return"{"..Z.."}"end;if not l.requires_processing and not l.git_icons and not l.file_icons then return l.cmd elseif l.multiprocess then assert(not l.__mt_transform or type(l.__mt_transform)=="string")assert(not l.__mt_preprocess or type(l.__mt_preprocess)=="string")local a1=l.__mt_preprocess or[[return require("make_entry").preprocess]]local a2=l.__mt_transform or[[return require("make_entry").file]]if not l.no_remote_config then a2=([[_G._fzf_lua_server=%s; %s]]):format(g.shellescape(vim.g.fzf_lua_server),a2)end;if d._devicons_setup then a2=([[_G._devicons_setup=%s; %s]]):format(g.shellescape(d._devicons_setup),a2)end;if d._devicons_path then a2=([[_G._devicons_path=%s; %s]]):format(g.shellescape(d._devicons_path),a2)end;local o=g.wrap_spawn_stdio(X(l),a2,a1)if l.debug_cmd or l.debug and not(l.debug_cmd==false)then print(o)end;return o else assert(not l.__mt_transform or type(l.__mt_transform)=="function")assert(not l.__mt_preprocess or type(l.__mt_preprocess)=="function")return g.spawn_nvim_fzf_cmd(l,function(n)return l.__mt_transform and l.__mt_transform(n,l)or i.file(n,l)end,function(z)return l.__mt_preprocess and l.__mt_preprocess(z)or i.preprocess(z)end)end end;j.set_fzf_field_index=function(l,a3,a4)l.line_field_index=l.line_field_index or a3 or 2;l.field_index_expr=l.field_index_expr or a4 or"{1}"return l end;j.set_header=function(l,a5)local function a6(a7)if b.starts_with_separator(a7)and a7~=vim.loop.cwd()then a7=b.relative(a7,vim.loop.cwd())end;return b.HOME_to_tilde(a7)end;if not l then l={}end;if l.cwd_prompt or l.show_cwd_prompt then l.prompt=a6(l.cwd or vim.loop.cwd())if not b.ends_with_separator(l.prompt)then l.prompt=l.prompt..b.separator()end end;if l.no_header or l.headers==false then return l end;local a8={cwd={hdr_txt_opt="cwd_header",hdr_txt_str="cwd: ",hdr_txt_col="red",val=function()if l.show_cwd_header==false or not l.show_cwd_header and(not l.cwd or l.cwd==vim.loop.cwd())then return end;return a6(l.cwd or vim.loop.cwd())end},search={hdr_txt_opt="grep_header",hdr_txt_str="Grep string: ",hdr_txt_col="red",val=function()return l.search and#l.search>0 and l.search end},lsp_query={hdr_txt_opt="lsp_query_header",hdr_txt_str="Query: ",hdr_txt_col="red",val=function()return l.lsp_query and#l.lsp_query>0 and l.lsp_query end},regex_filter={hdr_txt_opt="regex_header",hdr_txt_str="Regex filter: ",hdr_txt_col="red",val=function()return l.regex_filter and#l.regex_filter>0 and l.regex_filter end},actions={hdr_txt_opt="interactive_header",hdr_txt_str="",val=function()local a9=l.__MODULE__.workspace_symbols;local z={action=a9 and e.sym_lsym or e.grep_lgrep,to_live=a9 and"Live Query"or"Regex Search",to_fuzzy=a9 and"Fuzzy Search"or"Fuzzy Search"}if l.no_header_i then return end;for M,N in pairs(l.actions)do if type(N)=="table"and N[1]==z.action then local aa=l.fn_reload and z.to_fuzzy or z.to_live;return(":: <%s> to %s"):format(c.ansi_codes.yellow(M),c.ansi_codes.red(aa))end end end}}if not l.headers then l.headers=a5 or{"cwd"}end;for P,ab in ipairs(l.headers)do assert(a8[ab])local ac=l[a8[ab].hdr_txt_opt]if ac then a8[ab].hdr_txt_str=ac end end;local ad;for P,ab in ipairs(l.headers)do assert(a8[ab])local ae=a8[ab]local af=ae.val()if ae and af then ad=not ad and""or ad..", "ad=("%s%s%s"):format(ad,ae.hdr_txt_str,not ae.hdr_txt_col and af or c.ansi_codes[ae.hdr_txt_col](af))end end;if ad and#ad>0 then l.fzf_opts["--header"]=g.shellescape(ad)end;return l end;j.fzf_files=function(l,k)c.warn("'core.fzf_files' is deprecated, use 'fzf_exec' instead,".." see github@fzf-lua/wiki/Advanced.")j.fzf_exec(k or l and l.fzf_fn and l.fzf_fn,l)end;j.setup_fzf_interactive_flags=function(ag,ah,l)l.query=l.query or""local ai=ag;if l.stderr_to_stdout~=false and not ai:match("2>")then ai=ag.." 2>&1"end;local aj=ai;if not l.exec_empty_query then aj=("[ -z %s ] || %s"):format(ah,aj)end;if l._is_skim then l.__fzf_init_cmd=nil;l.prompt=l.__prompt or l.prompt or l.fzf_opts["--prompt"]if l.prompt then l.fzf_opts["--prompt"]=l.prompt:match("[^%*]+")l.fzf_opts["--cmd-prompt"]=g.shellescape(l.prompt)l.__prompt=l.prompt;l.prompt=nil end;l.fzf_opts["--cmd-query"]=g.shellescape(c.sk_escape(l.query))l.fzf_opts["--query"]=nil;l.query=nil;l._fzf_cli_args=string.format("--interactive --cmd %s",g.shellescape(aj))else l.__fzf_init_cmd="true"if l.exec_empty_query or l.query and#l.query>0 then l.__fzf_init_cmd=ai:gsub(ah,g.shellescape(l.query:gsub("%%","%%%%")))end;l.fzf_opts["--disabled"]=""l.fzf_opts["--query"]=g.shellescape(l.query)if l.silent_fail~=false then aj=("%s || true"):format(aj)end;l._fzf_cli_args=string.format("--bind=%s",g.shellescape(("change:reload:%s"):format(("%s"):format(aj))))end;return l end;j.fzf_query_placeholder="<query>"j.fzf_field_expression=function(l)return l and l._is_skim and'"{}"'or"{q}"end;j.setup_fzf_interactive_wrap=function(l)assert(l and l.__fn_reload)local ah=j.fzf_field_expression(l)local ag=h.reload_action_cmd(l,ah)return j.setup_fzf_interactive_flags(ag,ah,l)end;j.setup_fzf_interactive_native=function(ag,l)local ah=j.fzf_field_expression(l)if ag:match(j.fzf_query_placeholder)then ag=l.fn_reload:gsub(j.fzf_query_placeholder,ah)else ag=("%s %s"):format(ag,ah)end;return j.setup_fzf_interactive_flags(ag,ah,l)end;return j
