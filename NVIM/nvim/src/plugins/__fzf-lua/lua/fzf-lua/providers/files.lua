local a=require"fzf-lua.core"local b=require"fzf-lua.utils"local c=require"fzf-lua.config"local d=require"fzf-lua.make_entry"local e={}local function f(g)local h=b.find_version()if not h and g:match("%-printf")then b.warn("POSIX find does not support the '-printf' option.".." Install 'fd' or set 'files.find_opts' to '-type f'.")end end;local i=function(g)if g.raw_cmd and#g.raw_cmd>0 then return g.raw_cmd end;if g.cmd and#g.cmd>0 then return g.cmd end;local j=nil;if vim.fn.executable("fdfind")==1 then j=string.format("fdfind %s",g.fd_opts)elseif vim.fn.executable("fd")==1 then j=string.format("fd %s",g.fd_opts)elseif vim.fn.executable("rg")==1 then j=string.format("rg %s",g.rg_opts)else f(g.find_opts)j=string.format("find -L . %s",g.find_opts)end;return j end;e.files=function(g)g=c.normalize_opts(g,c.globals.files)if not g then return end;g.cmd=i(g)local k=a.mt_cmd_wrapper(g)g=a.set_header(g,g.headers or{"cwd"})return a.fzf_exec(k,g)end;e.args=function(g)g=c.normalize_opts(g,c.globals.args)if not g then return end;if g.fzf_opts["--header"]==nil then g.fzf_opts["--header"]=vim.fn.shellescape((":: %s to delete"):format(b.ansi_codes.yellow("<Ctrl-x>")))end;local k=function(l)local function m(n,o)n=d.file(n,g)if not n then return end;l(n,function(p)coroutine.resume(o)if p then l(nil,function()end)end end)coroutine.yield()end;coroutine.wrap(function()local o=coroutine.running()local q=vim.fn.execute("args")q=b.strsplit(q,"%s\n")for r,s in ipairs(q)do if s:match("^%[")then s=s:gsub("^%[",""):gsub("%]$","")end;local t=vim.loop.fs_stat(s)if g.files_only==false or t and t.type=="file"then m(s,o)end end;l(nil)end)()end;g=a.set_header(g,g.headers or{"cwd"})return a.fzf_exec(k,g)end;return e
