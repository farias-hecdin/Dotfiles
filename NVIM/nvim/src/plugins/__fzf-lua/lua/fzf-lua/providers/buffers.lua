local a=require"fzf-lua.core"local b=require"fzf-lua.path"local c=require"fzf-lua.utils"local d=require"fzf-lua.config"local e=require"fzf-lua.actions"local f=require"fzf-lua.make_entry"local g={}local h={}local i=function()h={curtabidx=vim.fn.tabpagenr(),curtab=vim.api.nvim_win_get_tabpage(0),curbuf=vim.api.nvim_get_current_buf(),prevbuf=vim.fn.bufnr("#"),buflist=vim.api.nvim_list_bufs(),bufmap=(function()local j={}for k,l in ipairs(vim.api.nvim_list_bufs())do j[l]=true end;return j end)()}end;local m=function(n,o)if type(o)=="function"then o=o()end;local p={}if n.current_tab_only then for k,q in ipairs(vim.api.nvim_tabpage_list_wins(h.curtab))do local l=vim.api.nvim_win_get_buf(q)p[l]=true end end;local r={}local s=vim.tbl_filter(function(l)if not n.show_unlisted and 1~=vim.fn.buflisted(l)then r[l]=true end;if n.show_all_buffers==false and not vim.api.nvim_buf_is_loaded(l)then r[l]=true end;if c.buf_is_qf(l)then if n.show_quickfix then r[l]=nil else r[l]=true end end;if n.ignore_current_buffer and l==h.curbuf then r[l]=true end;if n.current_tab_only and not p[l]then r[l]=true end;if n.no_term_buffers and c.is_term_buffer(l)then r[l]=true end;if n.cwd_only and not b.is_relative(vim.api.nvim_buf_get_name(l),vim.loop.cwd())then r[l]=true end;return not r[l]end,o)return s,r end;local t=function(n,s,u)local v={}for k,w in ipairs(s)do local x=w==h.curbuf and"%"or w==h.prevbuf and"#"or" "local y={bufnr=w,flag=x,info=vim.fn.getbufinfo(w)[1]}if u then local z=c.winid_from_tabh(u,w)if z then y.info.lnum=vim.api.nvim_win_get_cursor(z)[1]end end;table.insert(v,y)end;if n.sort_lastused then table.sort(v,function(A,l)return A.info.lastused>l.info.lastused end)end;return v end;local function B(n,C,D,E)local F=""local G=vim.api.nvim_buf_get_option(C.bufnr,"readonly")and"="or" "local H=C.info.changed==1 and"+"or" "local I=F..G..H;local J=c.ansi_codes.clear("[")local K=c.ansi_codes.clear("]")local L=#C.info.name>0 and b.relative(C.info.name,E or vim.loop.cwd())or c.nvim_buf_get_name(C.bufnr,C.info)if n.filename_only then L=b.basename(L)end;L=b.HOME_to_tilde(L)L=("%s:%s"):format(L,C.info.lnum>0 and C.info.lnum or"")if C.flag=="%"then I=c.ansi_codes.red(C.flag)..I;if D then J=c.ansi_codes.green("[")K=c.ansi_codes.green("]")L=c.ansi_codes.green(L)end elseif C.flag=="#"then I=c.ansi_codes.cyan(C.flag)..I else I=c.nbsp..I end;local M=string.format("%s%s%s",J,c.ansi_codes.yellow(string.format(C.bufnr)),K)local N=""local O=""if n.file_icons then if c.is_term_bufname(C.info.name)then N,O=f.get_devicon(C.info.name,"sh")else local P=b.tail(C.info.name)local Q=b.extension(P)N,O=f.get_devicon(P,Q)end;if n.color_icons then N=c.ansi_codes[O](N)end end;local R=string.format("%s%s%s%s%s%s%s%s",c._if(n._prefix,n._prefix,""),string.format("%-32s",M),c.nbsp,I,c.nbsp,N,c.nbsp,L)return R end;local S=function(n)if n.fzf_opts["--header"]==nil then for T,U in pairs(n.actions)do local V=type(U)=="table"and U[1]or U;if V==e.buf_del then n.fzf_opts["--header"]=vim.fn.shellescape(string.format(":: <%s> to close",c.ansi_codes.yellow(T)))end end end;return n end;g.buffers=function(n)n=d.normalize_opts(n,d.globals.buffers)if not n then return end;n.fn_pre_fzf=i;local W=function(X)local Y=m(n,h.buflist)if next(Y)then local v=t(n,Y)for k,Z in pairs(v)do X(B(n,Z,not n.sort_lastused))end end;X(nil)end;if n.fzf_opts["--header-lines"]==nil then n.fzf_opts["--header-lines"]=not n.ignore_current_buffer and n.sort_lastused and"1"end;n=S(n)n=a.set_fzf_field_index(n)a.fzf_exec(W,n)end;g.lines=function(n)n=d.normalize_opts(n,d.globals.lines)g.buffer_lines(n)end;g.blines=function(n)n=d.normalize_opts(n,d.globals.blines)n.current_buffer_only=true;n.line_field_index=n.line_field_index or 2;g.buffer_lines(n)end;g.buffer_lines=function(n)if not n then return end;n.fn_pre_fzf=i;n.fn_pre_fzf()local v=m(n,n.current_buffer_only and{h.curbuf}or h.buflist)local _={}for k,w in ipairs(v)do local a0={}local a1=vim.api.nvim_buf_get_name(w)if vim.api.nvim_buf_is_loaded(w)then a0=vim.api.nvim_buf_get_lines(w,0,-1,false)elseif vim.fn.filereadable(a1)~=0 then a0=vim.fn.readfile(a1,"")end;local L=b.basename(a1)local N,O;if n.file_icons then local P=b.tail(L)local Q=b.extension(P)N,O=f.get_devicon(P,Q)if n.color_icons then N=c.ansi_codes[O](N)end end;if not L or#L==0 then L=c.nvim_buf_get_name(w)end;for a2,a3 in ipairs(a0)do table.insert(_,("[%s]%s%s%s%s:%s: %s"):format(c.ansi_codes.yellow(tostring(w)),c.nbsp,N or"",N and c.nbsp or"",c.ansi_codes.magenta(L),c.ansi_codes.green(tostring(a2)),a3))end end;if n.search and#n.search>0 then n.fzf_opts["--query"]=vim.fn.shellescape(n.search)end;n=a.set_fzf_field_index(n,3,n._is_skim and"{}"or"{..-2}")a.fzf_exec(_,n)end;g.tabs=function(n)n=d.normalize_opts(n,d.globals.tabs)if not n then return end;n.fn_pre_fzf=i;n._list_bufs=function()local a4={}for a5,a6 in ipairs(vim.api.nvim_list_tabpages())do for k,q in ipairs(vim.api.nvim_tabpage_list_wins(a6))do local l=vim.api.nvim_win_get_buf(q)if h.bufmap[l]then n._tab_to_buf[a5]=n._tab_to_buf[a5]or{}n._tab_to_buf[a5][l]=a6;table.insert(a4,l)end end end;return a4 end;local W=function(X)n._tab_to_buf={}local Y,r=m(n,n._list_bufs)if not next(Y)then return end;for l,k in pairs(r)do for k,s in pairs(n._tab_to_buf)do s[l]=nil end end;for a6,s in pairs(n._tab_to_buf)do local a7=vim.fn.getcwd(-1,a6)local a8=function(T,a9,aa)local O=aa;local ab=a9 and a9(n[T])or n[T]if type(n[T])=="table"then if type(n[T][1])=="function"then ab=n[T][1](a6,a6==h.curtabidx)elseif type(n[T][1])=="string"then ab=a9(n[T][1])else ab=a9("Tab")end;if type(n[T][2])=="string"then O=function(ac)return c.ansi_from_hl(n[T][2],ac)end end elseif type(n[T])=="function"then ab=n[T](a6,a6==h.curtabidx)end;return ab,O end;local ad,ae=a8("tab_title",function(ac)return string.format("%s%s#%d%s",ac,c.nbsp,a6,vim.loop.cwd()==a7 and""or string.format(": %s",b.HOME_to_tilde(a7)))end,c.ansi_codes.blue)local af,ag=a8("tab_marker",function(ac)return ac end,function(ac)return c.ansi_codes.blue(c.ansi_codes.bold(ac))end)X(string.format("%d)%s%s\t%s",a6,c.nbsp,ae(ad),a6==h.curtabidx and ag(af)or""))local ah={}for l,k in pairs(s)do table.insert(ah,l)end;n.sort_lastused=false;n._prefix=("%d)%s%s%s"):format(a6,c.nbsp,c.nbsp,c.nbsp)local u=vim.api.nvim_list_tabpages()[a6]local v=t(n,ah,u)for k,Z in pairs(v)do X(B(n,Z,false,a7))end end;X(nil)end;n=S(n)n=a.set_fzf_field_index(n,3,"{}")a.fzf_exec(W,n)end;return g
