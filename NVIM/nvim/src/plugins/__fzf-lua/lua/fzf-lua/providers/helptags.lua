local a=require"fzf-lua.path"local b=require"fzf-lua.core"local c=require"fzf-lua.utils"local d=require"fzf-lua.config"local e={}local f=function(g)local h={}h.lang=d.globals.helptags.lang or vim.o.helplang;h.fallback=c._if(d.globals.helptags.fallback~=nil,d.globals.helptags.fallback,true)local i=vim.split(h.lang,",",true)if h.fallback and not vim.tbl_contains(i,"en")then table.insert(i,"en")end;local j={}for k,l in ipairs(i)do j[l]=true end;local m={}local function n(l,o)if j[l]then if m[l]then table.insert(m[l],o)else m[l]={o}end end end;local p={}local q=vim.fn.globpath(vim.o.runtimepath,"doc/*",1,1)for k,r in ipairs(q)do local o=a.tail(r)if o=="tags"then n("en",r)elseif o:match("^tags%-..$")then local l=o:sub(-2)n(l,r)else p[o]=r end end;local s=function(t,u,v)local w=("%s %s"):format(c.ansi_codes.magenta(t.name),t.filename)u(w,function()coroutine.resume(v)end)end;coroutine.wrap(function()local v=coroutine.running()local x={}local y=string.char(9)for k,l in ipairs(i)do for k,o in ipairs(m[l]or{})do local z=vim.split(c.read_file(o),"\n",true)for k,A in ipairs(z)do if not A:match"^!_TAG_"then local B=vim.split(A,y,true)if#B==3 and not x[B[1]]then s({name=B[1],filename=p[B[2]],cmd=B[3],lang=l},g,v)x[B[1]]=true;coroutine.yield()end end end end end;g(nil)end)()end;e.helptags=function(h)h=d.normalize_opts(h,d.globals.helptags)if not h then return end;h.fzf_opts["--no-multi"]=""b.fzf_exec(f,h)end;return e
