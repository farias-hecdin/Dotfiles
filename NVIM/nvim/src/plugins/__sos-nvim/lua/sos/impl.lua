local a={}local b=vim.api;a.saveable_cmds=setmetatable({["!"]=true,lua=true,luafile=true,make=true,runtime=true,source=true},{__index=function(c,d)return vim.startswith(d,"Plenary")end})a.saveable_cmdline=vim.regex[=[system\|systemlist\|:lua\|[Jj][Oo][Bb]]=]local e=vim.regex[[\%(^$\)\|\%(^\%(acwrite\|help\|nofile\|nowrite\|quickfix\|terminal\|prompt\)$\)]]local function f(g)local h=vim.bo[g].bt;if not e:match_str(h)then vim.notify_once(string.format([[[sos.nvim]: unknown buftype: "%s"]],h),vim.log.levels.WARN)return false end;return h==""or h=="acwrite"end;local i={cmd="write",mods={silent=true}}local function j()b.nvim_cmd(i,{output=false})end;local function k(g)b.nvim_buf_call(g,j)end;function a.write_buf_if_needed(g)if vim.bo[g].mod and not vim.bo[g].ro and b.nvim_buf_is_loaded(g)and f(g)then local l=b.nvim_buf_get_name(g)if l==""then return end;local h=vim.bo[g].bt;if h=="acwrite"then k(g)elseif h==""then local m,n,o=vim.loop.fs_stat(l)if m then if m.type=="file"then k(g)end else k(g)end end end end;function a.should_observe_buf(g)return f(g)and vim.bo[g].ma and not vim.bo[g].ro end;function a.on_timer()for p,g in ipairs(b.nvim_list_bufs())do a.write_buf_if_needed(g)end end;return a
