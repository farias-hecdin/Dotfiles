local a=require("cmp")local b=require("vim.lsp.util")local c={}local d={use_show_condition=true,show_autosnippets=false}local function e(f)f.option=vim.tbl_deep_extend('keep',f.option,d)vim.validate({use_show_condition={f.option.use_show_condition,'boolean'},show_autosnippets={f.option.show_autosnippets,'boolean'}})end;local g={}local h={}c.clear_cache=function()g={}h={}end;c.refresh=function()local i=require("luasnip.session").latest_load_ft;g[i]=nil;h[i]=nil end;local function j(k,l)local m=(k.name or"").." _ `["..l.filetype.."]`\n"local n={"","```"..vim.bo.filetype,k:get_docstring(),"```"}local o={m.."---",k.dscr or"",n}o=b.convert_input_to_markdown_lines(o)o=table.concat(o,"\n")h[l.filetype]=h[l.filetype]or{}h[l.filetype][l.snip_id]=o;return o end;c.new=function()return setmetatable({},{__index=c})end;c.get_keyword_pattern=function()return"\\%([^[:alnum:][:blank:]]\\|\\w\\+\\)"end;function c:is_available()local p,q=pcall(require,"luasnip")return p end;function c:get_debug_name()return"luasnip"end;function c:complete(f,r)e(f)local s=require("luasnip.util.util").get_snippet_filetypes()local t={}for u=1,#s do local i=s[u]if not g[i]then local v={}local w=require("luasnip").get_snippets(i,{type="snippets"})local x;if f.option.show_autosnippets then local y=require('luasnip').get_snippets(i,{type="autosnippets"})x={{w,false},{y,true}}else x={{w,false}}end;for q,z in ipairs(x)do local A,B=unpack(z)for C,k in pairs(A)do if not k.hidden then v[#v+1]={word=k.trigger,label=k.trigger,kind=a.lsp.CompletionItemKind.Snippet,data={filetype=i,snip_id=k.id,show_condition=k.show_condition,auto=B}}end end end;g[i]=v end;vim.list_extend(t,g[i])end;if f.option.use_show_condition then local D=f.context.cursor_before_line;t=vim.tbl_filter(function(u)return not u.data.show_condition or u.data.show_condition(D)end,t)end;r(t)end;function c:resolve(E,r)local F=E.data.snip_id;local k=require("luasnip").get_id_snippet(F)local G=h[E.data.filetype]or{}G=G[E.data.snip_id]or j(k,E.data)E.documentation={kind=a.lsp.MarkupKind.Markdown,value=G}r(E)end;function c:execute(E,r)local k=require("luasnip").get_id_snippet(E.data.snip_id)if k.regTrig then k=k:get_pattern_expand_helper()end;local H=vim.api.nvim_win_get_cursor(0)H[1]=H[1]-1;require("luasnip").snip_expand(k,{clear_region={from={H[1],H[2]-#E.word},to=H}})r(E)end;return c
