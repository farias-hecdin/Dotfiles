local a=require("which-key.keys")local b=require("which-key.config")local c=require("which-key.layout")local d=require("which-key.util")local e=vim.api.nvim_buf_add_highlight;local f={}f.keys=""f.mode="n"f.reg=nil;f.auto=false;f.count=0;f.buf=nil;f.win=nil;f.is_visual_multi_mode=nil;function f.is_valid()return f.buf and f.win and vim.api.nvim_buf_is_valid(f.buf)and vim.api.nvim_buf_is_loaded(f.buf)and vim.api.nvim_win_is_valid(f.win)end;function f.show()f.is_visual_multi_mod=vim.b.visual_multi;if f.is_valid()then return end;local g={relative="editor",width=vim.o.columns-b.options.window.margin[2]-b.options.window.margin[4]-(vim.fn.has("nvim-0.6")==0 and b.options.window.border~="none"and 2 or 0),height=b.options.layout.height.min,focusable=false,anchor="SW",border=b.options.window.border,row=vim.o.lines-b.options.window.margin[3]-(vim.fn.has("nvim-0.6")==0 and b.options.window.border~="none"and 2 or 0)-vim.o.cmdheight,col=b.options.window.margin[2],style="minimal",noautocmd=true}if b.options.window.position=="top"then g.anchor="NW"g.row=b.options.window.margin[1]end;f.buf=vim.api.nvim_create_buf(false,true)f.win=vim.api.nvim_open_win(f.buf,false,g)vim.api.nvim_buf_set_option(f.buf,"filetype","WhichKey")vim.api.nvim_buf_set_option(f.buf,"buftype","nofile")vim.api.nvim_buf_set_option(f.buf,"bufhidden","wipe")local h="NormalFloat:WhichKeyFloat"if vim.fn.hlexists("FloatBorder")==1 then h=h..",FloatBorder:WhichKeyBorder"end;vim.api.nvim_win_set_option(f.win,"winhighlight",h)vim.api.nvim_win_set_option(f.win,"foldmethod","manual")vim.api.nvim_win_set_option(f.win,"winblend",b.options.window.winblend)end;function f.read_pending()local i=""while true do local j=vim.fn.getchar(0)if j==0 then break end;local k=type(j)=="number"and vim.fn.nr2char(j)or j;if k==d.t("<esc>")then i=i..k;if#i>10 then return end else if i~=""then f.keys=f.keys..i;i=""end;f.keys=f.keys..k end end;if i~=""then f.keys=f.keys..i;i=""end end;function f.getchar()local l,j=pcall(vim.fn.getchar)if not l then return d.t("<esc>")end;local k=type(j)=="number"and vim.fn.nr2char(j)or j;return k end;function f.scroll(m)local n=vim.api.nvim_win_get_height(f.win)local o=vim.api.nvim_win_get_cursor(f.win)if m then o[1]=math.max(o[1]-n,1)else o[1]=math.min(o[1]+n,vim.api.nvim_buf_line_count(f.buf))end;vim.api.nvim_win_set_cursor(f.win,o)end;function f.on_close()f.hide()end;function f.hide()vim.api.nvim_echo({{""}},false,{})f.hide_cursor()if f.buf and vim.api.nvim_buf_is_valid(f.buf)then vim.api.nvim_buf_delete(f.buf,{force=true})f.buf=nil end;if f.win and vim.api.nvim_win_is_valid(f.win)then vim.api.nvim_win_close(f.win,true)f.win=nil end;if f.is_visual_multi_mod then f.is_visual_multi_mod=false;vim.cmd([[normal \\gS]])end;vim.cmd("redraw")end;function f.show_cursor()local p=vim.api.nvim_get_current_buf()local o=vim.api.nvim_win_get_cursor(0)vim.api.nvim_buf_add_highlight(p,b.namespace,"Cursor",o[1]-1,o[2],o[2]+1)end;function f.hide_cursor()local p=vim.api.nvim_get_current_buf()vim.api.nvim_buf_clear_namespace(p,b.namespace,0,-1)end;function f.back()local q=a.get_tree(f.mode,f.buf).tree:get(f.keys,-1)or a.get_tree(f.mode).tree:get(f.keys,-1)if q then f.keys=q.prefix_i end end;function f.has_cmd(r)for s,q in pairs(r)do if q.mapping and q.mapping.cmd then return true end end;return false end;function f.execute(t,u,p)local v=a.get_tree(u).tree:get(t)local w=p and a.get_tree(u,p).tree:get(t)or nil;if v and v.mapping and a.is_hook(t,v.mapping.cmd)then return end;if w and w.mapping and a.is_hook(t,w.mapping.cmd)then return end;local x={}local function y(z,A)for s,q in pairs(z)do if a.is_hooked(q.mapping.prefix,u,A)then table.insert(x,{q.mapping.prefix,A})a.hook_del(q.mapping.prefix,u,A)end end end;y(a.get_tree(u).tree:path(t))if p then y(a.get_tree(u,p).tree:path(t),p)end;local B=d.get_mode()if B=="nii"or B=="nir"or B=="niv"or B=="vs"then vim.api.nvim_feedkeys(d.t("<C-O>"),"n",false)end;if f.reg~='"'and f.mode~="i"and f.mode~="c"then vim.api.nvim_feedkeys('"'..f.reg,"n",false)end;if f.count and f.count~=0 then t=f.count..t end;vim.api.nvim_feedkeys(t,"m",true)vim.defer_fn(function()for s,C in pairs(x)do a.hook_add(C[1],u,C[2])end end,0)end;function f.open(D,g)g=g or{}f.keys=D or""f.mode=g.mode or d.get_mode()f.count=vim.api.nvim_get_vvar("count")f.reg=vim.api.nvim_get_vvar("register")if string.find(vim.o.clipboard,"unnamedplus")and f.reg=="+"then f.reg='"'end;if string.find(vim.o.clipboard,"unnamed")and f.reg=="*"then f.reg='"'end;f.show_cursor()f.on_keys(g)end;function f.is_enabled(p)local E=vim.api.nvim_buf_get_option(p,"buftype")for s,F in ipairs(b.options.disable.buftypes)do if F==E then return false end end;local G=vim.api.nvim_buf_get_option(p,"filetype")for s,F in ipairs(b.options.disable.filetypes)do if F==G then return false end end;return true end;function f.on_keys(g)local p=vim.api.nvim_get_current_buf()while true do f.read_pending()local H=a.get_mappings(f.mode,f.keys,p)if H.mapping and not H.mapping.group and#H.mappings==0 then f.hide()if H.mapping.fn then H.mapping.fn()else f.execute(f.keys,f.mode,p)end;return end;if#H.mappings==0 then f.hide()if g.auto then f.execute(f.keys,f.mode,p)end;return end;local I=c:new(H)if f.is_enabled(p)then if not f.is_valid()then f.show()end;f.render(I:layout(f.win))end;vim.cmd([[redraw]])local k=f.getchar()if k==d.t("<esc>")then f.hide()break elseif k==d.t(b.options.popup_mappings.scroll_down)then f.scroll(false)elseif k==d.t(b.options.popup_mappings.scroll_up)then f.scroll(true)elseif k==d.t("<bs>")then f.back()else f.keys=f.keys..k end end end;function f.render(J)vim.api.nvim_buf_set_lines(f.buf,0,-1,false,J.lines)local n=#J.lines;if n>b.options.layout.height.max then n=b.options.layout.height.max end;vim.api.nvim_win_set_height(f.win,n)if vim.api.nvim_buf_is_valid(f.buf)then vim.api.nvim_buf_clear_namespace(f.buf,b.namespace,0,-1)end;for s,K in ipairs(J.hl)do e(f.buf,b.namespace,K.group,K.line,K.from,K.to)end end;return f
