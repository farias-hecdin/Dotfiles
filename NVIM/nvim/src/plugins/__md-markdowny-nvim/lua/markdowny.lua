local a={}local function b(c,d)local e=c:sub(d,d+1)local f=vim.fn.strdisplaywidth(e)return#e~=f end;local function g(h,i)vim.api.nvim_buf_set_mark(0,'>',h,i,{})end;local function j(k,l,m,n)local o=vim.api.nvim_buf_get_lines(0,k[1]-1,k[1],true)[1]local p=k[1]==l[1]if p then local q=o:sub(k[2]+1,k[2]+#m)==m;local r=o:sub(l[2]+2-#n,l[2]+1)==n;local s=q and r;local t=l[2]+1;if b(o,l[2]+1)then t=t+1 end;local u=string.sub(o,1,k[2])local v=string.sub(o,k[2]+1,t)local w=string.sub(o,t+1)if s then local x=string.sub(v,1+#m,-1-#n)o=u..x..w else o=u..m..v..n..w end;vim.api.nvim_buf_set_lines(0,k[1]-1,k[1],true,{o})g(l[1],l[2]+#n+#m)else local y=vim.api.nvim_buf_get_lines(0,l[1]-1,l[1],true)[1]local q=o:sub(k[2]+1,k[2]+#m)==m;local r=y:sub(l[2]+2-#n,l[2]+1)==n;local s=q and r;local t=l[2]+1;if b(y,l[2])then t=t+1 end;local z=string.sub(y,1,t)local A=string.sub(y,t+1)local B=string.sub(o,1,k[2])local C=string.sub(o,k[2]+1)if s then o=B..C:sub(1+#m)y=z:sub(1,-1-#n)..A else o=B..m..C;y=z..n..A end;vim.api.nvim_buf_set_lines(0,k[1]-1,k[1],true,{o})vim.api.nvim_buf_set_lines(0,l[1]-1,l[1],true,{y})g(l[1],l[2]+#n)end end;local function D(m,n)return function()local k=vim.api.nvim_buf_get_mark(0,'<')local l=vim.api.nvim_buf_get_mark(0,'>')if vim.fn.visualmode()=='V'then local E=vim.api.nvim_buf_get_lines(0,l[1]-1,l[1],true)[1]l[2]=#E-1 end;j(k,l,m,n)end end;a.bold=D('**','**')a.italic=D('_','_')function a.link()local k=vim.api.nvim_buf_get_mark(0,'<')local l=vim.api.nvim_buf_get_mark(0,'>')vim.ui.input({prompt='Href:'},function(F)if F==nil then return end;j(k,l,'[',']('..F..')')end)end;function a.setup(G)G=G or{}vim.api.nvim_create_autocmd('FileType',{desc='markdowny.nvim keymaps',pattern=G.filetypes or'markdown',callback=function()vim.keymap.set('v','<C-b>',":lua require('markdowny').bold()<cr>",{buffer=0})vim.keymap.set('v','<C-i>',":lua require('markdowny').italic()<cr>",{buffer=0})vim.keymap.set('v','<C-k>',":lua require('markdowny').link()<cr>",{buffer=0})end})end;return a
