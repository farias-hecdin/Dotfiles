local a={m_bAllMemoryRefFileAddTime=true,m_bSingleMemoryRefFileAddTime=true,m_bComparedMemoryRefFileAddTime=true}local function b()local c=os.date("*t")local d=string.format("%04d%02d%02d-%02d%02d%02d",tostring(c.year),tostring(c.month),tostring(c.day),tostring(c.hour),tostring(c.min),tostring(c.sec))return d end;local function e(f)if not f then return""end;local g=getmetatable(f)if not g then return tostring(f)end;local h=""local j=rawget(g,"__tostring")if j then rawset(g,"__tostring",nil)h=tostring(f)rawset(g,"__tostring",j)else h=tostring(f)end;return h end;local function k()local l={}local m={}setmetatable(m,{__mode="k"})local n={}setmetatable(n,{__mode="k"})l.m_cObjectReferenceCount=m;l.m_cObjectAddressToName=n;l.m_nStackLevel=-1;l.m_strShortSrc="None"l.m_nCurrentLine=-1;return l end;local function o(p)local l=k()l.m_strShortSrc=p;local q=l.m_cObjectReferenceCount;local r=l.m_cObjectAddressToName;local s=assert(io.open(p,"rb"))for t in s:lines()do local u=string.sub(t,1,2)if"--"~=u then local v,v,w,h,x=string.find(t,"(.+)\t(.*)\t(%d+)")if w then q[w]=x;r[w]=h end end end;io.close(s)s=nil;return l end;local function y(z,f)local l={}local A={}setmetatable(A,{__mode="k"})local B={}local C={}setmetatable(C,{__mode="k"})l.m_cObjectExistTag=A;l.m_cObjectAliasName=B;l.m_cObjectAccessTag=C;l.m_nStackLevel=-1;l.m_strShortSrc="None"l.m_nCurrentLine=-1;l.m_strObjectName=z;l.m_strAddressName="string"==type(f)and"\""..tostring(f).."\""or e(f)l.m_cObjectExistTag[f]=true;return l end;local function D(h,f,E)if not f then return end;if not h then h=""end;if not E then E=k()end;if E.m_nStackLevel>0 then local F=debug.getinfo(E.m_nStackLevel,"Sl")if F then E.m_strShortSrc=F.short_src;E.m_nCurrentLine=F.currentline end;E.m_nStackLevel=-1 end;local G=E.m_cObjectReferenceCount;local H=E.m_cObjectAddressToName;local I=type(f)if"table"==I then if rawget(f,"__cname")then if"string"==type(f.__cname)then h=h.."[class:"..f.__cname.."]"end elseif rawget(f,"class")then if"string"==type(f.class)then h=h.."[class:"..f.class.."]"end elseif rawget(f,"_className")then if"string"==type(f._className)then h=h.."[class:"..f._className.."]"end end;if f==_G then h=h.."[_G]"end;local J=false;local K=false;local g=getmetatable(f)if g then local L=rawget(g,"__mode")if L then if"k"==L then J=true elseif"v"==L then K=true elseif"kv"==L then J=true;K=true end end end;G[f]=G[f]and G[f]+1 or 1;if H[f]then return end;H[f]=h;for M,N in pairs(f)do local O=type(M)if"table"==O then if not J then D(h..".[table:key.table]",M,E)end;if not K then D(h..".[table:value]",N,E)end elseif"function"==O then if not J then D(h..".[table:key.function]",M,E)end;if not K then D(h..".[table:value]",N,E)end elseif"thread"==O then if not J then D(h..".[table:key.thread]",M,E)end;if not K then D(h..".[table:value]",N,E)end elseif"userdata"==O then if not J then D(h..".[table:key.userdata]",M,E)end;if not K then D(h..".[table:value]",N,E)end else D(h.."."..M,N,E)end end;if g then D(h..".[metatable]",g,E)end elseif"function"==I then local P=debug.getinfo(f,"Su")G[f]=G[f]and G[f]+1 or 1;if H[f]then return end;H[f]=h.."[line:"..tostring(P.linedefined).."@file:"..P.short_src.."]"local Q=P.nups;for i=1,Q do local R,S=debug.getupvalue(f,i)local T=type(S)if"table"==T then D(h..".[ups:table:"..R.."]",S,E)elseif"function"==T then D(h..".[ups:function:"..R.."]",S,E)elseif"thread"==T then D(h..".[ups:thread:"..R.."]",S,E)elseif"userdata"==T then D(h..".[ups:userdata:"..R.."]",S,E)end end;local U=debug.getfenv;if U then local V=U(f)if V then D(h..".[function:environment]",V,E)end end elseif"thread"==I then G[f]=G[f]and G[f]+1 or 1;if H[f]then return end;H[f]=h;local U=debug.getfenv;if U then local V=U(f)if V then D(h..".[thread:environment]",V,E)end end;local g=getmetatable(f)if g then D(h..".[thread:metatable]",g,E)end elseif"userdata"==I then G[f]=G[f]and G[f]+1 or 1;if H[f]then return end;H[f]=h;local U=debug.getfenv;if U then local V=U(f)if V then D(h..".[userdata:environment]",V,E)end end;local g=getmetatable(f)if g then D(h..".[userdata:metatable]",g,E)end elseif"string"==I then G[f]=G[f]and G[f]+1 or 1;if H[f]then return end;H[f]=h.."["..I.."]"else end end;local function W(h,f,E)if not f then return end;if not h then h=""end;if not E then E=k()end;if E.m_nStackLevel>0 then local F=debug.getinfo(E.m_nStackLevel,"Sl")if F then E.m_strShortSrc=F.short_src;E.m_nCurrentLine=F.currentline end;E.m_nStackLevel=-1 end;local X=E.m_cObjectExistTag;local Y=E.m_cObjectAliasName;local Z=E.m_cObjectAccessTag;local I=type(f)if"table"==I then if rawget(f,"__cname")then if"string"==type(f.__cname)then h=h.."[class:"..f.__cname.."]"end elseif rawget(f,"class")then if"string"==type(f.class)then h=h.."[class:"..f.class.."]"end elseif rawget(f,"_className")then if"string"==type(f._className)then h=h.."[class:"..f._className.."]"end end;if f==_G then h=h.."[_G]"end;local J=false;local K=false;local g=getmetatable(f)if g then local L=rawget(g,"__mode")if L then if"k"==L then J=true elseif"v"==L then K=true elseif"kv"==L then J=true;K=true end end end;if X[f]and not Y[h]then Y[h]=true end;if Z[f]then return end;Z[f]=true;for M,N in pairs(f)do local O=type(M)if"table"==O then if not J then W(h..".[table:key.table]",M,E)end;if not K then W(h..".[table:value]",N,E)end elseif"function"==O then if not J then W(h..".[table:key.function]",M,E)end;if not K then W(h..".[table:value]",N,E)end elseif"thread"==O then if not J then W(h..".[table:key.thread]",M,E)end;if not K then W(h..".[table:value]",N,E)end elseif"userdata"==O then if not J then W(h..".[table:key.userdata]",M,E)end;if not K then W(h..".[table:value]",N,E)end else W(h.."."..M,N,E)end end;if g then W(h..".[metatable]",g,E)end elseif"function"==I then local P=debug.getinfo(f,"Su")local _=h.."[line:"..tostring(P.linedefined).."@file:"..P.short_src.."]"if X[f]and not Y[_]then Y[_]=true end;if Z[f]then return end;Z[f]=true;local Q=P.nups;for i=1,Q do local R,S=debug.getupvalue(f,i)local T=type(S)if"table"==T then W(h..".[ups:table:"..R.."]",S,E)elseif"function"==T then W(h..".[ups:function:"..R.."]",S,E)elseif"thread"==T then W(h..".[ups:thread:"..R.."]",S,E)elseif"userdata"==T then W(h..".[ups:userdata:"..R.."]",S,E)end end;local U=debug.getfenv;if U then local V=U(f)if V then W(h..".[function:environment]",V,E)end end elseif"thread"==I then if X[f]and not Y[h]then Y[h]=true end;if Z[f]then return end;Z[f]=true;local U=debug.getfenv;if U then local V=U(f)if V then W(h..".[thread:environment]",V,E)end end;local g=getmetatable(f)if g then W(h..".[thread:metatable]",g,E)end elseif"userdata"==I then if X[f]and not Y[h]then Y[h]=true end;if Z[f]then return end;Z[f]=true;local U=debug.getfenv;if U then local V=U(f)if V then W(h..".[userdata:environment]",V,E)end end;local g=getmetatable(f)if g then W(h..".[userdata:metatable]",g,E)end elseif"string"==I then if X[f]and not Y[h]then Y[h]=true end;if Z[f]then return end;Z[f]=true else end end;local function a0(a1,a2,a3,a4,a5,a6,a7)if not a7 then return end;local d=b()local a8=a6 and a6.m_cObjectReferenceCount or nil;local a9=a6 and a6.m_cObjectAddressToName or nil;local q=a7.m_cObjectReferenceCount;local r=a7.m_cObjectAddressToName;local aa={}local ab=0;for M in pairs(q)do ab=ab+1;aa[ab]=M end;table.sort(aa,function(ac,ad)return q[ac]>q[ad]end)local ae=a1 and string.len(a1)>0;local af=nil;local ag=print;if ae then local ah=string.sub(a1,-1)if"/"~=ah and"\\"~=ah then a1=a1 .."/"end;local ai=a1 .."LuaMemRefInfo-All"if not a2 or 0==string.len(a2)then if a6 then if a.m_bComparedMemoryRefFileAddTime then ai=ai.."-["..d.."].txt"else ai=ai..".txt"end else if a.m_bAllMemoryRefFileAddTime then ai=ai.."-["..d.."].txt"else ai=ai..".txt"end end else if a6 then if a.m_bComparedMemoryRefFileAddTime then ai=ai.."-["..d.."]-["..a2 .."].txt"else ai=ai.."-["..a2 .."].txt"end else if a.m_bAllMemoryRefFileAddTime then ai=ai.."-["..d.."]-["..a2 .."].txt"else ai=ai.."-["..a2 .."].txt"end end end;local s=assert(io.open(ai,"w"))af=s;ag=s.write end;local aj=function(ak)if af then ag(af,ak)else ag(ak)end end;if a6 then aj("--------------------------------------------------------\n")aj("-- This is compared memory information.\n")aj("--------------------------------------------------------\n")aj("-- Collect base memory reference at line:"..tostring(a6.m_nCurrentLine).."@file:"..a6.m_strShortSrc.."\n")aj("-- Collect compared memory reference at line:"..tostring(a7.m_nCurrentLine).."@file:"..a7.m_strShortSrc.."\n")else aj("--------------------------------------------------------\n")aj("-- Collect memory reference at line:"..tostring(a7.m_nCurrentLine).."@file:"..a7.m_strShortSrc.."\n")end;aj("--------------------------------------------------------\n")aj("-- [Table/Function/String Address/Name]\t[Reference Path]\t[Reference Count]\n")aj("--------------------------------------------------------\n")if a4 and a5 then if"string"==type(a5)then aj("-- From Root Object: \""..tostring(a5).."\" ("..a4 ..")\n")else aj("-- From Root Object: "..e(a5).." ("..a4 ..")\n")end end;for i,N in ipairs(aa)do if not a6 or not a8[N]then if a3>0 then if i<=a3 then if"string"==type(N)then local al=tostring(N)local am,an=string.find(al,"string: \".*\"")if not a6 and(nil==am or nil==an)then local ao=string.gsub(al,"([\n\r])","\\n")aj("string: \""..ao.."\"\t"..r[N].."\t"..tostring(q[N]).."\n")else aj(tostring(N).."\t"..r[N].."\t"..tostring(q[N]).."\n")end else aj(e(N).."\t"..r[N].."\t"..tostring(q[N]).."\n")end end else if"string"==type(N)then local al=tostring(N)local am,an=string.find(al,"string: \".*\"")if not a6 and(nil==am or nil==an)then local ao=string.gsub(al,"([\n\r])","\\n")aj("string: \""..ao.."\"\t"..r[N].."\t"..tostring(q[N]).."\n")else aj(tostring(N).."\t"..r[N].."\t"..tostring(q[N]).."\n")end else aj(e(N).."\t"..r[N].."\t"..tostring(q[N]).."\n")end end end end;if ae then io.close(af)af=nil end end;local function ap(a1,a2,a3,a7)if not a7 then return end;local d=b()local B=a7.m_cObjectAliasName;local ae=a1 and string.len(a1)>0;local af=nil;local ag=print;if ae then local ah=string.sub(a1,-1)if"/"~=ah and"\\"~=ah then a1=a1 .."/"end;local ai=a1 .."LuaMemRefInfo-Single"if not a2 or 0==string.len(a2)then if a.m_bSingleMemoryRefFileAddTime then ai=ai.."-["..d.."].txt"else ai=ai..".txt"end else if a.m_bSingleMemoryRefFileAddTime then ai=ai.."-["..d.."]-["..a2 .."].txt"else ai=ai.."-["..a2 .."].txt"end end;local s=assert(io.open(ai,"w"))af=s;ag=s.write end;local aj=function(ak)if af then ag(af,ak)else ag(ak)end end;aj("--------------------------------------------------------\n")aj("-- Collect single object memory reference at line:"..tostring(a7.m_nCurrentLine).."@file:"..a7.m_strShortSrc.."\n")aj("--------------------------------------------------------\n")local aq=0;for M in pairs(B)do aq=aq+1 end;aj("-- For Object: "..a7.m_strAddressName.." ("..a7.m_strObjectName.."), have "..tostring(aq).." reference in total.\n")aj("--------------------------------------------------------\n")for M in pairs(B)do if a3>0 then if i<=a3 then aj(M.."\n")end else aj(M.."\n")end end;if ae then io.close(af)af=nil end end;local function ar(p,as,at,ae)if not p or 0==string.len(p)then print("You need to specify a file path.")return end;if not as or 0==string.len(as)then print("You need to specify a filter string.")return end;local au={}local av=assert(io.open(p,"rb"))for t in av:lines()do local aw,ax=string.find(t,as)if aw and ax then if at then aw,ax=string.find(t,"[\r\n]")if aw and ax and string.len(t)==ax then table.insert(au,string.sub(t,1,aw-1))else table.insert(au,t)end end else if not at then aw,ax=string.find(t,"[\r\n]")if aw and ax and string.len(t)==ax then table.insert(au,string.sub(t,1,aw-1))else table.insert(au,t)end end end end;io.close(av)av=nil;local af=nil;local ag=print;if ae then local v,v,ay=string.find(p,"(.*)%.txt")ay=ay.."-Filter-"..(at and"I"or"E").."-["..as.."].txt"local s=assert(io.open(ay,"w"))af=s;ag=s.write end;local aj=function(ak)if af then ag(af,ak)else ag(ak)end end;for i,N in ipairs(au)do aj(N.."\n")end;if ae then io.close(af)af=nil end end;local function az(a1,a2,a3,a4,a5)local d=b()if a5 then if not a4 or 0==string.len(a4)then a4=tostring(a5)end else a5=debug.getregistry()a4="registry"end;local E=k()local F=debug.getinfo(2,"Sl")if F then E.m_strShortSrc=F.short_src;E.m_nCurrentLine=F.currentline end;D(a4,a5,E)a0(a1,a2,a3,a4,a5,nil,E)end;local function aA(a1,a2,a3,aB,aC)a0(a1,a2,a3,nil,nil,aB,aC)end;local function aD(a1,a2,a3,aE,aF)local aB=o(aE)local aC=o(aF)a0(a1,a2,a3,nil,nil,aB,aC)end;local function aG(a1,a2,a3,z,f)if not f then return end;if not z or 0==string.len(z)then z=e(f)end;local d=b()local E=y(z,f)local F=debug.getinfo(2,"Sl")if F then E.m_strShortSrc=F.short_src;E.m_nCurrentLine=F.currentline end;W("registry",debug.getregistry(),E)ap(a1,a2,a3,E)end;local aH={m_cConfig=nil,m_cMethods={},m_cHelpers={},m_cBases={}}aH.m_cConfig=a;aH.m_cMethods.DumpMemorySnapshot=az;aH.m_cMethods.DumpMemorySnapshotCompared=aA;aH.m_cMethods.DumpMemorySnapshotComparedFile=aD;aH.m_cMethods.DumpMemorySnapshotSingleObject=aG;aH.m_cHelpers.FormatDateTimeNow=b;aH.m_cHelpers.GetOriginalToStringResult=e;aH.m_cBases.CreateObjectReferenceInfoContainer=k;aH.m_cBases.CreateObjectReferenceInfoContainerFromFile=o;aH.m_cBases.CreateSingleObjectReferenceInfoContainer=y;aH.m_cBases.CollectObjectReferenceInMemory=D;aH.m_cBases.CollectSingleObjectReferenceInMemory=W;aH.m_cBases.OutputMemorySnapshot=a0;aH.m_cBases.OutputMemorySnapshotSingleObject=ap;aH.m_cBases.OutputFilteredResult=ar;return aH
