local a=require("plenary.path").path;local b={}b.strdisplaywidth=(function()local c=function(d,e)d=tostring(d)if vim.in_fast_event()then return#d-(e or 0)end;return vim.fn.strdisplaywidth(d,e)end;if jit and a.sep~=[[\]]then local f=require"ffi"f.cdef[[
      typedef unsigned char char_u;
      int linetabsize_col(int startcol, char_u *s);
    ]]local g=function(d,e)d=tostring(d)local h=e or 0;local i=f.new("char[?]",#d+1)f.copy(i,d)return f.C.linetabsize_col(h,i)-h end;local j=pcall(g,"hello")if j then return g else return c end else return c end end)()b.strcharpart=(function()local c=function(d,k,l)if vim.in_fast_event()then return d:sub(k+1,l)end;return vim.fn.strcharpart(d,k,l)end;if jit and a.sep~=[[\]]then local f=require"ffi"f.cdef[[
      typedef unsigned char char_u;
      int utf_ptr2len(const char_u *const p);
    ]]local function m(d)local n=f.new("char[?]",#d+1)f.copy(n,d)return f.C.utf_ptr2len(n)end;local j=pcall(m,"ðŸ”­")if not j then return c end;return function(d,k,l)local o=0;if k>0 then while k>0 and o<#d do o=o+m(d:sub(o+1))k=k-1 end else o=k end;local p=0;if l then while l>0 and o+p<#d do local q=o+p;if q<0 then p=p+1 else p=p+m(d:sub(q+1))end;l=l-1 end else p=#d-o end;if o<0 then p=p+o;o=0 elseif o>#d then o=#d end;if p<0 then p=0 elseif o+p>#d then p=#d-o end;return d:sub(o+1,o+p)end else return c end end)()local r=function(d,p,s,t)if b.strdisplaywidth(d)<=p then return d end;local u=t>0 and 0 or d:len()local v=0;local w=""local x=b.strdisplaywidth(s)local y=function(z,A,B)if B>0 then return z..A else return A..z end end;while true do local C=b.strcharpart(d,u,1)v=v+b.strdisplaywidth(C)if v+x>p then w=y(w,s,t)break end;w=y(w,C,t)u=u+t end;return w end;b.truncate=function(d,p,s,t)d=tostring(d)s=s or"â€¦"t=t or 1;if t~=0 then return r(d,p,s,t)else if b.strdisplaywidth(d)<=p then return d end;local D=math.floor((p+b.strdisplaywidth(s))/2)local E=r(d,D,s,1)local F=p-b.strdisplaywidth(E)+b.strdisplaywidth(s)local G=r(d,F,s,-1)return E..G:sub(s:len()+1)end end;b.align_str=function(H,I,J)local K=b.strdisplaywidth(H)return J and H.rep(" ",I-K)..H or H..H.rep(" ",I-K)end;b.dedent=function(d,L)local M;local N={}for O in d:gmatch"[^\n]*\n?"do if O~=""then local P,I;local Q=O:match"^[ \t]+"if Q then P=#Q;I=b.strdisplaywidth(Q)if not M or I<M then M=I end elseif O~="\n"then M=0 end;table.insert(N,{line=O,chars=P,width=I})end end;L=L or 0;local w={}for R,S in ipairs(N)do local O;if S.chars then local T=S.line:sub(S.chars+1)local U=S.width-M+L;O=(" "):rep(U)..T elseif S.line=="\n"then O="\n"else O=(" "):rep(L)..S.line end;table.insert(w,O)end;return table.concat(w)end;return b
