local a=require"plenary.window.border"local b=require"plenary.tbl"_AssociatedBufs={}local c=function(d)vim.cmd(string.format("autocmd WinLeave,BufLeave,BufDelete <buffer=%s> ++once ++nested lua require('plenary.window.float').clear(%s)",d,d))end;local e={}e.default_options={winblend=15,percentage=0.9}function e.default_opts(f)f=b.apply_defaults(f,e.default_options)local g=math.floor(vim.o.columns*f.percentage)local h=math.floor(vim.o.lines*f.percentage)local i=math.floor((vim.o.lines-h)/2-1)local j=math.floor((vim.o.columns-g)/2)local k={relative="editor",row=i,col=j,width=g,height=h,style="minimal"}return k end;function e.centered(f)f=b.apply_defaults(f,e.default_options)local l=e.default_opts(f)local d=f.bufnr or vim.api.nvim_create_buf(false,true)local m=vim.api.nvim_open_win(d,true,l)vim.cmd"setlocal nocursorcolumn"vim.api.nvim_win_set_option(m,"winblend",f.winblend)vim.cmd(string.format("autocmd WinLeave <buffer> silent! execute 'bdelete! %s'",d))return{bufnr=d,win_id=m}end;function e.centered_with_top_win(n,f)f=b.apply_defaults(f,e.default_options)table.insert(n,1,string.rep("=",80))table.insert(n,string.rep("=",80))local o=e.default_opts(nil,nil,f)local p=vim.deepcopy(o)o.height=o.height-#n-1;o.row=o.row+#n+1;p.height=#n;local q=vim.api.nvim_create_buf(false,true)local r=vim.api.nvim_open_win(q,true,p)vim.cmd"setlocal nocursorcolumn"vim.api.nvim_win_set_option(r,"winblend",f.winblend)vim.api.nvim_buf_set_lines(q,0,-1,false,n)local s=vim.api.nvim_create_buf(false,true)local t=vim.api.nvim_open_win(s,true,o)vim.cmd"setlocal nocursorcolumn"vim.api.nvim_win_set_option(t,"winblend",f.winblend)local u=a:new(s,t,o,{})local v=a:new(q,r,p,{})_AssociatedBufs[s]={t,r,u.win_id,v.win_id}c(s)return{bufnr=s,win_id=t,minor_bufnr=q,minor_win_id=r}end;function e.percentage_range_window(w,x,l,y)l=b.apply_defaults(l,e.default_options)local z=e.default_opts(l)z.relative="editor"local A,B;if type(x)=="number"then assert(x<=1)assert(x>0)A=x;B=(1-A)/2 elseif type(x)=="table"then A=x[2]-x[1]B=x[1]else error(string.format("Invalid type for 'row_range': %p",x))end;z.height=math.ceil(vim.o.lines*A)z.row=math.ceil(vim.o.lines*B)local C,D;if type(w)=="number"then assert(w<=1)assert(w>0)C=w;D=(1-C)/2 elseif type(w)=="table"then C=w[2]-w[1]D=w[1]else error(string.format("Invalid type for 'col_range': %p",w))end;z.col=math.floor(vim.o.columns*D)z.width=math.floor(vim.o.columns*C)local d=l.bufnr or vim.api.nvim_create_buf(false,true)local m=vim.api.nvim_open_win(d,true,z)vim.api.nvim_win_set_buf(m,d)vim.cmd"setlocal nocursorcolumn"vim.api.nvim_win_set_option(m,"winblend",l.winblend)local E=a:new(d,m,z,y or{})_AssociatedBufs[d]={m,E.win_id}c(d)return{bufnr=d,win_id=m,border_bufnr=E.bufnr,border_win_id=E.win_id}end;function e.clear(d)if _AssociatedBufs[d]==nil then return end;for F,m in ipairs(_AssociatedBufs[d])do if vim.api.nvim_win_is_valid(m)then vim.api.nvim_win_close(m,true)end end;_AssociatedBufs[d]=nil end;return e
