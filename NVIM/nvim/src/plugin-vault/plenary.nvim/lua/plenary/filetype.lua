local a=require"plenary.path"local b=a.path.sep;local c={}local d={extension={},file_name={},shebang={}}c.add_table=function(e)local f={"extension","file_name","shebang"}local g={}for h,i in pairs(e)do g[h]=true end;for i,h in ipairs(f)do g[h]=nil end;for h,j in pairs(g)do error(debug.traceback("Invalid key / value:"..tostring(h).." / "..tostring(j)))end;if e.extension then d.extension=vim.tbl_extend("force",d.extension,e.extension)end;if e.file_name then d.file_name=vim.tbl_extend("force",d.file_name,e.file_name)end;if e.shebang then d.shebang=vim.tbl_extend("force",d.shebang,e.shebang)end end;c.add_file=function(k)local l=vim.api.nvim_get_runtime_file(string.format("data/plenary/filetypes/%s.lua",k),true)for i,m in ipairs(l)do local n,o=pcall(c.add_table,dofile(m))if not n then error("Unable to add file "..m..":\n"..o)end end end;local p="[^"..b.."].*"c._get_extension_parts=function(k)local q=k:match(p)local r={}while q do q=q:match"[^.]%.(.*)"if q then table.insert(r,q:lower())else return r end end;return r end;c._parse_modeline=function(s)if s:find"vim:"then return s:match".*:ft=([^: ]*):.*$"or""end;return""end;c._parse_shebang=function(t)if t:sub(1,2)=="#!"then local u=d.shebang[t:sub(3,#t)]if u then return u end end;return""end;local v=false;local w=function()if not v then if vim.in_fast_event()then return end;local x=vim.fn.getcompletion("","filetype")for i,j in ipairs(x)do if not d.extension[j]then d.extension[j]=j end end;v=true;return true end end;c.detect_from_extension=function(y)local z=c._get_extension_parts(y)for i,A in ipairs(z)do local u=A and d.extension[A]if u then return u end end;if w()then for i,A in ipairs(z)do local u=A and d.extension[A]if u then return u end end end;return""end;c.detect_from_name=function(y)if y then y=y:lower()local B=vim.split(y,b,true)local C=B[#B]local u=d.file_name[C]if u then return u end end;return""end;c.detect_from_modeline=function(y)local s=a:new(y):readbyterange(-256,256)if not s then return""end;local D=vim.split(s,"\n")local E=D[#D]~=""and#D or#D-1;if E>=1 then return c._parse_modeline(D[E])end end;c.detect_from_shebang=function(y)local t=a:new(y):readbyterange(0,256)if not t then return""end;local D=vim.split(t,"\n")return c._parse_shebang(D[1])end;c.detect=function(y,F)F=F or{}F.fs_access=F.fs_access or true;if type(y)~=string then y=tostring(y)end;local u=c.detect_from_name(y)if u~=""then return u end;u=c.detect_from_extension(y)if F.fs_access and a:new(y):exists()then if u==""then u=c.detect_from_shebang(y)if u~=""then return u end end;if u=="text"or u==""then u=c.detect_from_modeline(y)if u~=""then return u end end end;return u end;c.add_file"base"c.add_file"builtin"return c
