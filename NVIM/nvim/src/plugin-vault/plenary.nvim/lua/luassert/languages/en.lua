local a=require('say')a:set_namespace('en')a:set("assertion.same.positive","Expected objects to be the same.\nPassed in:\n%s\nExpected:\n%s")a:set("assertion.same.negative","Expected objects to not be the same.\nPassed in:\n%s\nDid not expect:\n%s")a:set("assertion.equals.positive","Expected objects to be equal.\nPassed in:\n%s\nExpected:\n%s")a:set("assertion.equals.negative","Expected objects to not be equal.\nPassed in:\n%s\nDid not expect:\n%s")a:set("assertion.near.positive","Expected values to be near.\nPassed in:\n%s\nExpected:\n%s +/- %s")a:set("assertion.near.negative","Expected values to not be near.\nPassed in:\n%s\nDid not expect:\n%s +/- %s")a:set("assertion.matches.positive","Expected strings to match.\nPassed in:\n%s\nExpected:\n%s")a:set("assertion.matches.negative","Expected strings not to match.\nPassed in:\n%s\nDid not expect:\n%s")a:set("assertion.unique.positive","Expected object to be unique:\n%s")a:set("assertion.unique.negative","Expected object to not be unique:\n%s")a:set("assertion.error.positive","Expected a different error.\nCaught:\n%s\nExpected:\n%s")a:set("assertion.error.negative","Expected no error, but caught:\n%s")a:set("assertion.truthy.positive","Expected to be truthy, but value was:\n%s")a:set("assertion.truthy.negative","Expected to not be truthy, but value was:\n%s")a:set("assertion.falsy.positive","Expected to be falsy, but value was:\n%s")a:set("assertion.falsy.negative","Expected to not be falsy, but value was:\n%s")a:set("assertion.called.positive","Expected to be called %s time(s), but was called %s time(s)")a:set("assertion.called.negative","Expected not to be called exactly %s time(s), but it was.")a:set("assertion.called_at_least.positive","Expected to be called at least %s time(s), but was called %s time(s)")a:set("assertion.called_at_most.positive","Expected to be called at most %s time(s), but was called %s time(s)")a:set("assertion.called_more_than.positive","Expected to be called more than %s time(s), but was called %s time(s)")a:set("assertion.called_less_than.positive","Expected to be called less than %s time(s), but was called %s time(s)")a:set("assertion.called_with.positive","Function was never called with matching arguments.\nCalled with (last call if any):\n%s\nExpected:\n%s")a:set("assertion.called_with.negative","Function was called with matching arguments at least once.\nCalled with (last matching call):\n%s\nDid not expect:\n%s")a:set("assertion.returned_with.positive","Function never returned matching arguments.\nReturned (last call if any):\n%s\nExpected:\n%s")a:set("assertion.returned_with.negative","Function returned matching arguments at least once.\nReturned (last matching call):\n%s\nDid not expect:\n%s")a:set("assertion.returned_arguments.positive","Expected to be called with %s argument(s), but was called with %s")a:set("assertion.returned_arguments.negative","Expected not to be called with %s argument(s), but was called with %s")a:set("assertion.internal.argtolittle","the '%s' function requires a minimum of %s arguments, got: %s")a:set("assertion.internal.badargtype","bad argument #%s to '%s' (%s expected, got %s)")
