local a=require('luassert.assert')local b=require('luassert.match')local c=require('luassert.util')local d,e;do local f,g=pcall(require,'term')d=io.type(io.stdout)=='file'and f and g.isatty(io.stdout)if not d then local h=package.config:sub(1,1)=='\\'if h and os.getenv("ANSICON")then d=true end end;e=setmetatable({none=function(i)return i end},{__index=function(self,j)return function(i)for k in j:gmatch("[^%.]+")do i=g.colors[k](i)end;return i end end})end;local function l(m)if type(m)=="string"then return string.format("(string) '%s'",m)end end;local function n(m)if type(m)~="number"then return tostring(m)end;if m~=m then return"NaN"elseif m==1/0 then return"Inf"elseif m==-1/0 then return"-Inf"end;local o=string.format("%.20g",m)if math.type and math.type(m)=="float"and not o:find("[%.,]")then o=o:gsub("%d+","%0.0",1)end;return o end;local function p(m)if type(m)=="number"then return string.format("(number) %s",n(m))end end;local function q(m)if type(m)=="boolean"then return string.format("(boolean) %s",tostring(m))end end;local function r(m)if type(m)=="nil"then return"(nil)"end end;local s={number=1,boolean=2,string=3,table=4,["function"]=5,userdata=6,thread=7}local function t(j,u)return type(j)=="number"and 1<=j and j<=u and math.floor(j)==j end;local function v(w)local x={}local y=0;for j in pairs(w)do y=y+1;x[y]=j end;local u=#w;local function z(A,B)local C,D=type(A),type(B)local E=t(A,u)and 0 or s[C]or 8;local F=t(B,u)and 0 or s[D]or 8;if E==F then if C=="string"or C=="number"then return A<B elseif C=="boolean"then return A end else return E<F end end;table.sort(x,z)return x,y end;local function G(m,H)if type(m)~="table"then return end;local I=a:get_parameter("TableFormatLevel")local J=a:get_parameter("TableFormatShowRecursion")local K=a:get_parameter("TableErrorHighlightCharacter")or""local L=a:get_parameter("TableErrorHighlightColor")local M=H and H.crumbs or{}local N={}local O;if getmetatable(m)==nil then O="("..tostring(m)..") "elseif not pcall(setmetatable,m,getmetatable(m))then O="(table) "else local P=getmetatable(m)setmetatable(m,nil)O="("..tostring(m)..") "setmetatable(m,P)end;local function Q(w,R,S)if J and N[w]and N[w]>0 then return"{ ... recursive }"end;if next(w)==nil then return"{ }"end;if R>I and I>=0 then return"{ ... more }"end;local T="{"local x,y=v(w)N[w]=(N[w]or 0)+1;local U=M[#M-R+1]for V=1,y do local W=x[V]local X=w[W]local Y=S and W==U;if type(X)=="table"then X=Q(X,R+1,Y)elseif type(X)=="string"then X="'"..X.."'"end;local Z=Y and K or""local _=string.rep(" ",R*2-Z:len())local a0=Z:len()==0 and""or e[L](Z)T=T..string.format("\n%s%s[%s] = %s",_,a0,n(W),n(X))end;N[w]=N[w]-1;return T.." }"end;return O..Q(m,1,true)end;local function a1(m)if type(m)=="function"then local a2=debug.getinfo(m)return string.format("%s @ line %s in %s",tostring(m),tostring(a2.linedefined),tostring(a2.source))end end;local function a3(m)if type(m)=="userdata"then return string.format("(userdata) '%s'",tostring(m))end end;local function a4(m)if type(m)=="thread"then return string.format("(thread) '%s'",tostring(m))end end;local function a5(m)if not b.is_matcher(m)then return end;local a6={[true]="is.",[false]="no."}local a7={}for a8=1,m.arguments.n do table.insert(a7,a:format({m.arguments[a8],n=1})[1])end;return string.format("(matcher) %s%s(%s)",a6[m.mod],tostring(m.name),table.concat(a7,", "))end;local function a9(aa)if not c.is_arglist(aa)then return end;local ab={}for a8=1,aa.n do table.insert(ab,a:format({aa[a8],n=1})[1])end;return"(values list) ("..table.concat(ab,", ")..")"end;a:add_formatter(l)a:add_formatter(p)a:add_formatter(q)a:add_formatter(r)a:add_formatter(G)a:add_formatter(a1)a:add_formatter(a3)a:add_formatter(a4)a:add_formatter(a5)a:add_formatter(a9)a:set_parameter("TableFormatLevel",3)a:set_parameter("TableFormatShowRecursion",false)a:set_parameter("TableErrorHighlightCharacter","*")a:set_parameter("TableErrorHighlightColor",d and"red"or"none")
