local a=vim.api;local b=require'ts_context_commentstring.utils'local c=require'ts_context_commentstring.config'local d={}function d.setup_buffer(e)if not b.is_treesitter_active(e)then return end;a.nvim_buf_set_var(e,'ts_original_commentstring',a.nvim_buf_get_option(e,'commentstring'))local f=c.is_autocmd_enabled()if vim.g.loaded_commentary==1 then require('ts_context_commentstring.integrations.vim_commentary').set_up_maps(c.config.commentary_integration)end;if f then local g=a.nvim_create_augroup('context_commentstring_ft',{clear=true})a.nvim_create_autocmd('CursorHold',{buffer=e,group=g,desc='Change the commentstring on cursor hold using Treesitter',callback=function()require('ts_context_commentstring').update_commentstring()end})end end;function d.calculate_commentstring(h)h=h or{}local i=h.key or'__default'local j=h.location or nil;local k,l=b.get_node_at_cursor_start_of_line(vim.tbl_keys(c.get_languages_config()),j)if not k and not l then return nil end;local m=c.config.custom_calculation;if m then local n=m(k,l)if n then return n end end;local o=l:lang()local p=c.get_languages_config()[o]return d.check_node(k,p,i)end;function d.update_commentstring(h)local q=d.calculate_commentstring(h)if q then a.nvim_buf_set_option(0,'commentstring',q)else local r=vim.b.ts_original_commentstring;if r then a.nvim_buf_set_option(0,'commentstring',vim.b.ts_original_commentstring)end end end;function d.check_node(k,p,s)s=s or'__default'if not p then return nil end;if not k then return p[s]or p.__default or p end;local t=k:type()local u=p[t]if u then return u[s]or u.__default or u end;return d.check_node(k:parent(),p,s)end;function d.attach()vim.deprecate('context_commentstring nvim-treesitter module',"require('ts_context_commentstring').setup {} and set vim.g.skip_ts_context_commentstring_module = true to speed up loading",'in the future (see https://github.com/JoosepAlviste/nvim-ts-context-commentstring/issues/82 for more info)','ts_context_commentstring')c.update(require('nvim-treesitter.configs').get_module'context_commentstring')end;function d.detach()end;_G.context_commentstring={}function _G.context_commentstring.update_commentstring_and_run(v)d.update_commentstring()return a.nvim_replace_termcodes('<Plug>'..v,true,true,true)end;return d
