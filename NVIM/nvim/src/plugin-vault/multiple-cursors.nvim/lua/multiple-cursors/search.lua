local a={}local b=require("multiple-cursors.virtual_cursors")local c=true;local d=nil;local e=nil;function a.setup(f)c=f end;function a.save_previous_visual_area()d=vim.api.nvim_buf_get_mark(0,"<")e=vim.api.nvim_buf_get_mark(0,">")end;function a.get_matches_and_move_cursor(g)local h=vim.fn.getcurpos()b.set_ignore_cursor_movement(true)if d then vim.fn.cursor({d[1],d[2]+1,0,d[2]+1})elseif c then local i=vim.fn.line("w0")vim.fn.cursor({i,1,0,1})else vim.fn.cursor({1,1,0,1})end;local j={}local k=true;local l=vim.fn.line("w$")while true do local m={0,0}if k then m=vim.fn.searchpos(g,"cW")k=false else m=vim.fn.searchpos(g,"W")end;if m[1]==0 or m[2]==0 then break end;if d then if m[1]>e[1]or m[1]==e[1]and m[2]>e[2]+1 then break end elseif c then if m[1]>l then break end end;table.insert(j,m)end;d=nil;e=nil;if#j<=1 then vim.fn.cursor({h[2],h[3],h[4],h[5]})b.set_ignore_cursor_movement(false)return nil end;for n=1,#j do local m=j[n]if m[1]==h[2]then if h[3]>=m[2]and h[3]<m[2]+#g or h[3]<m[2]then vim.fn.cursor({m[1],m[2],0,m[2]})table.remove(j,n)break end end end;b.set_ignore_cursor_movement(false)return j end;return a
