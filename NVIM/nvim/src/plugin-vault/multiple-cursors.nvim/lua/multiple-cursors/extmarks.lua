local a={}local b="Cursor"local c="Visual"local d=require("multiple-cursors.common")local e=nil;local f=0;local g=nil;local h=nil;local i=nil;function a.setup()e=vim.api.nvim_create_namespace("multiple-cursors")end;function a.clear()vim.api.nvim_buf_clear_namespace(0,e,0,-1)end;local function j(k,l,m,n,o)local p={}if m~=0 then p.id=m end;local q=d.get_length_of_line(k)if q==0 or l>q then l=q+1;p.virt_text={{" ",n}}p.virt_text_pos="overlay"else p.end_col=l;p.hl_group=n end;if o~=0 then p.priority=o end;return vim.api.nvim_buf_set_extmark(0,e,k-1,l-1,p)end;function a.save_cursor()local r=vim.fn.getcurpos()g=r[2]local l=r[3]f=j(g,l,f,"",0)end;function a.restore_cursor()if f~=nil and g~=nil then local s=vim.api.nvim_buf_get_extmark_by_id(0,e,f,{})vim.api.nvim_buf_del_extmark(0,e,f)if next(s)~=nil then vim.fn.cursor({s[1]+1,s[2]+1,0,s[2]+1})else vim.fn.cursor({g,1,0,1})end;f=nil;g=nil end end;local function t(u)if u.editable then u.mark_id=j(u.lnum,u.col,u.mark_id,b,9999)else u.mark_id=j(u.lnum,u.col,u.mark_id,"",9999)end end;local function v(m,w,x,y,z)if w>y then if m>0 then vim.api.nvim_buf_del_extmark(0,e,m)end;return 0 else local p={}if m>0 then p.id=m end;if w~=y then p.end_row=y-1 end;p.end_col=z-1;p.hl_group=c;p.priority=9998;return vim.api.nvim_buf_set_extmark(0,e,w-1,x-1,p)end end;local function A(B,C)for D=1,#C do local p={}p.virt_text={{" ",c}}p.virt_text_pos="overlay"p.priority=9998;if#B>=D then p.id=B[D]end;local E=vim.api.nvim_buf_set_extmark(0,e,C[D]-1,0,p)if#B>=D then B[D]=E else table.insert(B,E)end end;for D=#B,1,-1 do if D<=#C then return end;vim.api.nvim_buf_del_extmark(0,e,B[D])table.remove(B,D)end end;local function F(u)if u.visual_start_mark_id~=0 then vim.api.nvim_buf_del_extmark(0,e,u.visual_start_mark_id)u.visual_start_mark_id=0 end;if u.visual_multiline_mark_id~=0 then vim.api.nvim_buf_del_extmark(0,e,u.visual_multiline_mark_id)u.visual_multiline_mark_id=0 end;if next(u.visual_empty_line_mark_ids)~=nil then for D=1,#u.visual_empty_line_mark_ids do vim.api.nvim_buf_del_extmark(0,e,u.visual_empty_line_mark_ids[D])end;u.visual_empty_line_mark_ids={}end end;local function G(u)local w=u.visual_start_lnum;local x=u.visual_start_col;local y=u.lnum;local z=u.col;if not u:is_visual_area_forward()then w=u.lnum;x=u.col;y=u.visual_start_lnum;z=vim.fn.min({u.visual_start_col+1,d.get_max_col(y)})end;return w,x,y,z end;local function H(w,x,y,z)local C={}for k=w,y do if d.get_length_of_line(k)==0 then table.insert(C,k)if w==k then w=k+1;x=1 end end end;return w,x,C end;local function I(u)if not u:is_visual_area_valid()or u.visual_start_lnum==u.lnum and u.visual_start_col==u.col then F(u)return end;u.visual_start_mark_id=j(u.visual_start_lnum,u.visual_start_col,u.visual_start_mark_id,"",0)local w,x,y,z=G(u)local w,x,C=H(w,x,y,z)u.visual_multiline_mark_id=v(u.visual_multiline_mark_id,w,x,y,z)A(u.visual_empty_line_mark_ids,C)end;function a.delete_virtual_cursor_extmarks(u)if u.mark_id~=0 then vim.api.nvim_buf_del_extmark(0,e,u.mark_id)u.mark_id=0 end;F(u)end;function a.update_virtual_cursor_extmarks(u)if u.within_buffer then t(u)I(u)else a.delete_virtual_cursor_extmarks(u)end end;function a.update_virtual_cursor_position(u)if u.mark_id~=0 then local s=vim.api.nvim_buf_get_extmark_by_id(0,e,u.mark_id,{})if next(s)~=nil then u.lnum=s[1]+1;u.col=s[2]+1;if u.curswant<vim.v.maxcol and u.col<d.get_max_col(u.lnum)then u.curswant=u.col end else u.delete=true end end;if u.delete then return end;if u.visual_start_mark_id~=0 then local s=vim.api.nvim_buf_get_extmark_by_id(0,e,u.visual_start_mark_id,{})if next(s)~=nil then u.visual_start_lnum=s[1]+1;u.visual_start_col=s[2]+1 else u.delete=true end end end;function a.save_visual_area()local J=d.get_visual_area()h=j(J[1],J[2],h,"",0)i=j(J[3],J[4],i,"",0)end;function a.restore_visual_area()if h~=nil and i~=nil then local K=vim.api.nvim_buf_get_extmark_by_id(0,e,h,{})local L=vim.api.nvim_buf_get_extmark_by_id(0,e,i,{})vim.api.nvim_buf_del_extmark(0,e,h)vim.api.nvim_buf_del_extmark(0,e,i)h=nil;i=nil;if next(K)~=nil and next(L)~=nil then vim.cmd("normal!:")vim.api.nvim_buf_set_mark(0,"<",K[1]+1,K[2],{})vim.api.nvim_buf_set_mark(0,">",L[1]+1,L[2],{})vim.cmd("normal! gv")end end end;return a
