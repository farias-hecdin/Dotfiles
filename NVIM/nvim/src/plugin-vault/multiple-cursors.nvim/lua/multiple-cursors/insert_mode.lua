local a={}local b=require("multiple-cursors.common")local c=require("multiple-cursors.virtual_cursors")local d=nil;local function e(f)if b.is_mode("R")then if f.col==b.get_length_of_line(f.lnum)then vim.cmd("normal! \"_x")f:set_cursor_position()elseif f.col<b.get_length_of_line(f.lnum)then vim.cmd("normal! \"_x")end end end;local function g(h,i)local j=vim.fn.match(vim.fn.getline(h),"\\S")if j<0 then return true else return i<=j+1 end end;function a.escape()c.visit_with_cursor(function(f)if f.col~=1 then b.normal_bang(nil,0,"h",nil)f:save_cursor_position()end end)end;function a.insert_char_pre(k)d=vim.v.char end;function a.text_changed_i(k)if d then c.edit_with_cursor(function(f)e(f)vim.api.nvim_put({d},"c",false,true)f:save_cursor_position()end)d=nil end end;local function l(h,i)local m=vim.fn.getline(h)local n=string.sub(m,i-1,i-1)return n end;local function o(h,i)return l(h,i)==" "end;local function p(h,i)return l(h,i)=="\t"end;local function q(h,i)local r=vim.opt.shiftwidth._value;if not g(h,i)then if vim.opt.softtabstop._value==0 then return 1 else r=vim.opt.softtabstop._value end end;local s=0;while i>=1 and o(h,i)do s=s+1;i=i-1;if(i-1)%r==0 then break end end;return s end;local function t(f)if f.col==1 then if f.lnum~=1 then if b.get_length_of_line(f.lnum)==0 then vim.cmd("normal! dd")f.lnum=f.lnum-1;f.col=b.get_max_col(f.lnum)f.curswant=vim.v.maxcol else vim.cmd("normal! k$gJ")f:save_cursor_position()end end else local s=vim.fn.max({1,q(f.lnum,f.col)})for u=1,s do vim.cmd("normal! \"_X")end;f.col=f.col-s;f.curswant=f.col end end;local function v(f)if f.col==1 and f.lnum~=1 then f.lnum=f.lnum-1;f.col=b.get_max_col(f.lnum)f.curswant=f.col;return end;local s=vim.fn.max({1,q(f.lnum,f.col)})f.col=f.col-s;f.curswant=f.col end;local function w()if b.is_mode("R")then c.edit_with_cursor(function(f)v(f)end)else c.edit_with_cursor(function(f)t(f)end)end end;function a.bs()b.feedkeys(nil,0,"<BS>",nil)w()end;local function x(f)if f.col==b.get_max_col(f.lnum)then vim.cmd("normal! gJ")else vim.cmd("normal! \"_x")end end;local function y()c.edit_with_cursor(function(f)x(f)end)end;function a.del()b.feedkeys(nil,0,"<Del>",nil)y()end;function a.virtual_cursor_carriage_return(f)if f.col<=b.get_length_of_line(f.lnum)then vim.api.nvim_put({"",""},"c",false,true)vim.cmd("normal! ==^")f:save_cursor_position()else vim.api.nvim_put({"","x"},"c",false,true)vim.cmd("normal! ==^\"_x")f:save_cursor_position()f.col=b.get_col(f.lnum,f.col+1)f.curswant=f.col end end;function a.all_virtual_cursors_carriage_return()c.edit_with_cursor(function(f)a.virtual_cursor_carriage_return(f)end)end;function a.cr()b.feedkeys(nil,0,"<CR>",nil)a.all_virtual_cursors_carriage_return()end;local function z(r,i)return r-(i-1)%r end;local function A(d,B)for u=1,B do vim.api.nvim_put({d},"c",false,true)end end;local function C(f)local D=vim.opt.expandtab._value;local E=vim.opt.tabstop._value;local F=vim.opt.softtabstop._value;local G=vim.opt.shiftwidth._value;if D then if g(f.lnum,f.col)then A(" ",z(G,f.col))else if F==0 then A(" ",z(E,f.col))else A(" ",z(F,f.col))end end else return end;f:save_cursor_position()end;local function H()c.edit_with_cursor(function(f)e(f)C(f)end)end;function a.tab()b.feedkeys(nil,0,"<Tab>",nil)H()end;return a
