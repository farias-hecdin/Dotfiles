local a={}local b=require("multiple-cursors.common")local c=require("multiple-cursors.virtual_cursors")local function d(e)e=vim.fn.max({e,1})local f=vim.fn.getcurpos()[2]return vim.fn.min({e,f-1})end;local function g(h,e)h.lnum=h.lnum-e;if h.lnum<1 then h.within_buffer=false elseif h.lnum<=vim.fn.line("$")then h.within_buffer=true;h.col=b.get_col(h.lnum,h.curswant)end end;local function i(e)e=d(e)c.visit_all(function(h)g(h,e)end)end;function a.normal_k()b.feedkeys(nil,vim.v.count,"k",nil)i(vim.v.count)end;function a.insert_up()b.feedkeys(nil,0,"<Up>",nil)i(0)end;local function j(e)e=vim.fn.max({e,1})local f=vim.fn.getcurpos()[2]local k=vim.fn.line("$")return vim.fn.min({e,k-f})end;local function l(h,e)h.lnum=h.lnum+e;if h.lnum>vim.fn.line("$")then h.within_buffer=false elseif h.lnum>=1 then h.within_buffer=true;h.col=b.get_col(h.lnum,h.curswant)end end;local function m(e)e=j(e)c.visit_all(function(h)l(h,e)end)end;function a.normal_j()b.feedkeys(nil,vim.v.count,"j",nil)m(vim.v.count)end;function a.insert_down()b.feedkeys(nil,0,"<Down>",nil)m(0)end;local function n(h,e)while e>0 do if h.col>e then h.col=h.col-e;h.curswant=h.col;return end;if h.lnum==1 then h.col=1;h.curswant=h.col;return end;e=e-h.col;h.lnum=h.lnum-1;h.col=b.get_max_col(h.lnum)end;h.curswant=h.col end;local function o(e)e=vim.fn.max({e,1})c.visit_in_buffer(function(h)n(h,e)end)end;function a.normal_bs()b.feedkeys(nil,vim.v.count,"<BS>",nil)o(vim.v.count)end;function a.normal_minus()b.feedkeys(nil,vim.v.count,"-",nil)i(vim.v.count)c.move_with_normal_command(0,"^")end;function a.normal_plus()b.feedkeys(nil,vim.v.count,"+",nil)m(vim.v.count)c.move_with_normal_command(0,"^")end;function a.normal_underscore()if vim.v.count<=1 then b.feedkeys(nil,vim.v.count,"_",nil)c.move_with_normal_command(vim.v.count,"_")else b.feedkeys(nil,vim.v.count,"_",nil)m(vim.v.count-1)c.move_with_normal_command(0,"^")end end;return a
