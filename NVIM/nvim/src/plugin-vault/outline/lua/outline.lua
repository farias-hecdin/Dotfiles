local a=vim.api;local b=vim.api.nvim_create_autocmd;local c=a.nvim_list_uis()[1]local d=require("plenary.popup")require'split'local e={}local f=0;function e.setup(g)e.main_win=nil;e.main_buf=nil;e.main_win_width=50;e.main_win_height=20;e.main_win_style="minimal"e.main_win_relavent="win"e.main_win_border='double'e.main_col=c.width/2-e.main_win_width/2;e.main_row=c.height/2-e.main_win_height/2;e.preview_win=nil;e.preview_buf=nil;e.preview_win_width=c.width/2;e.preview_win_height=c.height/2;e.preview_win_style="minimal"e.preview_win_relavent="win"e.preview_win_border='double'e.preview_col=e.main_win_width/2-e.preview_win_width/2;e.preview_row=e.main_win_height/2-e.preview_win_height/2;e.custom_keys={}end;function e.open()e.back_win=a.nvim_get_current_win()if not e.main_buf and not e.main_win then local h=math.floor(vim.o.lines/2-(f+1)/2)if h<3 then h=3 end;e.main_buf=a.nvim_create_buf(false,true)local i={"─","│","─","│","╭","╮","╯","╰"}local j,k=d.create(e.main_buf,{title="Outline - Buffers",highlight="OutlineWindow",line=h,minwidth=e.main_win_width,minheight=f,borderchars=i})e.main_win=j;e.build_win()e.setKeys(e.back_win,e.main_buf)e.add_custom_keys()else xpcall(function()a.nvim_win_close(e.main_win,false)a.nvim_buf_delete(e.main_buf,{})e.main_win=nil;e.main_buf=nil end,function()e.main_win=nil;e.main_buf=nil;e.open()end)end end;function e.add_custom_keys()for l,m in pairs(e.custom_keys)do a.nvim_buf_set_keymap(e.main_buf,'n',m.key,string.format([[:<C-U>lua require'outline'.set_saved_buffer(%s,%s)<CR>]],e.back_win,tonumber(m.buffer)),{nowait=true,noremap=true,silent=true})end end;function e.set_saved_buffer(k,n)a.nvim_win_set_buf(k,tonumber(n))e.close()end;function e.openPreview(n)e.preview_buf=a.nvim_create_buf(false,true)e.preview_win_width=math.floor(e.preview_win_width)e.preview_win_height=math.floor(e.preview_win_height)local o=a.nvim_win_get_cursor(e.main_win)o[1]=o[1]-1;local p=a.nvim_buf_get_lines(n,o[1],-1,false)[1]local q=tonumber(p:split(" ")[1])e.preview_buf=q;local r=e.preview_win_width;local s=e.preview_win_height;local i={"─","│","─","│","╭","╮","╯","╰"}local j,k=d.create(e.preview_buf,{title="Outline - Buffers (preview)",highlight="OutlineWindow",line=math.floor((vim.o.lines-s)/2-1),col=math.floor((vim.o.columns-r)/2),maxwidth=r,maxheight=s,borderchars=i,minheight=s,minwidth=r})e.preview_win=j;a.nvim_buf_set_option(e.preview_buf,'modifiable',false)e.setPreviewKeys(e.preview_buf)end;function e.setPreviewKeys(n)a.nvim_buf_set_keymap(0,'n','q',':lua require"outline".close_preview()<CR>',{nowait=true,noremap=true,silent=true})end;function e.close_preview()a.nvim_win_close(e.preview_win,false)a.nvim_buf_delete(e.preview_buf,{})e.preview_win=nil;e.preview_buf=nil;a.nvim_set_current_win(e.main_win)end;function e.close()if e.main_win then a.nvim_win_close(e.main_win,false)a.nvim_buf_delete(e.main_buf,{})e.main_win=nil;e.main_buf=nil;if e.preview_buf~=nil then e.close_preview()end end end;function e.setKeys(k,n)a.nvim_buf_set_keymap(n,'n','<CR>',string.format([[:<C-U>lua require'outline'.set_buffer(%s,%s, 'window', vim.v.count)<CR>]],k,n),{nowait=true,noremap=true,silent=true})a.nvim_buf_set_keymap(n,'n','s',string.format([[:<C-U>lua require'outline'.set_buffer(%s,%s, 'hsplit', vim.v.count)<CR>]],k,n),{nowait=true,noremap=true,silent=true})a.nvim_buf_set_keymap(n,'n','v',string.format([[:<C-U>lua require'outline'.set_buffer(%s,%s, 'vsplit', vim.v.count)<CR>]],k,n),{nowait=true,noremap=true,silent=true})a.nvim_buf_set_keymap(n,'n','P',string.format([[:<C-U>lua require'outline'.openPreview(%s)<CR>]],n),{nowait=true,noremap=true,silent=true})a.nvim_buf_set_keymap(n,'n','D',string.format([[:<C-U>lua require'outline'.close_buffer(%s)<CR>]],n),{nowait=true,noremap=true,silent=true})a.nvim_buf_set_keymap(n,'n','B',string.format([[:<C-U>lua require'outline'.open_input_window(%s)<CR>]],n),{nowait=true,noremap=true,silent=true})a.nvim_buf_set_keymap(n,'n','q',':lua require"outline".close()<CR>',{nowait=true,noremap=true,silent=true})a.nvim_buf_set_keymap(n,'n','<Esc>',':lua require"outline".close()<CR>',{nowait=true,noremap=true,silent=true})a.nvim_buf_set_keymap(n,'n','<Tab>','j',{nowait=true,noremap=true,silent=true})a.nvim_buf_set_keymap(n,'n','<S-Tab>','k',{nowait=true,noremap=true,silent=true})end;function e.build_win()a.nvim_buf_set_option(e.main_buf,"modifiable",true)e.list_buffers()a.nvim_buf_set_option(e.main_buf,"modifiable",false)end;function e.list_buffers()local t=a.nvim_list_bufs()local u={}table.sort(t)local v=a.nvim_get_current_buf()for w,q in ipairs(t)do if a.nvim_buf_is_loaded(q)then local x=a.nvim_buf_get_name(q)if x==""or nil then goto y end;local z=a.nvim_buf_get_option(q,'modified')local A=a.nvim_buf_get_number(q)local B=""if A==v then B=""end;local C=z and'﨣'or''local D=e.main_win_width-#x-20;local E=string.len(x)if E>D then x="..."..string.sub(x,1-D)end;for F,G in pairs(e.custom_keys)do if G.buffer==A then x=string.format("%s %s",G.key.." ",x)end end;u[#u+1]=string.format("%s %s %s %s",A,x,B,C)::y::end end;if#u~=0 then a.nvim_buf_set_lines(e.main_buf,0,#u,false,u)end;if#u>vim.o.lines-8 then f=vim.o.lines-8 else f=#u end end;function e.set_buffer(k,n,g)local o=a.nvim_win_get_cursor(e.main_win)o[1]=o[1]-1;local p=a.nvim_buf_get_lines(n,o[1],-1,false)[1]local q=tonumber(p:split(" ")[1])if g=='window'then a.nvim_win_set_buf(k,tonumber(q))elseif g=='hsplit'then a.nvim_command('vsplit')a.nvim_win_set_buf(a.nvim_get_current_win(),q)elseif g=='vsplit'then a.nvim_command('split')a.nvim_win_set_buf(a.nvim_get_current_win(),q)end;e.close()end;function e.close_buffer(n)local o=a.nvim_win_get_cursor(e.main_win)local p=a.nvim_buf_get_lines(n,o[1]-1,-1,false)[1]local q=tonumber(p:split(' ')[1])vim.cmd(string.format('bd %s',q))e.close()e.open()end;function e.open_input_window()e.input_buf=a.nvim_create_buf(false,true)local H,I=pcall(vim.api.nvim_buf_get_var,e.input_buf,'lsp_enabled')local i={"─","│","─","│","╭","╮","╯","╰"}local j,k=d.create(e.input_buf,{title="Input Keybinding:",highlight="OutlineWindow",line=math.floor((vim.o.lines-1)/2-1),col=math.floor((vim.o.columns-20)/2),minwidth=20,height=1,borderchars=i})e.input_win=j;e.set_input_keys(e.input_buf)a.nvim_buf_set_option(e.input_buf,'omnifunc','v:lua.vim.lsp.omnifunc')a.nvim_win_set_option(e.input_win,'cursorline',true)a.nvim_set_current_win(e.input_win)a.nvim_win_set_cursor(e.input_win,{1,0})a.nvim_command('startinsert')a.nvim_buf_set_option(e.input_buf,'modifiable',true)end;function e.set_input_keys(n)a.nvim_buf_set_keymap(n,'i','<CR>','<Esc>:lua require"outline".bind_key_to_buffer()<CR>',{nowait=true,noremap=true,silent=true})a.nvim_buf_set_keymap(n,'i','<C-c>','<Esc>:lua require"outline".close_input_window()<CR>',{nowait=true,noremap=true,silent=true})a.nvim_buf_set_keymap(n,'i','q','<Esc>:lua require"outline".close_input_window()<CR>',{nowait=true,noremap=true,silent=true})a.nvim_buf_set_keymap(n,'i','<Esc>','<Esc>:lua require"outline".close_input_window()<CR>',{nowait=true,noremap=true,silent=true})end;function e.close_input_window()a.nvim_win_close(e.input_win,true)e.input_buf=nil;e.input_win=nil end;function e.bind_key_to_buffer()local J=a.nvim_win_get_cursor(e.main_win)J[1]=J[1]-1;local p=a.nvim_buf_get_lines(e.main_buf,J[1],-1,false)[1]local q=tonumber(p:split(" ")[1])local o=a.nvim_win_get_cursor(e.input_win)local K=a.nvim_buf_get_lines(e.input_buf,o[1]-1,-1,false)[1]a.nvim_buf_set_keymap(e.main_buf,'n',K,string.format([[:<C-U>lua require'outline'.set_buffer(%s,%s, 'window', vim.v.count)<CR>]],e.back_win,e.main_buf),{nowait=true,noremap=true,silent=true})for w,m in pairs(e.custom_keys)do if m.key==K then vim.notify('Key already exists')a.nvim_command('startinsert')return else if m.buffer==q then m.key=K;vim.notify('Buffer binding changed.')e.close_input_window()e.close()e.open()return end end end;e.custom_keys[#e.custom_keys+1]={key=K,buffer=q,window=e.back_win,opt='window'}e.close_input_window()vim.notify('Buffer binding added.')e.close()e.open()end;return e
