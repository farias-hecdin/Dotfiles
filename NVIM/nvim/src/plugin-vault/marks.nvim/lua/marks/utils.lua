local a={sign_cache={}}local b={["."]=true,["^"]=true,["`"]=true,["'"]=true,['"']=true,["<"]=true,[">"]=true,["["]=true,["]"]=true}for c=0,9 do b[tostring(c)]=true end;function a.add_sign(d,e,f,g,h,i)i=i or 10;local j="Marks_"..e;if not a.sign_cache[j]then a.sign_cache[j]=true;vim.fn.sign_define(j,{text=e,texthl="MarkSignHL",numhl="MarkSignNumHL"})end;vim.fn.sign_place(g,h,j,d,{lnum=f,priority=i})end;function a.remove_sign(d,g,h)h=h or"MarkSigns"vim.fn.sign_unplace(h,{buffer=d,id=g})end;function a.remove_buf_signs(d,h)h=h or"MarkSigns"vim.fn.sign_unplace(h,{buffer=d})end;function a.search(k,l,m,n,o)local p=m;local q=false;local r=m;for s,t in pairs(k)do if n(t,l,s)and not n(t,p,s)then p=t;q=true end;if o and not n(t,r,s)then r=t end end;if not o then return q and p or nil end;return q and p or r end;function a.is_valid_mark(u)return a.is_letter(u)or b[u]end;function a.is_special(u)return b[u]~=nil end;function a.is_letter(u)return a.is_upper(u)or a.is_lower(u)end;function a.is_upper(u)return 65<=u:byte()and u:byte()<=90 end;function a.is_lower(u)return 97<=u:byte()and u:byte()<=122 end;function a.option_nil(v,w)if v==nil then return w else return v end end;function a.choose_list(x)local y;if x=="loclist"then y=function(z,A)vim.fn.setloclist(0,z,A)end elseif x=="quickfixlist"then y=vim.fn.setqflist end;return y end;return a
