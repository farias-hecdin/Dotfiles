local a=require('gitsigns.async')local b=require('gitsigns.cache').cache;local c=require('gitsigns.config').config;local d=require('gitsigns.util')local e=vim.api;local f=require('gitsigns.debounce')local g=e.nvim_create_namespace('gitsigns_blame')local h={}local function i(j)if not e.nvim_buf_is_valid(j)then return end;e.nvim_buf_del_extmark(j,g,1)vim.b[j].gitsigns_blame_line_dict=nil end;local function k(l,m,n)if n.author==m then n.author='You'end;return d.expand_format(l,n,c.current_line_blame_formatter_opts.relative_time)end;local function o(p)local q={}for r,s in ipairs(p)do q[#q+1]=s[1]end;return table.concat(q)end;local function t(u)u=u or e.nvim_get_current_win()local v=vim.fn.getwininfo(u)[1]local w=v and v.textoff or 0;return e.nvim_win_get_width(u)-w end;local function x(j,y)return#e.nvim_buf_get_lines(j,y-1,y,true)[1]end;local function z(l)return function(A,B,C)return{{k(l,A,B),'GitSignsCurrentLineBlame'}}end end;local function D(j,B)local E=assert(b[j]).git_obj;local F=B.author=='Not Committed Yet'and c.current_line_blame_formatter_nc or c.current_line_blame_formatter;if type(F)=='string'then F=z(F)end;return F(E.repo.username,B,c.current_line_blame_formatter_opts)end;local function G(j,y,B,H)B=d.convert_blame_info(B)local p=D(j,B)local I=o(p)vim.b[j].gitsigns_blame_line_dict=B;vim.b[j].gitsigns_blame_line=I;if H.virt_text then local J=H.virt_text_pos;if J=='right_align'then if#I>t(0)-x(j,y)then J='eol'end end;e.nvim_buf_set_extmark(j,g,y-1,0,{id=1,virt_text=p,virt_text_pos=J,priority=H.virt_text_priority,hl_mode='combine'})end end;local function K(u)return e.nvim_win_get_cursor(u)[1]end;local function L(u,y)return e.nvim_win_call(u,function()return vim.fn.foldclosed(y)~=-1 end)end;local function M()return e.nvim_get_mode().mode=='i'end;local function N(j)a.scheduler_if_buf_valid(j)if M()then return end;local u=e.nvim_get_current_win()if j~=e.nvim_win_get_buf(u)then return end;local y=K(u)if L(u,y)then return end;local O=b[j]if not O or not O.git_obj.object_name then return end;local H=c.current_line_blame_opts;local B=O:get_blame(y,H)if not B then return end;if y~=K(u)then N(j)return end;G(j,y,B,H)end;local P=a.void(f.throttle_by_id(N))local Q;function h.setup()local R=e.nvim_create_augroup('gitsigns_blame',{})local H=c.current_line_blame_opts;Q=f.debounce_trailing(H.delay,P)for S,r in pairs(b)do i(S)end;if c.current_line_blame then e.nvim_create_autocmd({'FocusGained','BufEnter','CursorMoved','CursorMovedI'},{group=R,callback=function(T)i(T.buf)Q(T.buf)end})e.nvim_create_autocmd({'InsertEnter','FocusLost','BufLeave'},{group=R,callback=function(T)i(T.buf)end})Q(e.nvim_get_current_buf())end end;return h
