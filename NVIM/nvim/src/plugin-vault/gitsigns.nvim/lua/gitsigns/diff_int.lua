local a=require('gitsigns.hunks').create_hunk;local b=require('gitsigns.config').config;local c=require('gitsigns.async')local d={}local e=function(f,g,h)local i=b.diff_opts;return vim.diff(f,g,{result_type='indices',algorithm=i.algorithm,indent_heuristic=i.indent_heuristic,ignore_whitespace=i.ignore_whitespace,ignore_whitespace_change=i.ignore_whitespace_change,ignore_whitespace_change_at_eol=i.ignore_whitespace_change_at_eol,ignore_blank_lines=i.ignore_blank_lines,linematch=h})end;local j=c.wrap(function(f,g,h,k)local i=b.diff_opts;local function l(m,n)return m and bit.lshift(1,n)or 0 end;local o=l(i.indent_heuristic,0)+l(i.ignore_whitespace,1)+l(i.ignore_whitespace_change,2)+l(i.ignore_whitespace_change_at_eol,3)+l(i.ignore_blank_lines,4)vim.loop.new_work(function(p,q,r,s,t)local function u(n)return bit.band(s,bit.lshift(1,n))~=0 end;return vim.mpack.encode(vim.diff(p,q,{result_type='indices',algorithm=r,linematch=t,indent_heuristic=u(0),ignore_whitespace=u(1),ignore_whitespace_change=u(2),ignore_whitespace_change_at_eol=u(3),ignore_blank_lines=u(4)}))end,function(v)k(vim.mpack.decode(v))end):queue(f,g,i.algorithm,o,h)end,4)function d.run_diff(w,x,h)local y;if b._threaded_diff and vim.is_thread then y=j else y=e end;local f=table.concat(w,'\n')local g=table.concat(x,'\n')local z=y(f,g,h)local A={}for B,v in ipairs(z)do local C,D,E,F=v[1],v[2],v[3],v[4]local G=a(C,D,E,F)if D>0 then for H=C,C+D-1 do G.removed.lines[#G.removed.lines+1]=w[H]or''end end;if F>0 then for H=E,E+F-1 do G.added.lines[#G.added.lines+1]=x[H]or''end end;A[#A+1]=G end;return A end;local I=5;local function J(A)local K={A[1]}for L=2,#A do local M,N=K[#K],A[L]if not M or not N then break end;if N.added.start-M.added.start-M.added.count<I then M.added.count=N.added.start+N.added.count-M.added.start;M.removed.count=N.removed.start+N.removed.count-M.removed.start;if M.added.count>0 or M.removed.count>0 then M.type='change'end else K[#K+1]=N end end;return K end;function d.run_word_diff(O,P)local Q={}local R={}if#O~=#P then return R,Q end;for H=1,#O do local f=table.concat(vim.split(O[H],''),'\n')local g=table.concat(vim.split(P[H],''),'\n')local A={}for B,v in ipairs(e(f,g))do local C,D,E,F=v[1],v[2],v[3],v[4]if D==0 then C=C+1 end;if F==0 then E=E+1 end;A[#A+1]=a(C,D,E,F)end;A=J(A)for B,M in ipairs(A)do Q[#Q+1]={H,M.type,M.added.start,M.added.start+M.added.count}R[#R+1]={H,M.type,M.removed.start,M.removed.start+M.removed.count}end end;return R,Q end;return d
