local a=require('gitsigns.async').void;local b=require('gitsigns.async').scheduler;local c=require('gitsigns.config')local d=c.config;local e=require('gitsigns.debug.log')local f=e.dprintf;local g=e.dprint;local h=vim.api;local i=vim.loop;local j={}local k;local l=a(function()local m=vim.fs.find('.git',{limit=1,upward=true,type='directory'})if#m==0 then return end;if k then k:stop()else k=assert(i.new_fs_event())end;local n=assert(vim.loop.cwd())local o,p;local q=require('gitsigns.cache')for r,s in pairs(q.cache)do local t=s.git_obj.repo;if t.toplevel==n then p=t.abbrev_head;o=t.gitdir;break end end;local u=require('gitsigns.git')if not p or not o then local v=u.get_repo_info(n)o=v.gitdir;p=v.abbrev_head end;b()vim.g.gitsigns_head=p;if not o then return end;local w=o..'/HEAD'if k:getpath()==w then return end;local x=require('gitsigns.debounce').debounce_trailing;local y=x(100,a(function()local z=u.get_repo_info(n).abbrev_head;b()vim.g.gitsigns_head=z end))k:start(w,{},a(function(A)local B='cwd_watcher_cb'if A then f('Git dir update error: %s',A)return end;g('Git cwd dir update')y()end))end)local function C()h.nvim_create_user_command('Gitsigns',function(D)require('gitsigns.cli').run(D)end,{force=true,nargs='*',range=true,complete=function(E,F)return require('gitsigns.cli').complete(E,F)end})end;local function G()e.debug_mode=d.debug_mode;e.verbose=d._verbose end;local function H()b()for r,I in ipairs(h.nvim_list_bufs())do if h.nvim_buf_is_loaded(I)and h.nvim_buf_get_name(I)~=''then j.attach(I,nil,'setup')b()end end;h.nvim_create_autocmd({'BufRead','BufNewFile','BufWritePost'},{group='gitsigns',callback=function(J)j.attach(nil,nil,J.event)end})end;local function K()b()l()h.nvim_create_autocmd('DirChanged',{group='gitsigns',callback=function()local L=require('gitsigns.debounce').debounce_trailing;L(100,l)end})end;j.setup=a(function(M)c.build(M)if vim.fn.executable('git')==0 then print('gitsigns: git not in path. Aborting setup')return end;if d.yadm.enable and vim.fn.executable('yadm')==0 then print("gitsigns: yadm not in path. Ignoring 'yadm.enable' in config")d.yadm.enable=false;return end;G()C()h.nvim_create_augroup('gitsigns',{})if d._test_mode then require('gitsigns.attach')._setup()require('gitsigns.git')._set_version(d._git_version)end;H()K()j._setup_done=true end)return setmetatable(j,{__index=function(r,N)local O=require('gitsigns.attach')if O[N]then return O[N]end;local P=require('gitsigns.actions')if P[N]then return P[N]end;if d.debug_mode then local Q=require('gitsigns.debug')if Q[N]then return Q[N]end end end})
