local a=require('gitsigns.async')local b=require('gitsigns.config')local c=b.config;local d=require('gitsigns.debug.log')local e=d.dprintf;local f=d.dprint;local g=vim.api;local h=vim.loop;local i={}local j;local k=a.void(function()local l=vim.fs.find('.git',{limit=1,upward=true,type='directory'})if#l==0 then return end;if j then j:stop()else j=assert(h.new_fs_event())end;local m=assert(vim.loop.cwd())local n,o;local p=require('gitsigns.cache')for q,r in pairs(p.cache)do local s=r.git_obj.repo;if s.toplevel==m then o=s.abbrev_head;n=s.gitdir;break end end;local t=require('gitsigns.git')if not o or not n then local u=t.get_repo_info(m)n=u.gitdir;o=u.abbrev_head end;a.scheduler()vim.g.gitsigns_head=o;if not n then return end;local v=n..'/HEAD'if j:getpath()==v then return end;local w=require('gitsigns.debounce').debounce_trailing;local x=w(100,a.void(function()local y=t.get_repo_info(m).abbrev_head;a.scheduler()vim.g.gitsigns_head=y end))j:start(v,{},a.void(function(z)local A='cwd_watcher_cb'if z then e('Git dir update error: %s',z)return end;f('Git cwd dir update')x()end))end)local function B()g.nvim_create_user_command('Gitsigns',function(C)require('gitsigns.cli').run(C)end,{force=true,nargs='*',range=true,complete=function(D,E)return require('gitsigns.cli').complete(D,E)end})end;local function F()d.debug_mode=c.debug_mode;d.verbose=c._verbose end;local function G()a.scheduler()g.nvim_create_autocmd({'BufRead','BufNewFile','BufWritePost'},{group='gitsigns',callback=function(H)require('gitsigns.attach').attach(H.buf,nil,H.event)end})for q,I in ipairs(g.nvim_list_bufs())do if g.nvim_buf_is_loaded(I)and g.nvim_buf_get_name(I)~=''then local J=require('gitsigns.attach')a.run(J.attach,I,nil,'setup')end end end;local function K()a.scheduler()k()g.nvim_create_autocmd('DirChanged',{group='gitsigns',callback=function()local L=require('gitsigns.debounce').debounce_trailing;L(100,k)end})end;i.setup=a.void(function(M)b.build(M)if vim.fn.executable('git')==0 then print('gitsigns: git not in path. Aborting setup')return end;if c.yadm.enable and vim.fn.executable('yadm')==0 then print("gitsigns: yadm not in path. Ignoring 'yadm.enable' in config")c.yadm.enable=false;return end;F()B()g.nvim_create_augroup('gitsigns',{})if c._test_mode then require('gitsigns.attach')._setup()require('gitsigns.git')._set_version(c._git_version)end;if c.auto_attach then G()end;K()i._setup_done=true end)return setmetatable(i,{__index=function(q,N)local J=require('gitsigns.attach')if J[N]then return J[N]end;local O=require('gitsigns.actions')if O[N]then return O[N]end;if c.debug_mode then local P=require('gitsigns.debug')if P[N]then return P[N]end end end})
