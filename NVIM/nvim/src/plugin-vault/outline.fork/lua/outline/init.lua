local a={}local vim=vim;local b=require('outline.utils.config')local c=require('outline.utils.window')local d=require('outline.utils.buffer_list')function a.setup(e)b.options=vim.tbl_deep_extend('force',vim.deepcopy(b.options),e or{})vim.api.nvim_create_user_command("BSOpen",a.open,{})end;function a.build_win()vim.api.nvim_buf_set_option(b.options.main_buf,"modifiable",true)local f=a.list_buffers()vim.api.nvim_buf_set_option(b.options.main_buf,"modifiable",false)return f end;function a.open()local g=0;a.back_win=vim.api.nvim_get_current_win()if not b.options.main_buf and not b.options.main_win then b.options.main_buf=vim.api.nvim_create_buf(false,true)g=a.build_win()local h,i=c.create_window(c.get_approx_win_height(g))b.options.main_win=h;b.setKeys(a.back_win,b.options.main_buf)else xpcall(function()vim.api.nvim_win_close(b.options.main_win,false)vim.api.nvim_buf_delete(b.options.main_buf,{})b.options.main_win=nil;b.options.main_buf=nil end,function()b.options.main_win=nil;b.options.main_buf=nil;a.open()end)end end;function a.close()if b.options.main_win then vim.api.nvim_win_close(b.options.main_win,false)vim.api.nvim_buf_delete(b.options.main_buf,{})b.options.main_win=nil;b.options.main_buf=nil end end;function a.list_buffers()local j=vim.api.nvim_get_current_buf()local k=d.get_sorted_buffers()local l=d.get_buffer_list(k,j)d.update_main_buffer(l)return#l end;function a.set_buffer(m,n,o)local p=vim.api.nvim_win_get_cursor(b.options.main_win)p[1]=p[1]-1;local q=vim.api.nvim_buf_get_lines(n,p[1],-1,false)[1]local r=tonumber(q:split(" ")[1])if o=='window'then vim.api.nvim_win_set_buf(m,tonumber(r))elseif o=='hsplit'or o=='vsplit'then vim.api.nvim_command(o)vim.api.nvim_win_set_buf(vim.api.nvim_get_current_win(),r)end;a.close()end;function a.close_buffer(n)local p=vim.api.nvim_win_get_cursor(b.options.main_win)p[1]=p[1]-1;local q=vim.api.nvim_buf_get_lines(n,p[1]-1,-1,false)[1]local r=tonumber(q:split(' ')[1])vim.cmd(string.format('bd %s',r))a.close()a.open()end;return a
