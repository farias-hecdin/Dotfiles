local a={}local b={}a.setup=function(c)_G.MiniCursorword=a;c=b.setup_config(c)b.apply_config(c)b.create_autocommands()b.create_default_hl()end;a.config={delay=100}b.default_config=vim.deepcopy(a.config)b.timer=vim.loop.new_timer()b.window_matches={}b.setup_config=function(c)vim.validate({config={c,'table',true}})c=vim.tbl_deep_extend('force',vim.deepcopy(b.default_config),c or{})vim.validate({delay={c.delay,'number'}})return c end;b.apply_config=function(c)a.config=c end;b.create_autocommands=function()local d=vim.api.nvim_create_augroup('MiniCursorword',{})local e=function(f,g,h,i)vim.api.nvim_create_autocmd(f,{group=d,pattern=g,callback=h,desc=i})end;e('CursorMoved','*',b.auto_highlight,'Auto highlight cursorword')e({'InsertEnter','TermEnter','QuitPre'},'*',b.auto_unhighlight,'Auto unhighlight cursorword')e('ModeChanged','*:[^i]',b.auto_highlight,'Auto highlight cursorword')e('ColorScheme','*',b.create_default_hl,'Ensure proper colors')e('FileType','TelescopePrompt',function()vim.b.minicursorword_disable=true end,'Disable locally')end;b.create_default_hl=function()vim.api.nvim_set_hl(0,'MiniCursorword',{default=true,underline=true})vim.api.nvim_set_hl(0,'MiniCursorwordCurrent',{default=true,link='MiniCursorword'})end;b.is_disabled=function()return vim.g.minicursorword_disable==true or vim.b.minicursorword_disable==true end;b.get_config=function(c)return vim.tbl_deep_extend('force',a.config,vim.b.minicursorword_config or{},c or{})end;b.auto_highlight=function()b.timer:stop()if not b.should_highlight()then return b.unhighlight()end;local j=vim.api.nvim_get_current_win()local k=b.window_matches[j]or{}local l=b.get_cursor_word()if k.word==l then b.unhighlight(true)b.highlight(true)return end;b.unhighlight()b.timer:start(b.get_config().delay,0,vim.schedule_wrap(function()b.unhighlight()b.highlight()end))end;b.auto_unhighlight=function()b.timer:stop()b.unhighlight()end;b.highlight=function(m)local j=vim.api.nvim_get_current_win()if not vim.api.nvim_win_is_valid(j)then return end;if not b.should_highlight()then return end;b.window_matches[j]=b.window_matches[j]or{}local n=[[\k*\%#\k*]]local o=vim.fn.matchadd('MiniCursorwordCurrent',n,-1)b.window_matches[j].id_current=o;if m or b.window_matches[j].id~=nil then return end;local l=b.get_cursor_word()local g=string.format([[\(%s\)\@!\&\V\<%s\>]],n,l)local p=vim.fn.matchadd('MiniCursorword',g,-1)b.window_matches[j].id=p;b.window_matches[j].word=l end;b.unhighlight=function(m)local j=vim.api.nvim_get_current_win()local k=b.window_matches[j]if not vim.api.nvim_win_is_valid(j)or k==nil then return end;pcall(vim.fn.matchdelete,k.id_current)b.window_matches[j].id_current=nil;if not m then pcall(vim.fn.matchdelete,k.id)b.window_matches[j]=nil end end;b.should_highlight=function()return not b.is_disabled()and b.is_cursor_on_keyword()end;b.is_cursor_on_keyword=function()local q=vim.fn.col('.')local r=vim.api.nvim_get_current_line():sub(q,q)local s,t=pcall(vim.fn.match,r,'[[:keyword:]]')return s and t>=0 end;b.get_cursor_word=function()return vim.fn.escape(vim.fn.expand('<cword>'),[[\/]])end;return a
