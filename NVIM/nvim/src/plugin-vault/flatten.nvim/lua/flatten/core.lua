local a={}function a.unblock_guest(b)local c=vim.fn.sockconnect("pipe",b,{rpc=true})vim.rpcnotify(c,"nvim_exec_lua","vim.cmd.qa({ bang = true })",{})vim.fn.chanclose(c)end;function a.notify_when_done(d,e,f,g)vim.api.nvim_create_autocmd({"QuitPre","BufUnload","BufDelete"},{buffer=e,once=true,group=a.augroup,callback=function()vim.api.nvim_del_augroup_by_id(a.augroup)a.unblock_guest(d)f(g)end})end;function a.smart_open(h)local i={}for j,k in ipairs(vim.api.nvim_list_wins())do local l=vim.api.nvim_win_get_buf(k)if vim.api.nvim_win_get_config(k).zindex==nil and vim.bo[l].buftype==""then i[k]=true end end;local m=vim.fn.winlayout()local n={m}local o=vim.fn.win_getid(vim.fn.winnr("#"))local k;if i[o]and o~=vim.api.nvim_get_current_win()then k=o else while#n>0 do local p=table.remove(n)if p[1]=="leaf"then if i[p[2]]then k=p[2]break end else for q=#p[2],1,-1 do table.insert(n,p[2][q])end end end end;if not h then return k end;if k then vim.api.nvim_win_set_buf(k,h.bufnr)vim.api.nvim_set_current_win(k)else vim.cmd("split")vim.api.nvim_win_set_buf(0,h.bufnr)end end;function a.edit_files(r)local s=r.files;local t=r.response_pipe;local u=r.guest_cwd;local v=r.stdin;local w=r.force_block;local x=r.argv;local y=require("flatten").config;local z=y.callbacks;local A=y.window.focus=="first"local B=y.window.open;local C=#s;local D=#v;local E={}if C==0 and D==0 then return false end;local F=false;if y.allow_cmd_passthrough then for j,G in ipairs(x)do if F then F=false;if vim.api.nvim_exec2 then vim.api.nvim_exec2(G,{})else vim.api.nvim_exec(G,false)end elseif G:sub(1,1)=="+"then local H=string.sub(G,2,-1)table.insert(E,H)elseif G=="--cmd"then F=true end end end;z.pre_open()if C>0 then for q,I in ipairs(s)do local J=string.find(I,"^/")local K=J and I or u.."/"..I;local L={fname=K,bufnr=vim.fn.bufadd(K)}if vim.api.nvim_set_option_value then vim.api.nvim_set_option_value("buflisted",true,{buf=L.bufnr})else vim.api.nvim_buf_set_option(L.bufnr,"buflisted",true)end;s[q]=L end end;local M=nil;if D>0 then local e=vim.api.nvim_create_buf(true,false)vim.api.nvim_buf_set_lines(e,0,0,true,v)M={fname="",bufnr=e}end;local N;local e;local O=vim.tbl_contains(x,"-d")if O then local P=y.window.diff;if type(P)=="function"then N,e=y.window.diff(s,x,M,u)else N=a.smart_open()vim.api.nvim_set_current_win(N)if M then s=vim.list_extend({M},s)end;local Q=false;local R=false;if P=="tab_split"or P=="tab_vsplit"then Q=true end;if P=="vsplit"or P=="tab_vsplit"then R=true end;for q,L in ipairs(s)do if q==1 then if Q then vim.cmd.tabedit(L.fname)else vim.api.nvim_set_current_buf(L.bufnr)end else if R then vim.cmd.vsplit(L.fname)else vim.cmd.split(L.fname)end end;vim.cmd.diffthis()end end;N=N or vim.api.nvim_get_current_win()e=e or vim.api.nvim_get_current_buf()elseif type(B)=="function"then e,N=B(s,x,M,u)if N==nil and e~=nil then N=vim.fn.bufwinid(e)end elseif type(B)=="string"then local h=A and s[1]or s[#s]if M then h=M end;if B=="smart"then a.smart_open(h)elseif B=="alternate"then N=vim.fn.win_getid(vim.fn.winnr("#"))vim.api.nvim_set_current_win(N)elseif B=="split"then vim.cmd.split()elseif B=="vsplit"then vim.cmd.vsplit()elseif B=="tab"then vim.cmd.tabnew()end;vim.api.nvim_set_current_buf(h.bufnr)N=vim.api.nvim_get_current_win()e=h.bufnr else vim.api.nvim_err_writeln("Flatten: 'config.open.focus' expects a function or string, got "..type(B))return false end;local g;if e~=nil then g=vim.api.nvim_buf_get_option(e,"filetype")end;local S=y.block_for[g]or w;for j,H in ipairs(E)do if vim.api.nvim_exec2 then vim.api.nvim_exec2(H,{})else vim.api.nvim_exec(H,false)end end;z.post_open(e,N,g,S,O)if S then a.augroup=vim.api.nvim_create_augroup("flatten_notify",{clear=true})a.notify_when_done(t,e,z.block_end,g)end;return S end;return a
