local a=require("neodev.config")local b={}function b.find_root(c)c=c or vim.api.nvim_buf_get_name(0)return vim.fs.find({"lua"},{path=c,upward=true,type="directory"})[1]end;function b.fetch(d)local e=io.popen(string.format("curl -s -k %q",d))if not e then error(("Could not download %s"):format(d))end;local f=e:read("*a")e:close()return f end;function b.is_nvim_config()local c=vim.loop.fs_realpath(vim.api.nvim_buf_get_name(0))if c then c=vim.fs.normalize(c)local g=vim.loop.fs_realpath(vim.fn.stdpath("config"))or vim.fn.stdpath("config")g=vim.fs.normalize(g)return c:find(g,1,true)==1 end;return false end;function b.keys(h)local f=vim.tbl_keys(h)table.sort(f)return f end;function b.for_each(h,i)local j=b.keys(h)for k,l in ipairs(j)do i(l,h[l])end end;function b.read_file(m,n)local e=io.open(m,"r"..(n or""))if not e then error(("Could not open file %s for reading"):format(m))end;local o=e:read("*a")e:close()return o end;function b.write_file(m,o)local e=io.open(m,"w+")if not e then error(("Could not open file %s for writing"):format(m))end;e:write(o)e:close()end;function b.debug(p)if a.options.debug then b.error(p)end end;function b.error(p)vim.notify_once(p,vim.log.levels.ERROR,{title="neodev.nvim"})end;function b.warn(p)vim.notify_once(p,vim.log.levels.WARN,{title="neodev.nvim"})end;return b
