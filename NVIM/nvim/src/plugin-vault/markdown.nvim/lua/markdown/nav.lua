local a=vim.api;local b=vim.treesitter;local c=require("markdown.treesitter")local d={}local function e(f)local g=f:type()return g=="list"or g=="block_quote"end;local function h(f)return f:type()=="section"and c.find_parent(f,e)==nil end;local function i(f)if h(f)then local j=f:named_child(0)local g=j~=nil and j:type()return g=="atx_heading"or g=="setext_heading"end;return false end;local function k(f)local l=f:start()a.nvim_win_set_cursor(0,{l+1,0})end;function d.curr_heading()b.get_parser(0,"markdown"):parse()local m=c.find_node(i)if m~=nil then k(m)end end;function d.parent_heading()b.get_parser(0,"markdown"):parse()local m=c.find_node(h)if m==nil then return end;local n=c.find_parent(m,i)if n~=nil then k(n)end end;function d.next_heading()b.get_parser(0,"markdown"):parse()local m=c.find_node(h)if m==nil then return end;for j in m:iter_children()do if i(j)then k(j)return end end;repeat local o=m:next_named_sibling()if o~=nil and i(o)then local l=o:start()a.nvim_win_set_cursor(0,{l+1,0})return end;m=c.find_parent(m,i)until m==nil end;function d.prev_heading()b.get_parser(0,"markdown"):parse()local m=c.find_node(h)if m==nil then return end;local l=m:start()if l==0 then return end;local p=c.find_node(i,{pos={l-1,0}})if p~=nil then k(p)end end;return d
