local a=vim.api;local b=vim.treesitter;local c=require("markdown.treesitter")local d=require("markdown.util")local e={}local f="list"local g="list_item"local h="list_marker_dot"local i="list_marker_parenthesis"local j="task_list_marker_checked"local k="task_list_marker_unchecked"local l="paragraph"local m="inline"local n=b.query.parse("markdown",[[
	(list
		(list_item [
			(list_marker_dot)
			(list_marker_parenthesis)
		])) @l
]])local function o(p)return p:type()==g end;local function q(p)return p:type()==f end;local function r(s,t)local u=s:start()for v in s:iter_children()do local w,x,y,z=v:range()if w~=u and x~=0 then for A=w,y-1,1 do if t<0 then d.delete_text(A,0,math.abs(t))else d.insert_text(A,0,string.rep(" ",t))end end end end end;local function B(s,C)local D=b.get_node_text(s,0,nil)local E=D:match("(%d+)")local A,F=s:start()local G=tostring(C)if E~=G then local H=#E;d.replace_text(A,F,H,G)local I=#G-H;if I~=0 then r(s,I)end end end;local function J(K)local C=1;for s in K:iter_children()do if s:named()then B(s,C)C=C+1 end end end;function e.reset_list_numbering(w,y)if y>=0 then y=y+1 end;local L=b.get_parser(0,"markdown"):parse()[1]for z,M,z in n:iter_matches(L:root(),0,w,y)do J(M[1])end end;local function N(s)for O=s:named_child_count()-1,0,-1 do local v=s:named_child(O)if v:type()==l then for P=v:named_child_count()-1,0,-1 do if v:named_child(P):type()==m then return v:named_child(P)end end end end end;local function Q()local R=a.nvim_win_get_cursor(0)local S=R[1]-1;local T=vim.fn.charcol("$")-1;return S,T end;local U={above=1,below=2}local function V(W)local S,T=Q()b.get_parser(0,"markdown"):parse()local s=c.find_node(o,{pos={S,T}})if s==nil then return end;local X=s:named_child(0)local Y=X:type()local Z,_=X:start()local a0=X:next_named_sibling()if a0~=nil and a0:type()~=j and a0:type()~=k then a0=nil end;local a1;if W==U.above then a1=s:start()else local a2=N(s)if a2~=nil then local a3=a2:end_()a1=a3+1 else a1=Z+1 end end;local a4=a.nvim_buf_get_text(0,Z,0,Z,_,{})[1]local a5=b.get_node_text(X,0,nil)local a6=a0 and"[ ] "or""a.nvim_buf_set_lines(0,a1,a1,true,{a4 ..a5 ..a6})if Y==h or Y==i then b.get_parser(0,"markdown"):parse()local K=c.find_node(q,{pos={S,T}})if K~=nil then J(K)end end;a1=a1+1;a.nvim_win_set_cursor(0,{a1,vim.fn.charcol({a1,"$"})})vim.cmd("startinsert!")end;function e.insert_list_item_above()V(U.above)end;function e.insert_list_item_below()V(U.below)end;local function a7(p)if p:type()~=g then return false end;local a0=p:named_child(1)if a0==nil then return false end;local a8=a0:type()return a8==j or a8==k end;function e.toggle_task(w,y)b.get_parser(0,"markdown"):parse()local a9={}local aa;for A=w,y,1 do local ab=vim.fn.charcol({A+1,"$"})-1;local p=c.find_node(a7,{pos={A,ab}})if p~=nil and p~=aa then table.insert(a9,p:named_child(1))aa=p end end;local ac=false;for O=1,#a9,1 do if a9[O]:type()==k then local A,x,z,ad=a9[O]:range()d.replace_text(A,x,ad-x+1,"[x] ")ac=true end end;if not ac then for O=1,#a9,1 do local A,x,z,ad=a9[O]:range()d.replace_text(A,x,ad-x+1,"[ ] ")end end end;return e
