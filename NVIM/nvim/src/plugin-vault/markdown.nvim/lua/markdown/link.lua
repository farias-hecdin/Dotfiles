local a=vim.api;local b=vim.treesitter;local c=require("markdown.config")local d=require("markdown.treesitter")local e=require("markdown.notify")local f=require("markdown.util")local g={}local h=b.query.parse("markdown",[[
	[
		(atx_heading
			_ heading_content: (inline) @atx_content)
		(setext_heading
			heading_content: (_ (inline) @setext_content) _)
	] @heading
]])function g.is_url(i)local j,k=string.find(i,"https?://".."%w".."[%w@:%%._+~#=/%-?&]*")if j==nil or k==nil then j,k=string.find(i,"www%.".."%w".."[%w@:%%._+~#=/%-?&]*")if j==nil or k==nil then return false end end;return k+1-j==#i end;local function l(m)local n=m:type()return n=="list"or n=="block_quote"end;local function o(m)return m:type()=="inline"end;local function p(m)return m:type()=="inline_link"end;local function q(m)return m:type()=="link_destination"end;local function r(s)return function(t,u)local v=a.nvim_get_mode().mode;local w=v=="v"or v=="V"local x=vim.b.markdown_nvim_attached==1;if not(w and x and#t==1)then s(t,u)return end;local y=t[1]if not g.is_url(y)then s(t,u)return end;local z=a.nvim_replace_termcodes("<Esc>",true,false,true)a.nvim_feedkeys(z.."gv","x",false)local A=f.get_visual_range()b.get_parser(0,"markdown"):parse()local B=d.find_node(o,{pos={A[1],A[2]}})if B~=nil and b.node_contains(B,A)then t=a.nvim_buf_get_text(0,A[1],A[2],A[3],A[4],{})t[1]="["..t[1]t[#t]=t[#t].."]("..y..")"end;s(t,u)end end;local C=false;function g.register_paste_handler()if not C then C=true;vim.paste=r(vim.paste)end end;function g.add_visual()g.add(nil)end;function g.add(D)local w=D==nil;local E=w and vim.fn.visualmode()=="\22"if E then return end;local A;if w then A=f.get_visual_range()else A=f.get_motion_range(D)end;b.get_parser(0,"markdown"):parse()local B=d.find_node(o,{pos={A[1],A[2]}})if B==nil or not b.node_contains(B,A)then return end;f.insert_text(A[3],A[4],"]()")f.insert_text(A[1],A[2],"[")if w then local z=a.nvim_replace_termcodes("<Esc>",true,false,true)a.nvim_feedkeys(z,"n",false)end;local F=A[4]+2;if A[1]==A[3]then F=F+1 end;a.nvim_win_set_cursor(0,{A[3]+1,F})vim.cmd("startinsert")end;function g.get_heading_link(i)local G=f.sanitize(i)local H=d.remove_nodes(G,"markdown_inline","emphasis_delimiter")return G,f.slugify(H)end;local function I(H,J)H=string.sub(H,2)for K,L,K in h:iter_matches(J,0,0,-1)do local G=L[1]or L[2]local M=L[3]local N=d.find_parent(M,l)if not N then local i=b.get_node_text(G,0,nil)K,i=g.get_heading_link(i)if i==H then local O=M:start()a.nvim_win_set_cursor(0,{O+1,0})return end end end;e.info("heading not found")end;local function P()return vim.loop.os_uname().sysname end;local function Q(H,R)if R=="Windows_NT"then vim.fn.system({"explorer.exe",H})elseif R=="Linux"then vim.fn.system("xdg-open",H)elseif R=="Darwin"then vim.fn.system("open",H)else return false end;return true end;local function S(T,U)if vim.startswith(T,"/")then T=vim.fn.getcwd()..T elseif vim.startswith(T,"./")or vim.startswith(T,".\\")then T=vim.fs.dirname(vim.api.nvim_buf_get_name(0))..string.sub(T,2)elseif vim.startswith(T,"../")or vim.startswith(T,"..\\")then T=vim.fs.dirname(vim.fs.dirname(vim.api.nvim_buf_get_name(0)))..string.sub(T,3)end;local V;local j=string.find(T,"%.md#[%w_-]+$")if j~=nil then V=string.sub(T,j+3)T=string.sub(T,1,j+2)end;local W=vim.fs.normalize(T)local X=vim.fn.filereadable(W)~=0;local Y=vim.fn.isdirectory(W)~=0;if X or Y then local Z=true;local x=string.sub(T,-3)==".md"if U.use_default_app and not x and not Y then local R=P()local _;if R=="Windows_NT"then _=string.gsub(W,"/","\\")else _=W end;Z=not Q(_,R)end;if Z then vim.cmd.edit(T)if V~=nil then local a0=b.get_parser(0,"markdown")if a0~=nil then I(V,a0:parse()[1]:root())end end end else e.info("path not found")end end;function g.follow(U)U=U or{}local a1=a.nvim_win_get_cursor(0)a1[1]=a1[1]-1;local a2=b.get_parser(0,"markdown"):parse()[1]local a3=d.find_node(p,{ignore_injections=false})if a3==nil then return end;local a4=d.find_child(a3,q)if a4==nil then return end;local H=b.get_node_text(a4,0,nil)local function a5()if vim.startswith(H,"#")then I(H,a2:root())elseif g.is_url(H)then local R=P()if not Q(H,R)then e.error("OS '%s' URL navigation is not supported.",R)end else S(H,U)end end;local a6=c:get().hooks.follow_link;if a6~=nil then local a7=vim.tbl_extend("error",U,{dest=H})a6(a7,a5)else a5()end end;return g
