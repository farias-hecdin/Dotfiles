local a={}local b=require'mind.data'local c=require'mind.indexing'local d=require'mind.keymap'local e=require'mind.node'local f=require'mind.ui'local g=require'mind.notify'.notify;a.commands={toggle_node=function(h)a.toggle_node_cursor(h.get_tree(),h.save_tree,h.opts)end,toggle_parent=function(h)a.toggle_node_parent_cursor(h.get_tree(),h.save_tree,h.opts)end,quit=function()a.unselect_node()a.close()end,add_above=function(h)a.create_node_cursor(h.get_tree(),e.MoveDir.ABOVE,h.save_tree,h.opts)end,add_below=function(h)a.create_node_cursor(h.get_tree(),e.MoveDir.BELOW,h.save_tree,h.opts)end,add_inside_start=function(h)a.create_node_cursor(h.get_tree(),e.MoveDir.INSIDE_START,h.save_tree,h.opts)end,add_inside_end=function(h)a.create_node_cursor(h.get_tree(),e.MoveDir.INSIDE_END,h.save_tree,h.opts)end,add_inside_end_index=function(h)a.create_node_index(h.get_tree(),e.MoveDir.INSIDE_END,h.save_tree,h.opts)end,delete=function(h)a.delete_node_cursor(h.get_tree(),h.save_tree,h.opts)end,delete_file=function(h)a.delete_data_cursor(h.get_tree(),h.save_tree,h.opts)end,rename=function(h)a.rename_node_cursor(h.get_tree(),h.save_tree,h.opts)end,open_data=function(h)a.open_data_cursor(h.get_tree(),h.data_dir,h.save_tree,h.opts)end,open_data_index=function(h)a.open_data_index(h.get_tree(),h.data_dir,h.save_tree,h.opts)end,copy_node_link=function(h)a.copy_node_link_cursor(h.get_tree(),nil,h.opts)end,copy_node_link_index=function(h)a.copy_node_link_index(h.get_tree(),nil,h.opts)end,make_url=function(h)a.make_url_node_cursor(h.get_tree(),h.save_tree,h.opts)end,change_icon=function(h)a.change_icon_cursor(h.get_tree(),h.save_tree,h.opts)end,change_icon_menu=function(h)a.change_icon_menu_cursor(h.get_tree(),h.save_tree,h.opts)end,select=function(h)a.toggle_select_node_cursor(h.get_tree(),h.opts)end,select_path=function(h)a.select_node_path(h.get_tree(),h.opts)end,move_above=function(h)a.move_node_selected_cursor(h.get_tree(),e.MoveDir.ABOVE,h.save_tree,h.opts)end,move_below=function(h)a.move_node_selected_cursor(h.get_tree(),e.MoveDir.BELOW,h.save_tree,h.opts)end,move_inside_start=function(h)a.move_node_selected_cursor(h.get_tree(),e.MoveDir.INSIDE_START,h.save_tree,h.opts)end,move_inside_end=function(h)a.move_node_selected_cursor(h.get_tree(),e.MoveDir.INSIDE_END,h.save_tree,h.opts)end}a.open_data=function(i,j,k,l,m)if j.url then vim.fn.system(string.format('%s "%s"',m.ui.url_open,j.url))return end;local n=j.data;if n==nil then local o=string.format(m.edit.data_header,j.contents[1].text)local p=i.type~=e.TreeType.LOCAL_ROOT;n=b.new_data_file(k,j.contents[1].text,m.edit.data_extension,o,p)if n==nil then return end;j.data=n;f.rerender(i,m)l()end;local q;for r,s in ipairs(vim.api.nvim_tabpage_list_wins(0))do local t=vim.api.nvim_win_get_buf(s)local u=vim.api.nvim_buf_get_option(t,'buftype')if u==''then q=s;break end end;if q==nil then vim.api.nvim_exec('rightb vsp '..n,false)else vim.api.nvim_set_current_win(q)vim.api.nvim_exec('e '..n,false)end end;a.delete_data=function(i,j,l,m)if j.data==nil then g('no files associated to this node',vim.log.levels.ERROR)return else f.with_confirmation("Delete file?",function()local v=j.data;b.delete_data_file(v)j.data=nil;f.rerender(i,m)l()g(string.format("file '%s' deleted",v),vim.log.levels.INFO)end)end end;a.open_data_line=function(i,w,k,l,m)local j=e.get_node_by_line(i,w)if j==nil then g('cannot open data; no node',vim.log.levels.ERROR)return end;a.open_data(i,j,k,l,m)end;a.open_data_cursor=function(i,k,l,m)f.with_cursor(function(w)a.open_data_line(i,w,k,l,m)end)end;a.delete_data_line=function(i,w,l,m)local j=e.get_node_by_line(i,w)if j==nil then g('cannot delete data; no node',vim.log.levels.ERROR)return end;a.delete_data(i,j,l,m)end;a.delete_data_cursor=function(i,l,m)f.with_cursor(function(w)a.delete_data_line(i,w,l,m)end)end;a.open_data_index=function(i,k,l,m)c.search_index(i,'Open data / URL',function(j)return m.tree.automatic_data_creation or j.data~=nil or j.url~=nil end,function(x)a.open_data(i,x.node,k,l,m)end,m)end;a.copy_node_link=function(j,y,m)local z=j.data or j.url;if z~=nil then g('link was copied')vim.fn.setreg(y or'"',string.format(m.edit.copy_link_format or'%s',z))end end;a.copy_node_link_line=function(i,w,y,m)local j=e.get_node_by_line(i,w)a.copy_node_link(j,y,m)end;a.copy_node_link_cursor=function(i,y,m)f.with_cursor(function(w)a.copy_node_link_line(i,w,y,m)end)end;a.copy_node_link_index=function(i,y,m)c.search_index(i,'Get a node link',function(j)return j.data~=nil or j.url~=nil end,function(x)a.copy_node_link(x.node,y,m)end,m)end;a.make_url_node=function(i,j,l,m)if j.data~=nil then g('cannot create URL node: data present',vim.log.levels.ERROR)return end;f.with_input('URL: ','https://',function(A)j.url=A;l()f.rerender(i,m)end)end;a.make_url_node_line=function(i,w,l,m)local j=e.get_node_by_line(i,w)a.make_url_node(i,j,l,m)end;a.make_url_node_cursor=function(i,l,m)f.with_cursor(function(w)a.make_url_node_line(i,w,l,m)end)end;a.create_node=function(i,B,C,j,D,m)if D==e.MoveDir.INSIDE_START then e.insert_node(C,1,j)elseif D==e.MoveDir.INSIDE_END then e.insert_node(C,-1,j)elseif B~=nil then local E=e.find_parent_index(B,C)if D==e.MoveDir.ABOVE then e.insert_node(B,E,j)elseif D==e.MoveDir.BELOW then e.insert_node(B,E+1,j)end else g('forbidden node creation',vim.log.levels.WARN)return end;f.rerender(i,m)end;a.create_node_line=function(i,w,F,D,l,m)local B,C=e.get_node_and_parent_by_line(i,w)if C==nil then g('cannot create node on current line; no node',vim.log.levels.ERROR)return end;local j=e.new_node(F,nil)a.create_node(i,B,C,j,D,m)l()end;a.create_node_cursor=function(i,D,l,m)f.with_cursor(function(w)f.with_input('Node name: ',nil,function(A)a.create_node_line(i,w,A,D,l,m)end)end)end;a.create_node_index=function(i,D,l,m)c.search_index(i,'Pick a node to create a new node in',nil,function(x)f.with_input('Node name: ',nil,function(A)local j=e.new_node(A)a.create_node(i,x.parent,x.node,j,D,m)l()end)end,m)end;a.delete_node_line=function(i,w,l,m)local C,j=e.get_node_and_parent_by_line(i,w)if j==nil then g('no node to delete',vim.log.levels.ERROR)return end;if C==nil then g('cannot delete a node without parent',vim.log.levels.ERROR)return end;local E=e.find_parent_index(C,j)f.with_confirmation(string.format("Delete '%s'?",j.contents[1].text),function()e.delete_node(C,E)f.rerender(i,m)l()end)end;a.delete_node_cursor=function(i,l,m)f.with_cursor(function(w)a.delete_node_line(i,w,l,m)end)end;a.rename_node=function(i,j,l,m)f.with_input('Rename node: ',j.contents[1].text,function(A)j.contents[1].text=A;a.unselect_node()f.rerender(i,m)l()end)end;a.rename_node_line=function(i,w,l,m)local j=e.get_node_by_line(i,w)a.rename_node(i,j,l,m)end;a.rename_node_cursor=function(i,l,m)f.with_cursor(function(w)a.rename_node_line(i,w,l,m)end)end;a.change_icon=function(i,j,l,m)f.with_input('Change icon: ',j.icon,function(A)if A==' 'then A=nil end;j.icon=A;f.rerender(i,m)l()end)end;a.change_icon_line=function(i,w,l,m)local j=e.get_node_by_line(i,w)a.change_icon(i,j,l,m)end;a.change_icon_cursor=function(i,l,m)f.with_cursor(function(w)a.change_icon_line(i,w,l,m)end)end;a.change_icon_menu=function(i,j,l,m)local G=string.format('Pick an icon for %s',j.contents[1].text)local H=function(x)return string.format('%s: %s',x[1],x[2])end;vim.ui.select(m.ui.icon_preset,{prompt=G,format_item=H},function(x)if x~=nil then j.icon=x[1]l()f.rerender(i,m)end end)end;a.change_icon_menu_line=function(i,w,l,m)local j=e.get_node_by_line(i,w)a.change_icon_menu(i,j,l,m)end;a.change_icon_menu_cursor=function(i,l,m)f.with_cursor(function(w)a.change_icon_menu_line(i,w,l,m)end)end;a.select_node=function(i,C,j,m)a.unselect_node()j.is_selected=true;a.selected={parent=C,node=j}d.set_keymap(d.KeymapSelector.SELECTION)f.rerender(i,m)end;a.select_node_line=function(i,w,m)local C,j=e.get_node_and_parent_by_line(i,w)a.select_node(i,C,j,m)end;a.select_node_path=function(i,m)f.with_input('Path: /',nil,function(A)local C,j=e.get_node_by_path(i,'/'..A,m.tree.automatic_creation)if j~=nil then a.select_node(i,C,j,m)end end)end;a.unselect_node=function()if a.selected~=nil then a.selected.node.is_selected=nil;a.selected=nil;d.set_keymap(d.KeymapSelector.NORMAL)end end;a.toggle_select_node_cursor=function(i,m)f.with_cursor(function(w)if a.selected~=nil then local j=e.get_node_by_line(i,w)if j==a.selected.node then a.unselect_node()f.rerender(i,m)else a.unselect_node()a.select_node_line(i,w,m)end else a.select_node_line(i,w,m)end end)end;a.move_node=function(i,I,J,K,L,D,m)if J==nil then g('cannot move; no source node',vim.log.levels.WARN)return end;if L==nil then g('cannot move; no target node',vim.log.levels.WARN)return end;if I==K then local M;local N;for O,P in ipairs(I.children)do if P==L then N=O elseif P==J then M=O end;if N~=nil and M~=nil then break end end;if N==nil or M==nil then a.unselect_node()f.rerender(i,m)return end;if N==M then g('not moving; source and target are the same node')a.unselect_node()f.rerender(i,m)return end;if D==e.MoveDir.BELOW then e.move_source_target_same_tree(I,M,N+1)elseif D==e.MoveDir.ABOVE then e.move_source_target_same_tree(I,M,N)else e.delete_node(I,M)if D==e.MoveDir.INSIDE_START then e.insert_node(L,1,J)elseif D==e.MoveDir.INSIDE_END then e.insert_node(L,-1,J)end end else local M=e.find_parent_index(I,J)e.delete_node(I,M)local N=e.find_parent_index(K,L)if D==e.MoveDir.BELOW then e.insert_node(K,N+1,J)elseif D==e.MoveDir.ABOVE then e.insert_node(K,N,J)elseif D==e.MoveDir.INSIDE_START then e.insert_node(L,1,J)elseif D==e.MoveDir.INSIDE_END then e.insert_node(L,-1,J)end end;a.unselect_node()f.rerender(i,m)end;a.move_node_selected_line=function(i,w,D,l,m)if a.selected==nil then g('cannot move; no selected node',vim.log.levels.ERROR)a.unselect_node()f.rerender(i,m)return end;local C,j=e.get_node_and_parent_by_line(i,w)if C==nil then g('cannot move root',vim.log.levels.ERROR)a.unselect_node()f.rerender(i,m)return end;a.move_node(i,a.selected.parent,a.selected.node,C,j,D,m)l()end;a.move_node_selected_cursor=function(i,D,l,m)f.with_cursor(function(w)a.move_node_selected_line(i,w,D,l,m)end)end;a.toggle_node=function(i,j,l,m)j.is_expanded=not j.is_expanded;f.rerender(i,m)l()end;a.toggle_node_line=function(i,w,l,m)local j=e.get_node_by_line(i,w)a.toggle_node(i,j,l,m)end;a.toggle_node_cursor=function(i,l,m)f.with_cursor(function(w)a.toggle_node_line(i,w,l,m)end)end;a.toggle_node_parent_cursor=function(i,l,m)f.with_cursor(function(w)local C,r=e.get_node_and_parent_by_line(i,w)if C~=nil then a.toggle_node(i,C,l,m)end end)end;a.open_tree=function(Q,R,l,m)local t=f.open_window(m)local S;S=vim.api.nvim_create_autocmd({'WinClosed'},{buffer=t,callback=function()vim.api.nvim_del_autocmd(S)a.close()end})f.render(Q(),t,m)d.insert_keymaps(t,Q,R,l,m)end;a.close=function()a.unselect_node()if f.render_cache and f.render_cache.bufnr then vim.api.nvim_buf_delete(f.render_cache.bufnr,{force=true})end;f.render_cache={}end;a.precompute_commands=function()for T,U in pairs(d.keymaps.normal)do if type(U)=='string'then local V=a.commands[d.keymaps.normal[T]]if V~=nil then d.keymaps.normal[T]=V end end end;for T,U in pairs(d.keymaps.selection)do if type(U)=='string'then local V=a.commands[d.keymaps.selection[T]]if V~=nil then d.keymaps.selection[T]=V end end end end;return a
