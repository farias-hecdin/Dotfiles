local a=require"fzf-lua.core"local b=require"fzf-lua.path"local c=require"fzf-lua.config"local d=require"fzf-lua.actions"local e={}local f=function(g)local h=vim.api.nvim_win_get_cursor(0)local i=vim.api.nvim_get_current_line()if type(g)=="string"then local j=h[2]>0 and i:sub(h[2]+1):match(g)or nil;local k=i:sub(1,h[2]):reverse():match(g)k=k and k:reverse()or nil;local l=k and k..(j or"")or nil;local m=h[2]-(k and#k or 0)+1;return l,m,h[1]else local l=h[2]>0 and i:sub(1,h[2]+1)or""return l,1,h[1]end end;local function n(o,p)if not o or#o==0 then return"./",nil end;if vim.fn.isdirectory(vim.fn.expand(o))==1 then return o,p end;p=vim.fn.fnamemodify(o,":t")o=vim.fn.fnamemodify(o,":h")return n(o,p)end;local q=function(r)r=vim.tbl_deep_extend("keep",r or{},{cmp_match="[^%p%s]*",actions={default=d.complete_insert}})r.__fn_pre_fzf=function(s)s.cmp_mode=vim.api.nvim_get_mode().mode;s.cmp_string,s.cmp_string_col,s.cmp_string_row=f(s.cmp_match)end;return r end;local t=function(r)r=r or{}r.cmp_match=r.cmp_match or"[^%s\"']*"r._fn_pre_fzf=function(s)s.cwd,s.query=n(s.cmp_string,nil)s.prompt=s.cwd;if not b.ends_with_separator(s.prompt)then s.prompt=s.prompt..b.separator()end;s.cwd=vim.fn.expand(s.cwd)s.cmp_prefix=s.prompt end;r=q(r)return r end;local u=function(r)r=r or{}r.cmp_match=false;r.cmp_is_line=true;r._fn_pre_fzf=function(s)s.query=s.cmp_string end;r=q(r)return r end;e.fzf_complete=function(v,r)r=q(r)return a.fzf_exec(v,r)end;e.path=function(r)r=r or{}r.cmd=r.cmd or(function()if vim.fn.executable("fdfind")==1 then return"fdfind"elseif vim.fn.executable("fd")==1 then return"fd"elseif vim.fn.executable("rg")==1 then return"rg --files"else return[[find ! -path '.' ! -path '*/\.git/*' -printf '%P\n']]end end)()r=t(r)return a.fzf_exec(r.cmd,r)end;e.file=function(r)r=c.normalize_opts(r,c.globals.complete_file)if not r then return end;r.cmp_is_file=true;r.cmd=r.cmd or(function()if vim.fn.executable("rg")==1 then return"rg --files"elseif vim.fn.executable("fdfind")==1 then return"fdfind --type f --exclude .git"elseif vim.fn.executable("fd")==1 then return"fd --type f --exclude .git"else return[[find -type f ! -path '*/\.git/*' -printf '%P\n']]end end)()r=t(r)local v=a.mt_cmd_wrapper(r)return a.fzf_exec(v,r)end;e.line=function(r)r=c.normalize_opts(r,c.globals.complete_line)r=u(r)return require"fzf-lua.providers.buffers".lines(r)end;e.bline=function(r)r=c.normalize_opts(r,c.globals.complete_bline)r=u(r)return require"fzf-lua.providers.buffers".blines(r)end;return e
