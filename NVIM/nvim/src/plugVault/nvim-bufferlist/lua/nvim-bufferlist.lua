local a=vim.api;local b,c;local function d(e)local f=a.nvim_win_get_width(0)local g=math.floor(f/2)-math.floor(string.len(e)/2)return string.rep(' ',g)..e end;local function h()b=a.nvim_create_buf(false,true)local i=a.nvim_create_buf(false,true)a.nvim_buf_set_option(b,'bufhidden','wipe')a.nvim_buf_set_option(b,'filetype','bufferlist')local f=a.nvim_get_option("columns")local j=a.nvim_get_option("lines")local k=math.ceil(j*0.5-4)local l=math.ceil(f*0.4)local m=math.ceil((j-k)/2-1)local n=math.ceil((f-l)/2)local o={style='minimal',relative='editor',width=l+2,height=k+2,row=m-1,col=n-1}local p={style='minimal',relative='editor',width=l,height=k,row=m,col=n}local q=' Buffer List 'local r={'╭'..q..string.rep('─',l-string.len(q))..'╮'}local s='│'..string.rep(' ',l)..'│'for t=1,k do table.insert(r,s)end;table.insert(r,'╰'..string.rep('─',l)..'╯')a.nvim_buf_set_lines(i,0,-1,false,r)local u=a.nvim_open_win(i,true,o)c=a.nvim_open_win(b,true,p)a.nvim_command('au BufWipeout <buffer> exe "silent bwipeout! "'..i)a.nvim_win_set_option(c,'cursorline',true)end;local function v()a.nvim_buf_set_option(b,'modifiable',true)local w=vim.fn.execute(':ls')local x={}for y in string.gmatch(w,'([^\r\n]*)')do if string.match(y,'%d+')then if string.match(y,'%d+.-(a).-".-"')=='a'and string.match(y,'"(.-)"')~='[No Name]'then y=string.match(y,'"(.-)"')table.insert(x,"> "..y)else y=string.match(y,'"(.-)"')table.insert(x,y)end end end;a.nvim_buf_set_lines(b,0,-1,false,x)a.nvim_buf_set_option(b,'modifiable',false)end;local function z()a.nvim_win_close(c,true)end;local function A()local B=a.nvim_get_current_line()if string.match(B,'^> ')then B=string.match(B,'^> (.-)$')end;local w=vim.fn.execute(':ls')for y in string.gmatch(w,'([^\r\n]*)')do if string.match(y,'%d+')and string.match(y,'"(.-)"')==B then if string.match(y,'%d+.-(a).-".-"')=='a'then z()a.nvim_command('bd')else a.nvim_command('bd '..string.match(y,'%d+'))v()end end end end;local function C()local B=a.nvim_get_current_line()local w=vim.fn.execute(':ls')for y in string.gmatch(w,'([^\r\n]*)')do if string.match(y,'%d+')and string.match(y,'"(.-)"')==B then z()a.nvim_command('b '..string.match(y,'%d+'))end end end;local function D()local E=math.max(4,a.nvim_win_get_cursor(c)[1]-1)a.nvim_win_set_cursor(c,{E,0})end;local function F()local G={['<esc>']='close_window()',['<cr>']='go_to_buffer()',l='go_to_buffer()',h='close_buffer()',d='close_buffer()',q='close_window()'}for H,I in pairs(G)do a.nvim_buf_set_keymap(b,'n',H,':lua require"nvim-bufferlist".'..I..'<cr>',{nowait=true,noremap=true,silent=true})end;local J={'a','b','c','e','f','g','i','n','o','p','r','s','t','u','v','w','x','y','z'}for t,I in ipairs(J)do a.nvim_buf_set_keymap(b,'n',I,'',{nowait=true,noremap=true,silent=true})a.nvim_buf_set_keymap(b,'n',I:upper(),'',{nowait=true,noremap=true,silent=true})a.nvim_buf_set_keymap(b,'n','<c-'..I..'>','',{nowait=true,noremap=true,silent=true})end end;local function K()h()v()F()a.nvim_win_set_cursor(c,{1,0})end;return{bufferlist=K,update_view=v,go_to_buffer=C,close_buffer=A,move_cursor=D,close_window=z}
