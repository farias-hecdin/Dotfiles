local a=vim.api;local b={}local function c()vim.keymap.set("n","<Plug>(markdown_toggle_emphasis)",function()return require("markdown.opfunc")("markdown.inline","toggle_emphasis")end,{expr=true,silent=true,desc="Toggle emphasis around a motion"})vim.keymap.set("n","<Plug>(markdown_toggle_emphasis_line)",function()return"^"..tostring(vim.v.count1).."<Plug>(markdown_toggle_emphasis)g_"end,{expr=true,silent=true,desc="Toggle emphasis around a line"})vim.keymap.set("x","<Plug>(markdown_toggle_emphasis_visual)","<Esc>gv<Cmd>lua require'markdown.inline'.toggle_emphasis_visual()<CR>",{silent=true,desc="Toggle emphasis around a visual selection"})vim.keymap.set("n","<Plug>(markdown_delete_emphasis)","<Cmd>lua require'markdown.inline'.delete_surrounding_emphasis()<CR>",{silent=true,desc="Delete emphasis around the cursor"})vim.keymap.set("n","<Plug>(markdown_change_emphasis)","<Cmd>lua require'markdown.inline'.change_surrounding_emphasis()<CR>",{silent=true,desc="Change emphasis around the cursor"})vim.keymap.set("n","<Plug>(markdown_add_link)",function()return require("markdown.opfunc")("markdown.link","add")end,{expr=true,silent=true,desc="Add link around a motion"})vim.keymap.set("x","<Plug>(markdown_add_link_visual)","<Esc>gv<Cmd>lua require'markdown.link'.add_visual()<CR>",{silent=true,desc="Add link around a visual selection"})vim.keymap.set("n","<Plug>(markdown_follow_link)","<Cmd>lua require'markdown.link'.follow()<CR>",{silent=true,desc="Follow link under the cursor"})vim.keymap.set("n","<Plug>(markdown_follow_link_default_app)","<Cmd>lua require'markdown.link'.follow({ use_default_app = true })<CR>",{silent=true,desc="Follow link under the cursor using default app for non-markdown files"})vim.keymap.set("n","<Plug>(markdown_go_current_heading)","<Cmd>lua require'markdown.nav'.curr_heading()<CR>",{silent=true,desc="Set cursor to current section heading"})vim.keymap.set("n","<Plug>(markdown_go_parent_heading)","<Cmd>lua require'markdown.nav'.parent_heading()<CR>",{silent=true,desc="Set cursor to parent section heading"})vim.keymap.set("n","<Plug>(markdown_go_next_heading)","<Cmd>lua require'markdown.nav'.next_heading()<CR>",{silent=true,desc="Set cursor to next section heading"})vim.keymap.set("n","<Plug>(markdown_go_prev_heading)","<Cmd>lua require'markdown.nav'.prev_heading()<CR>",{silent=true,desc="Set cursor to previous section heading"})end;local d;local function e(f,g,h,i)a.nvim_buf_create_user_command(f,g,h,i)if d~=nil then table.insert(d[f].cmds,g)end end;local function j(f)for k=1,#d[f].cmds,1 do a.nvim_buf_del_user_command(f,d[f].cmds[k])end end;local function l(m,n,o,i)if not n then return end;vim.keymap.set(m,n,o,i)if d~=nil then table.insert(d[i.buffer].maps,{m,o})end end;local function p(f)local i=f~=nil and{buffer=f}or nil;for k=1,#d[f].maps,1 do local q=d[f].maps[k]vim.keymap.del(q[1],q[2],i)end end;local function r(f)local h=require("markdown.cmd")e(f,"MDInsertToc",h.insert_toc,{force=true,range=true,nargs="*"})e(f,"MDToc",h.show_toc,{force=true,nargs="?"})e(f,"MDTocAll",h.show_toc_all,{force=true,nargs="?"})local s=require("markdown.list")e(f,"MDListItemBelow",s.insert_list_item_below,{force=true})e(f,"MDListItemAbove",s.insert_list_item_above,{force=true})e(f,"MDResetListNumbering",h.reset_list_numbering,{force=true,range=true})e(f,"MDTaskToggle",h.toggle_task,{force=true,range=true})end;local function t(u,f)if u.mappings then l("n",u.mappings.inline_surround_toggle,"<Plug>(markdown_toggle_emphasis)",{buffer=f,desc="Toggle emphasis around a motion"})l("n",u.mappings.inline_surround_toggle_line,"<Plug>(markdown_toggle_emphasis_line)",{buffer=f,desc="Toggle emphasis around a line"})l("x",u.mappings.inline_surround_toggle,"<Plug>(markdown_toggle_emphasis_visual)",{buffer=f,desc="Toggle emphasis around a visual selection"})l("n",u.mappings.inline_surround_delete,"<Plug>(markdown_delete_emphasis)",{buffer=f,desc="Delete emphasis around the cursor"})l("n",u.mappings.inline_surround_change,"<Plug>(markdown_change_emphasis)",{buffer=f,desc="Change emphasis around the cursor"})l("n",u.mappings.link_add,"<Plug>(markdown_add_link)",{buffer=f,desc="Add link around a motion"})l("x",u.mappings.link_add,"<Plug>(markdown_add_link_visual)",{buffer=f,desc="Add link around a visual selection"})l("n",u.mappings.link_follow,"<Plug>(markdown_follow_link)",{buffer=f,desc="Follow link under the cursor"})l("n",u.mappings.go_curr_heading,"<Plug>(markdown_go_current_heading)",{buffer=f,desc="Set cursor to current section heading"})l("n",u.mappings.go_parent_heading,"<Plug>(markdown_go_parent_heading)",{buffer=f,desc="Set cursor to parent section heading"})l("n",u.mappings.go_next_heading,"<Plug>(markdown_go_next_heading)",{buffer=f,desc="Set cursor to next section heading"})l("n",u.mappings.go_prev_heading,"<Plug>(markdown_go_prev_heading)",{buffer=f,desc="Set cursor to previous section heading"})end end;local function v()local w=#a.nvim_get_runtime_file("parser/markdown.so",true)>0;local x=#a.nvim_get_runtime_file("parser/markdown_inline.so",true)>0;if not(w and x)then local y="Missing required tree-sitter parser:"if not w then y=y.." 'markdown'"end;if not x then y=y.." 'markdown_inline'"end;require("markdown.notify").error(y)return false end;return true end;local function z(f)a.nvim_buf_set_var(f,"markdown_nvim_attached",1)local u=require("markdown.config"):get()r(f)t(u,f)if u.link.paste.enable then local A=require("markdown.link")A.register_paste_handler()end;if u.on_attach~=nil then u.on_attach(f)end end;local B=a.nvim_create_augroup("markdown.nvim",{})function b.setup(u)if not v()then return end;require("markdown.config"):setup(u)a.nvim_clear_autocmds({group=B})a.nvim_create_autocmd("FileType",{group=B,pattern=vim.treesitter.language.get_filetypes("markdown"),callback=function(i)if vim.b.markdown_nvim_attached~=1 then z(i.buf)end end})for C,f in ipairs(vim.api.nvim_list_bufs())do if vim.api.nvim_buf_is_loaded(f)then vim.api.nvim_exec_autocmds("FileType",{group=B,buffer=f})end end end;function b.init()c()local D,E=pcall(require,"nvim-treesitter")if not D then return end;E.define_modules({markdown={attach=function(f,C)if not v()then return end;local F=require("nvim-treesitter.configs")local G=F.get_module("markdown")if G~=nil then require("markdown.config"):setup(G)end;if d==nil then d={}end;d[f]={cmds={},maps={}}z(f)end,detach=function(f)j(f)p(f)d[f]=nil end,is_supported=function(H)return H=="markdown"end}})end;return b
