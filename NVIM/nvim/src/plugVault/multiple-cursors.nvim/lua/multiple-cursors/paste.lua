local a={}local b=require("multiple-cursors.common")local c=require("multiple-cursors.virtual_cursors")local d=nil;local e=nil;function a.setup(f)d=f end;local function g(h,i)local j=i.col<b.get_max_col(i.lnum)vim.api.nvim_put(h,"c",true,true)if j then vim.cmd("normal! h")end end;local function k(h,i)vim.api.nvim_put(h,"c",false,true)end;local function l(h,i)if i.col==b.get_max_col(i.lnum)then vim.api.nvim_put(h,"c",false,false)else if#h~=1 then vim.cmd("normal! \"_D")vim.api.nvim_put(h,"c",true,false)else local m=#h[1]local n=b.get_length_of_line(i.lnum)-i.col+1;if m<n then vim.cmd("normal! \"_"..tostring(m).."dl")vim.api.nvim_put(h,"c",false,false)else vim.cmd("normal! \"_D")vim.api.nvim_put(h,"c",true,false)end end end end;local function o(h,i)lnum1,col1,lnum2,col2=i:get_normalised_visual_area()local p=col2>=b.get_max_col(lnum2)-1;b.normal_bang("_",0,"d",nil)local q=vim.fn.getcurpos()local r=q[3]>=b.get_max_col(q[2])if p and r then vim.api.nvim_put(h,"c",true,true)else vim.api.nvim_put(h,"c",false,true)vim.cmd("normal! h")end end;local function s(h)local t=d and c.can_split_paste(#h)if t then c.reorder_lines_for_split_pasting(h)end;if b.is_mode("v")then c.visual_mode(function(i,u)if t then o({h[u]},i)else o(h,i)end end)else local v=nil;local w=true;if b.is_mode("n")then v=g elseif b.is_mode("i")then v=k elseif b.is_mode("R")then v=l;w=false end;if v then c.edit_with_cursor_no_save(function(i,u)if t then v({h[u]},i)else v(h,i)end;if w then i:save_cursor_position()end end)end end;if t then return{h[#h]}else return h end end;function a.override_handler()e=vim.paste;vim.paste=(function(x)return function(h,y)return x(s(h),y)end end)(vim.paste)end;function a.revert_handler()vim.paste=e end;return a
