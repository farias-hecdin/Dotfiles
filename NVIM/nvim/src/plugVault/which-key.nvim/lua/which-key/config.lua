local a={}a.version="3.5.0"local b={preset="classic",delay=function(c)return c.plugin and 0 or 200 end,filter=function(d)return true end,spec={},notify=true,modes={n=true,i=true,x=true,s=true,o=true,t=true,c=true,defer={["<C-V>"]=true,V=true}},plugins={marks=true,registers=true,spelling={enabled=true,suggestions=20},presets={operators=true,motions=true,text_objects=true,windows=true,nav=true,z=true,g=true}},win={no_overlap=true,padding={1,2},title=true,title_pos="center",zindex=1000,bo={},wo={}},layout={width={min=20},spacing=3,align="left"},keys={scroll_down="<c-d>",scroll_up="<c-u>"},sort={"local","order","group","alphanum","mod"},expand=0,replace={key={function(e)return require("which-key.view").format(e)end},desc={{"<Plug>%(?(.*)%)?","%1"},{"^%+",""},{"<[cC]md>",""},{"<[cC][rR]>",""},{"<[sS]ilent>",""},{"^lua%s+",""},{"^call%s+",""},{"^:%s*",""}}},icons={breadcrumb="»",separator="➜",group="+",ellipsis="…",mappings=true,rules={},colors=true,keys={Up=" ",Down=" ",Left=" ",Right=" ",C="󰘴 ",M="󰘵 ",D="󰘳 ",S="󰘶 ",CR="󰌑 ",Esc="󱊷 ",ScrollWheelDown="󱕐 ",ScrollWheelUp="󱕑 ",NL="󰌑 ",BS="󰁮",Space="󱁐 ",Tab="󰌒 ",F1="󱊫",F2="󱊬",F3="󱊭",F4="󱊮",F5="󱊯",F6="󱊰",F7="󱊱",F8="󱊲",F9="󱊳",F10="󱊴",F11="󱊵",F12="󱊶"}},show_help=true,show_keys=true,triggers=true,disable={ft={},bt={},trigger=function(c)return false end},debug=false}a.loaded=false;a.mappings={}a.options=nil;function a.deprecated()return vim.tbl_filter(function(f)return a.options[f]~=nil end,{"operators","key_labels","motions","popup_mappings","window","ignore_missing","hidden","triggers_nowait","triggers_blacklist"})end;function a.setup(g)if vim.fn.has("nvim-0.9.4")==0 then return vim.notify("which-key.nvim requires Neovim >= 0.9.4",vim.log.levels.ERROR)end;a.options=vim.tbl_deep_extend("force",{},b,g or{})local function h()if a.loaded then return end;local i=require("which-key.util")if a.options.preset then local j=require("which-key.presets")a.options=vim.tbl_deep_extend("force",{},b,j[a.options.preset]or{},g or{})end;if#a.deprecated()>0 then i.warn({"Your config uses deprecated options.","Use `:checkhealth which-key` to find out more."},{once=true})end;if a.options.debug then i.debug("\n\nDebug Started for v"..a.version)end;local k=require("which-key")k.add=a.add;require("which-key.plugins").setup()for l,m in ipairs(k._queue)do a.add(m.spec,m.opts)end;k._queue={}a.add(a.options.spec)require("which-key.colors").setup()require("which-key.state").setup()a.loaded=true end;h=vim.schedule_wrap(h)if vim.v.vim_did_enter==1 then h()else vim.api.nvim_create_autocmd("VimEnter",{once=true,callback=h})end;vim.api.nvim_create_user_command("WhichKey",function(n)local o,p=n.args:match("^([nixsotc]?)%s*(.*)$")if not o then return require("which-key.util").error("Usage: WhichKey [mode] [keys]")end;if o==""then o="n"end;require("which-key").show({mode=o,keys=p})end,{nargs="*"})end;function a.add(q,g)g=g or{}g.create=g.create~=false;local r=require("which-key.mappings")for l,s in ipairs(r.parse(q,g))do table.insert(a.mappings,s)s.idx=#a.mappings end;if a.loaded then require("which-key.buf").clear()end end;return setmetatable(a,{__index=function(l,f)if rawget(a,"options")==nil then a.setup()end;local g=rawget(a,"options")return f=="options"and g or g[f]end})
