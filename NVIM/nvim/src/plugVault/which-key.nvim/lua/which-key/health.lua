local a=require("which-key.buf")local b=require("which-key.config")local c=require("which-key.icons")local d=require("which-key.mappings")local e=require("which-key.migrate")local f=require("which-key.tree")local g={}local h=vim.health.start or vim.health.report_start;local i=vim.health.ok or vim.health.report_ok;local j=vim.health.warn or vim.health.report_warn;local k=vim.health.error or vim.health.report_error;local l=vim.health.info or vim.health.report_info;function g.check()i("Most of these checks are for informational purposes only.\n".."WARNINGS should be treated as a warning, and don't necessarily indicate a problem with your config.\n".."Please |DON't| report these warnings as an issue.")h("Checking your config")local m=b.deprecated()if#m>0 then local n={"Your config uses deprecated options:"}vim.list_extend(n,vim.tbl_map(function(o)return"- `"..o.."`"end,m))n[#n+1]="Please refer to the docs for more info."j(table.concat(n,"\n"))end;local p=false;for q,r in ipairs(c.providers)do if r.available==nil then r.available=pcall(require,r.name)end;if r.available then i("|"..r.name.."| is installed")p=true else j("|"..r.name.."| is not installed")end end;if not p then j("Keymap icon support will be limited.")end;h("Checking for issues with your mappings")if#d.notifs==0 then i("No issues reported")end;for q,s in ipairs(d.notifs)do local n=s.msg;if s.spec then n=n..": >\n"..vim.inspect(s.spec)if n:find("old version")then local t=e.migrate(s.spec)n=n.."\n\n-- Suggested Spec:\n"..t end end(s.level>=vim.log.levels.ERROR and k or j)(n)end;h("checking for overlapping keymaps")local u=false;a.cleanup()local v={}local w=vim.split("nixsotc","")for q,x in pairs(a.bufs)do for q,y in ipairs(w)do local z=x:get({mode=y})if z then z.tree:walk(function(A)local B=A.keymap;if not B or B.rhs==""or B.rhs=="<Nop>"or A.keys:sub(1,6)=="<Plug>"then return end;if A.keymap and f.is_group(A)then local C=z.mode..":"..A.keys;if v[C]then return end;v[C]=true;local D={}local E={}if A.desc and A.desc~=""then E[#E+1]="- <"..A.keys..">: "..A.desc end;local F=vim.tbl_values(A.children)while#F>0 do local G=table.remove(F)if G.keymap then table.insert(D,"<"..G.keys..">")if G.desc and G.desc~=""then E[#E+1]="- <"..G.keys..">: "..G.desc end end;vim.list_extend(F,vim.tbl_values(G.children or{}))end;if#D>0 then u=true;j("In mode `"..z.mode.."`, <"..A.keys.."> overlaps with "..table.concat(D,", ")..":\n"..table.concat(E,"\n"))end;return false end end)end end end;if u then i("Overlapping keymaps are only reported for informational purposes.\n".."This doesn't necessarily mean there is a problem with your config.")else i("No overlapping keymaps found")end;h("Checking for duplicate mappings")if vim.tbl_isempty(f.dups)then i("No duplicate mappings found")else for q,H in pairs(f.dups)do H=vim.tbl_keys(H)local I=H[1]j("Duplicates for <"..I.lhs.."> in mode `"..I.mode.."`:\n"..table.concat(vim.tbl_map(function(J)J=vim.deepcopy(J)local K=J.desc and J.desc..": "or""J.desc=nil;J.idx=nil;J.mode=nil;J.lhs=nil;return"* "..K.."`"..vim.inspect(J):gsub("%s+"," ").."`"end,H),"\n"))end;i("Duplicate mappings are only reported for informational purposes.\n".."This doesn't necessarily mean there is a problem with your config.")end end;return g
