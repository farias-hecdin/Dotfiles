local a=require("which-key.config")local b={}local c=vim.fn.strdisplaywidth;function b.dim(d,e,...)d=math.abs(d)<1 and e*d or d;d=d<0 and e+d or d;for f,g in ipairs({...})do if type(g)=="number"then d=b.dim(g,e)else local h=g.min and b.dim(g.min,e)or 0;local i=g.max and b.dim(g.max,e)or e;d=math.max(h,math.min(i,d))end end;return math.floor(math.max(0,math.min(e,d))+0.5)end;local j={}j.__index=j;function j.new(k)local self=setmetatable({},j)self.cols=k.cols;self.rows=k.rows;return self end;function j:cells(k)k=k or{}k.spacing=k.spacing or 1;local l={}local m={}local n=0;for o,p in ipairs(self.cols)do l[o]=0;local q=true;for r,s in ipairs(self.rows)do m[r]=m[r]or{}local t=s[p.key]or p.default or""t=tostring(t)t=t:gsub("%s*$","")t=t:gsub("\n",a.icons.keys.NL)t=vim.fn.strtrans(t)if t:find("%S")then q=false end;if p.padding then t=(" "):rep(p.padding[1]or 0)..t..(" "):rep(p.padding[2]or 0)end;if o~=#self.cols then t=t..(" "):rep(k.spacing)end;m[r][o]=t;l[o]=math.max(l[o],c(t))end;if q then l[o]=0;for f,u in pairs(m)do u[o]=""end end;n=n+l[o]end;return m,l,n end;function j:layout(k)local m,l=self:cells(k)local v=k.width;for o,p in ipairs(self.cols)do if not p.width then v=v-l[o]end end;v=math.max(v,0)for o,p in ipairs(self.cols)do if p.width then l[o]=b.dim(l[o],v,{max=p.width})v=v-l[o]end end;local w={}for f,s in ipairs(m)do local x={}for o,p in ipairs(self.cols)do local t=s[o]local y=c(t)if y>l[o]then local z=t;t=""for A=0,vim.fn.strchars(z)do t=t..vim.fn.strcharpart(z,A,1)if c(t)>=l[o]-1-(k.spacing or 1)then break end end;t=t..a.icons.ellipsis..string.rep(" ",k.spacing or 1)else local B=p.align or"left"if B=="left"then t=t..(" "):rep(l[o]-y)elseif B=="right"then t=(" "):rep(l[o]-y)..t elseif B=="center"then local C=(l[o]-y)/2;t=(" "):rep(math.floor(C))..t..(" "):rep(math.ceil(C))end end;x[#x+1]={value=t,hl=p.hl}end;w[#w+1]=x end;return w end;b.new=j.new;return b
