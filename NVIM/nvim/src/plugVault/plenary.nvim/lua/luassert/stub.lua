local a=require'luassert.assert'local b=require'luassert.spy'local c=require'luassert.util'local d=c.unpack;local e=c.pack;local f={}function f.new(g,h,...)if g==nil and h==nil then g={}h=""end;local i=e(...)a(type(g)=="table"and h~=nil,"stub.new(): Can only create stub on a table key, call with 2 params; table, key",c.errorlevel())a(g[h]==nil or c.callable(g[h]),"stub.new(): The element for which to create a stub must either be callable, or be nil",c.errorlevel())local j=g[h]local k=i.n==1 and c.callable(i[1])and i[1]local l=k or function()return d(i)end;local m={}local n={}local o=function(...)local p=c.make_arglist(...)local q=c.matchoncalls(m,p)if q then return n[q](...)end;return l(...)end;g[h]=o;local r=b.on(g,h)local s=r.revert;r.revert=function(self)if not self.reverted then s(self)g[h]=j;self.reverted=true end;return j end;r.returns=function(...)local t=e(...)l=function()return d(t)end;return r end;r.invokes=function(u)l=function(...)return u(...)end;return r end;r.by_default={returns=r.returns,invokes=r.invokes}r.on_call_with=function(...)local v=c.make_arglist(...)v=c.copyargs(v)return{returns=function(...)local t=e(...)table.insert(m,v)n[v]=function()return d(t)end;return r end,invokes=function(u)table.insert(m,v)n[v]=function(...)return u(...)end;return r end}end;return r end;local function w(x,y)x.payload=y[1]x.failure_message=y[2]end;a:register("modifier","stub",w)return setmetatable(f,{__call=function(self,...)return f.new(...)end})
