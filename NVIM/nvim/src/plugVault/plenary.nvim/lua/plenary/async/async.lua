local a=coroutine;local b=require"plenary.vararg"local c=require"plenary.errors"local d=c.traceback_error;local e=require"plenary.functional"local f={}local function g(h)return type(h)=="function"or type(h)=="table"and type(getmetatable(h)["__call"])=="function"end;local function i(j,k,l,...)local m=e.first(...)if not m then error(string.format("The coroutine failed with this message: %s",e.second(...)))end;if a.status(k)=="dead"then if l==nil then return end;l(select(2,...))else local n=e.second(...)local o=e.third(...)assert(g(n),"type error :: expected func")n(b.rotate(o,j,select(4,...)))end end;local p=function(q,l,...)assert(g(q),"type error :: expected func")local k=a.create(q)local j;j=function(...)i(j,k,l,a.resume(k,...))end;j(...)end;local r;do _PlenaryLeafTable=setmetatable({},{__mode="k"})r=function(s,t)assert(_PlenaryLeafTable[s]==nil,"Async function should not already be in the table")_PlenaryLeafTable[s]=t end;function f.is_leaf_function(s)return _PlenaryLeafTable[s]~=nil end;function f.get_leaf_function_argc(s)return _PlenaryLeafTable[s]end end;f.wrap=function(u,t)if not g(u)then d("type error :: expected func, got "..type(u))end;if type(t)~="number"then d("type error :: expected number, got "..type(t))end;local function v(...)local o=select("#",...)if o==t then return u(...)else return a.yield(u,t,...)end end;r(v,t)return v end;f.run=function(q,l)if f.is_leaf_function(q)then q(l)else p(q,l)end end;f.void=function(u)return function(...)p(u,nil,...)end end;return f
