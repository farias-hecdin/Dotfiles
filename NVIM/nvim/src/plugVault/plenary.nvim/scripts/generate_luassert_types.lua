require"luassert"local a=require"luassert.namespaces"local b={"and","break","do","else","elseif","end","false","for","function","if","in","local","nil","not","or","repeat","return","then","true","until","while"}local c={"---@meta","---This file is autogenerated, DO NOT EDIT",'error "Cannot require a meta file"',"","---@generic T:any","---@alias LuassertFunction fun(value:T, message?:string):T","---@alias LuassertFunctionTwoArgs fun(expected:T, actual:T, message?:string):T","---@alias LuassertFunctionMultiArgs fun(...:T):T","","---@class Luassert"}local d={matches=2,match=2,equal=2,equals=2,same=2,error_match=2,error_matches=2,matches_error=2,match_error=2,near=3}local e=function(f)local g=d[f]or 1;if g==1 then return"LuassertFunction"end;if g==2 then return"LuassertFunctionTwoArgs"end;return"LuassertFunctionMultiArgs"end;local h=function(i)if vim.tbl_contains(b,i)then return table.concat{i:sub(1,1):upper(),i:sub(2)}end;return i end;local j=vim.tbl_keys(a.assertion)local k=vim.tbl_keys(a.modifier)table.sort(j)table.sort(k)for l,m in ipairs(k)do for l,f in ipairs(j)do table.insert(c,("---@field %s_%s %s"):format(m,f,e(f)))end end;for l,f in ipairs(j)do table.insert(c,("---@field %s %s"):format(h(f),e(f)))end;for l,m in ipairs(k)do table.insert(c,("---@field %s Luassert"):format(h(m)))end;local n=assert(vim.loop.fs_open("./lua/plenary/_meta/_luassert.lua","w",438))assert(vim.loop.fs_write(n,table.concat(c,"\n"),0))assert(vim.loop.fs_close(n))
