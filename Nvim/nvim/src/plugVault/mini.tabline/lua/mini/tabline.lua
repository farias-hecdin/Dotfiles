local a={}local b={}a.setup=function(c)_G.MiniTabline=a;c=b.setup_config(c)b.apply_config(c)vim.api.nvim_exec([[function! MiniTablineSwitchBuffer(buf_id, clicks, button, mod)
        execute 'buffer' a:buf_id
      endfunction]],false)b.create_default_hl()end;a.config={show_icons=true,format=nil,set_vim_settings=true,tabpage_section='left'}a.make_tabline_string=function()if b.is_disabled()then return''end;b.make_tabpage_section()b.list_tabs()b.finalize_labels()b.fit_width()return b.concat_tabs()end;a.default_format=function(d,e)if b.get_icon==nil then return string.format(' %s ',e)end;return string.format(' %s %s ',b.get_icon(e),e)end;b.default_config=vim.deepcopy(a.config)b.tabs={}b.tablineat=vim.fn.has('tablineat')b.unnamed_buffers_seq_ids={}b.path_sep=package.config:sub(1,1)b.tabpage_section=''b.center_buf_id=nil;b.setup_config=function(c)vim.validate({config={c,'table',true}})c=vim.tbl_deep_extend('force',vim.deepcopy(b.default_config),c or{})vim.validate({show_icons={c.show_icons,'boolean'},format={c.format,'function',true},set_vim_settings={c.set_vim_settings,'boolean'},tabpage_section={c.tabpage_section,'string'}})return c end;b.apply_config=function(c)a.config=c;if c.set_vim_settings then vim.o.showtabline=2;vim.o.hidden=true end;vim.o.tabline='%!v:lua.MiniTabline.make_tabline_string()'end;b.create_default_hl=function()local f=function(g,h)h.default=true;vim.api.nvim_set_hl(0,g,h)end;f('MiniTablineCurrent',{link='TabLineSel'})f('MiniTablineVisible',{link='TabLineSel'})f('MiniTablineHidden',{link='TabLine'})f('MiniTablineModifiedCurrent',{link='StatusLine'})f('MiniTablineModifiedVisible',{link='StatusLine'})f('MiniTablineModifiedHidden',{link='StatusLineNC'})f('MiniTablineTabpagesection',{link='Search'})f('MiniTablineFill',{link='Normal'})end;b.is_disabled=function()return vim.g.minitabline_disable==true or vim.b.minitabline_disable==true end;b.get_config=function(c)return vim.tbl_deep_extend('force',a.config,vim.b.minitabline_config or{},c or{})end;b.make_tabpage_section=function()local i=vim.fn.tabpagenr('$')if i==1 or b.get_config().tabpage_section=='none'then b.tabpage_section=''return end;local j=vim.fn.tabpagenr()b.tabpage_section=(' Tab %s/%s '):format(j,i)end;b.list_tabs=function()local k={}for l,d in ipairs(vim.api.nvim_list_bufs())do if b.is_buffer_in_minitabline(d)then local m={buf_id=d}m['hl']=b.construct_highlight(d)m['tabfunc']=b.construct_tabfunc(d)m['label'],m['label_extender']=b.construct_label_data(d)table.insert(k,m)end end;b.tabs=k end;b.is_buffer_in_minitabline=function(d)return vim.bo[d].buflisted end;b.construct_highlight=function(d)local n;if d==vim.api.nvim_get_current_buf()then n='Current'elseif vim.fn.bufwinnr(d)>0 then n='Visible'else n='Hidden'end;if vim.bo[d].modified then n='Modified'..n end;return string.format('%%#MiniTabline%s#',n)end;b.construct_tabfunc=function(d)if b.tablineat>0 then return string.format('%%%d@MiniTablineSwitchBuffer@',d)else return''end end;b.construct_label_data=function(d)local e,o;local p=vim.api.nvim_buf_get_name(d)if p~=''then e=vim.fn.fnamemodify(p,':t')o=b.make_path_extender(d)else e=b.make_unnamed_label(d)o=function(q)return q end end;return e,o end;b.make_path_extender=function(d)return function(e)local r=vim.api.nvim_buf_get_name(d)local s=string.format('[^%s]+%s%s$',vim.pesc(b.path_sep),vim.pesc(b.path_sep),vim.pesc(e))return string.match(r,s)or e end end;b.make_unnamed_label=function(d)local e;if vim.bo[d].buftype=='quickfix'then e='*quickfix*'else e=b.is_buffer_scratch(d)and'!'or'*'end;local t=b.get_unnamed_id(d)if t>1 then e=string.format('%s(%d)',e,t)end;return e end;b.is_buffer_scratch=function(d)local u=vim.bo[d].buftype;return u=='acwrite'or u=='nofile'end;b.get_unnamed_id=function(d)local v=b.unnamed_buffers_seq_ids[d]if v~=nil then return v end;b.unnamed_buffers_seq_ids[d]=vim.tbl_count(b.unnamed_buffers_seq_ids)+1;return b.unnamed_buffers_seq_ids[d]end;b.finalize_labels=function()local w=b.get_nonunique_tab_ids()while#w>0 do local x=true;for l,d in ipairs(w)do local m=b.tabs[d]local y=m.label;m.label=m.label_extender(m.label)if y~=m.label then x=false end end;if x then break end;w=b.get_nonunique_tab_ids()end;local c=b.get_config()b.ensure_get_icon(c)local z=c.format or a.default_format;for l,m in pairs(b.tabs)do m.label=z(m.buf_id,m.label)end end;b.get_nonunique_tab_ids=function()local A={}for B,m in ipairs(b.tabs)do local e=m.label;if A[e]==nil then A[e]={B}else table.insert(A[e],B)end end;return b.tbl_flatten(vim.tbl_filter(function(q)return#q>1 end,A))end;b.fit_width=function()b.update_center_buf_id()local C=1;local D=0;for l,m in pairs(b.tabs)do m.label_width=vim.api.nvim_strwidth(m.label)m.chars_on_left=D;D=D+m.label_width;if m.buf_id==b.center_buf_id then C=D end end;local E=b.compute_display_interval(C,D)b.truncate_tabs_display(E)end;b.update_center_buf_id=function()local F=vim.api.nvim_get_current_buf()if b.is_buffer_in_minitabline(F)then b.center_buf_id=F end end;b.compute_display_interval=function(C,G)local D=vim.o.columns-vim.api.nvim_strwidth(b.tabpage_section)local H=math.min(G,math.floor(C+0.5*D))local I=math.max(1,H-D+1)H=I+math.min(D,G)-1;return{I,H}end;b.truncate_tabs_display=function(E)local J,K=E[1],E[2]local k={}for l,m in ipairs(b.tabs)do local L=m.chars_on_left+1;local M=m.chars_on_left+m.label_width;if J<=M and L<=K then local N=math.max(0,J-L)local O=math.max(0,M-K)m.label=vim.fn.strcharpart(m.label,N,m.label_width-O)table.insert(k,m)end end;b.tabs=k end;b.concat_tabs=function()local P={}for l,m in ipairs(b.tabs)do table.insert(P,('%s%s%s'):format(m.hl,m.tabfunc,m.label:gsub('%%','%%%%')))end;local Q=('%s%%X%%#MiniTablineFill#'):format(table.concat(P,''))local R=b.get_config().tabpage_section;if b.tabpage_section~=''then if R=='left'then Q=('%%#MiniTablineTabpagesection#%s%s'):format(b.tabpage_section,Q)end;if R=='right'then Q=('%s%%=%%#MiniTablineTabpagesection#%s'):format(Q,b.tabpage_section)end end;return Q end;b.ensure_get_icon=function(c)if not c.show_icons then b.get_icon=nil elseif b.get_icon~=nil then return elseif _G.MiniIcons~=nil then b.get_icon=function(g)return _G.MiniIcons.get('file',g)end else local S,T=pcall(require,'nvim-web-devicons')if not S then return end;b.get_icon=function(g)return T.get_icon(g,nil,{default=true})end end end;b.tbl_flatten=vim.fn.has('nvim-0.10')==1 and function(q)return vim.iter(q):flatten(math.huge):totable()end or vim.tbl_flatten;return a
