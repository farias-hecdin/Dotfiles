local a={}local b={}a.setup=function(c)_G.MiniCursorword=a;c=b.setup_config(c)b.apply_config(c)b.create_autocommands()b.create_default_hl()end;a.config={delay=100}b.default_config=vim.deepcopy(a.config)b.timer=vim.loop.new_timer()b.window_matches={}b.setup_config=function(c)vim.validate({config={c,'table',true}})c=vim.tbl_deep_extend('force',vim.deepcopy(b.default_config),c or{})vim.validate({delay={c.delay,'number'}})return c end;b.apply_config=function(c)a.config=c;for d,e in ipairs(vim.fn.getmatches())do if vim.startswith(e.group,'MiniCursorword')then vim.fn.matchdelete(e.id)end end end;b.create_autocommands=function()local f=vim.api.nvim_create_augroup('MiniCursorword',{})local g=function(h,i,j,k)vim.api.nvim_create_autocmd(h,{group=f,pattern=i,callback=j,desc=k})end;g('CursorMoved','*',b.auto_highlight,'Auto highlight cursorword')g({'InsertEnter','TermEnter','QuitPre'},'*',b.auto_unhighlight,'Auto unhighlight cursorword')g('ModeChanged','*:[^i]',b.auto_highlight,'Auto highlight cursorword')g('ColorScheme','*',b.create_default_hl,'Ensure proper colors')g('FileType','TelescopePrompt',function()vim.b.minicursorword_disable=true end,'Disable locally')end;b.create_default_hl=function()vim.api.nvim_set_hl(0,'MiniCursorword',{default=true,underline=true})vim.api.nvim_set_hl(0,'MiniCursorwordCurrent',{default=true,link='MiniCursorword'})end;b.is_disabled=function()return vim.g.minicursorword_disable==true or vim.b.minicursorword_disable==true end;b.get_config=function(c)return vim.tbl_deep_extend('force',a.config,vim.b.minicursorword_config or{},c or{})end;b.auto_highlight=function()b.timer:stop()if not b.should_highlight()then return b.unhighlight()end;local l=vim.api.nvim_get_current_win()local m=b.window_matches[l]or{}local n=b.get_cursor_word()if m.word==n then b.unhighlight(true)b.highlight(true)return end;b.unhighlight()b.timer:start(b.get_config().delay,0,vim.schedule_wrap(function()b.unhighlight()b.highlight()end))end;b.auto_unhighlight=function()b.timer:stop()b.unhighlight()end;b.highlight=function(o)local l=vim.api.nvim_get_current_win()if not vim.api.nvim_win_is_valid(l)then return end;if not b.should_highlight()then return end;b.window_matches[l]=b.window_matches[l]or{}local p=[[\k*\%#\k*]]local q=vim.fn.matchadd('MiniCursorwordCurrent',p,-1)b.window_matches[l].id_current=q;if o or b.window_matches[l].id~=nil then return end;local n=b.get_cursor_word()local i=string.format([[\(%s\)\@!\&\V\<%s\>]],p,n)local r=vim.fn.matchadd('MiniCursorword',i,-1)b.window_matches[l].id=r;b.window_matches[l].word=n end;b.unhighlight=function(o)local l=vim.api.nvim_get_current_win()local m=b.window_matches[l]if not vim.api.nvim_win_is_valid(l)or m==nil then return end;pcall(vim.fn.matchdelete,m.id_current)b.window_matches[l].id_current=nil;if not o then pcall(vim.fn.matchdelete,m.id)b.window_matches[l]=nil end end;b.should_highlight=function()return not b.is_disabled()and b.is_cursor_on_keyword()end;b.is_cursor_on_keyword=function()local s=vim.fn.col('.')local t=vim.api.nvim_get_current_line():sub(s,s)local u,v=pcall(vim.fn.match,t,'[[:keyword:]]')return u and v>=0 end;b.get_cursor_word=function()return vim.fn.escape(vim.fn.expand('<cword>'),[[\/]])end;return a
