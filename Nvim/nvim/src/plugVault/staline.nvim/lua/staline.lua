local a={}local b;local c=require("staline.config")local d=require("staline.utils")local e=d.colorize;local f=c.defaults;local g=c.slots;local h=vim.fn.has('win32')==1 and"nul"or"/dev/null"local i=function()for j,k in pairs(vim.api.nvim_list_wins())do if vim.api.nvim_get_current_win()==k then vim.wo[k].statusline='%!v:lua.require\'staline\'.get_statusline("active")'elseif vim.api.nvim_buf_get_name(0)~=""then vim.wo[k].statusline='%!v:lua.require\'staline\'.get_statusline()'end end end;local l=function()local m=io.popen('git branch --show-current 2>'..h)local n=''if m~=nil then n=m:read("*l")or m:read("*a")m:close()end;a.Branch_name=n~=""and f.branch_symbol..n or""end;a.setup=function(o)if b then return else b=true end;for p,j in pairs(o or{})do for q,r in pairs(o[p])do c[p][q]=r end end;vim.api.nvim_create_autocmd('BufEnter',{callback=l})vim.api.nvim_create_autocmd({'BufEnter','BufReadPost','ColorScheme','TabEnter','TabClosed'},{callback=i})end;local s=function(t,u)e('Staline',t,u,f.font_active)e('StalineFill',f.fg,t,f.font_active)e('StalineNone',nil,u)e('DoubleSep',t,f.inactive_color)e('MidSep',f.inactive_color,u)end;local v=function()local w=""for type,x in pairs(c.lsp_symbols)do local y=#vim.diagnostic.get(0,{severity=type})local z=f.true_colors and"%#DiagnosticSign"..type.."#"or" "local A=y>0 and z..x..y.." "or""w=w..A end;return w end;local B=function()local C=require('null-ls').get_sources()local D={}for j,E in pairs(C)do if E.filetypes[vim.bo.ft]then if not vim.tbl_contains(D,E.name)then table.insert(D,E.name)end end end;return D end;local F=function()local G={}local H=""local I=f.lsp_client_symbol;local J=f.lsp_client_character_length;for j,K in pairs(vim.lsp.get_active_clients())do if f.expand_null_ls then if K.name=='null-ls'then for j,E in pairs(B())do G[#G+1]=E..f.null_ls_symbol end else G[#G+1]=K.name end else G[#G+1]=K.name end end;H=table.concat(G,', ')if J<=0 then return I..H else local L=string.len(H)local M=""if L>=J then M=string.sub(H,1,J)M=#G..":("..M.."...)"return I..M elseif L==0 then return I..#G..":(".."LSP"..")"else return I..#G..":("..H..")"end end end;local N=function(O)local P=type(O)if P=='string'then if string.match(O,"^-")then O=O:match("^-(.+)")return"%#StalineFill#"..(a.sections[O]or O)else return"%#Staline#"..(a.sections[O]or O)end elseif P=='function'then local Q=O()if type(Q)=="string"then return Q elseif type(Q)=="table"then return"%#"..Q[1].."#"..Q[2]end elseif P=='table'then if#O==1 then return O[1]elseif#O==2 then if type(O[2])=='string'then return"%#"..O[1].."#"..(a.sections[O[2]]or O[2])elseif type(O[2])=='function'then return"%#"..O[1].."#"..O[2]()end end else vim.api.nvim_err_writeln("[staline.nvim]: Section format error!")end end;a.get_statusline=function(R)if c.special_table[vim.bo.ft]~=nil then local S=c.special_table[vim.bo.ft]return"%#Staline#%="..S[2]..S[1].."%="end;a.sections={}local T=vim.api.nvim_get_mode()['mode']local U=R and c.mode_colors[T]or f.inactive_color;local V=R and f.bg or f.inactive_bgcolor;local W=c.mode_icons[T]or"ïŸ› "local X=f.full_path and'%F'or'%t'local Y=d.get_file_icon(vim.fn.expand('%:t'),vim.fn.expand('%:e'))local Z=vim.bo.mod and f.mod_symbol or""local _=("%.1f"):format(vim.fn.getfsize(vim.api.nvim_buf_get_name(0))/1024)s(U,V)if c.slots~=nil then for a0,a1 in pairs(g)do if type(a1)~="function"then a.sections[a0]=tostring(a1)else a.sections[a0]=a1()end end end;a.sections['mode']=" "..W.." "a.sections['branch']=" "..(a.Branch_name or"").." "a.sections['file_name']=" "..Y.." "..X..Z.." "a.sections['file_size']=" ".._.."k "a.sections['cool_symbol']=" "..f.cool_symbol.." "a.sections['line_column']=" "..f.line_column.." "a.sections['left_sep']=f.left_separator;a.sections['right_sep']=f.right_separator;a.sections['left_sep_double']="%#DoubleSep#"..f.left_separator.."%#MidSep#"..f.left_separator;a.sections['right_sep_double']="%#MidSep#"..f.right_separator.."%#DoubleSep#"..f.right_separator;a.sections['lsp']=v()a.sections['diagnostics']=v()a.sections['lsp_name']=F()a.sections['cwd']=" "..vim.fn.fnamemodify(vim.fn.getcwd(),':t').." "local a2=""local a3=R and'sections'or'inactive_sections'for j,a4 in ipairs({'left','mid','right'})do if c[a3]['left'][1]==nil then c[a3]['left'][1]=' 'end;for j,O in pairs(c[a3][a4])do a2=a2 ..N(O).."%#StalineNone#"end;if a4~='right'then a2=a2 .."%="end end;return a2 end;return a
