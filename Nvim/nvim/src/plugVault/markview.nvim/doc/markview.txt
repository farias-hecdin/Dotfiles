*markview.nvim*                  An experimental markdown previewer for Neovim
							 
					   ┏──────────────────────────────┓
					   │ ✨ Markview.nvim             │
					   │━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━│
					   │ An experimental markdown     │
					   │ previewer for neovim.        │
					   │                              │
					   │    ◈ ✔ Close to full render. │
					   │    ◈ ✔ Hybrid mode.          │
					   │    ◈ ✔ Fast. even on large   │
					   │        files.                │
					   ┗──────────────────────────────┛

								 By `OXY2DEV`

==============================================================================
Table of contents                                        *markview.nvim-toc*

Features ............................................ |markview.nvim-features|
Requirements .................................... |markview.nvim-requirements|
Installation .................................... |markview.nvim-installation|
	💤 Lazy.nvim ...................................... |markview.nvim-i-lazy|
	🦠 Mini.deps .................................. |markview.nvim-i-minideps|
	🌒 Rocks.nvim .................................... |markview.nvim-i-rocks|
Highlight groups ......................................... |markview.nvim-hls|
Commands ............................................ |markview.nvim-commands|
Plugin configuration .................................. |markview.nvim-config|
Helper functions ..................................... |markview.nvim-helpers|

==============================================================================
Features                                            *markview.nvim-features*

- Fully stylized preview of `markdown` documents! Currently supported elements
  are,
    * atx_headings(uses `#`) & setext_headings(uses `---` or `===`)
	* inline codes
	* code blocks
	* block quotes & callouts/alerts!
	* list items(both ordered & unordered).
	* tables(supports elements within the tables)
	* hyperlinks, image links & email urls(supports content bases
	  customisation).
	* horizontal rules.
	* checkboxes(supports custom states too!)
	* html elements(basic).
	* html entities.

- Fully customisable elements. From icons, highlight groups to concealments,
  padding almost everything can be customised.
- `Dynamically` generated highlight groups. Useful for colorschemes that don't
  support various highlight groups.
  Note: The plugin will respect highlight groups set by the colorschemes
  when available.
- `Hybrid-mode` for editing and previewing at the same time.
- Commands to quickly toggle the plugin(globally or per buffer).

And so much more!

==============================================================================
Requirements                                    *markview.nvim-requirements*

- Neovim version `0.10.0` or higher.
- `Tree-sitter` parser for `markdown`, `markdown_inline` & `html`.
- `nvim-web-devicons`
- Optionally, a `tree-sitter` compatible colorscheme.

==============================================================================
Installation                                    *markview.nvim-installation*

`markview.nvim` can be installed via your favourite package manager.

------------------------------------------------------------------------------
💤 Lazy.nvim                                          *markview.nvim-i-lazy*

For `lazy.lua` users.
>lua
	{
		"OXY2DEV/markview.nvim",
		lazy = false,

		dependencies = {
			-- You may not need this if you don't lazy load
			-- Or if the parsers are in your $RUNTIMEPATH
			"nvim-treesitter/nvim-treesitter",

			"nvim-tree/nvim-web-devicons"
		},
	}
<
For `plugins/markview.lua` users.
>lua
	return {
		"OXY2DEV/markview.nvim",
		lazy = false,

		dependencies = {
			-- You may not need this if you don't lazy load
			-- Or if the parsers are in your $RUNTIMEPATH
			"nvim-treesitter/nvim-treesitter",

			"nvim-tree/nvim-web-devicons"
		},
	}
<

Note:
It is NOT recommended to lazy load this plugin as it already does that.

Warning:
You will not be able to access help files without opening a markdown file
if you choose to lazy load.

------------------------------------------------------------------------------
🦠 Mini.deps                                      *markview.nvim-i-minideps*
>lua
	local MiniDeps = require("mini.deps");

	MiniDeps.add({
		source = "OXY2DEV/markview.nvim",

		depends = {
			-- You may not need this if you don't lazy load
			-- Or if the parsers are in your $RUNTIMEPATH
			"nvim-treesitter/nvim-treesitter",

			"nvim-tree/nvim-web-devicons"
		}
	});
<
------------------------------------------------------------------------------
🌒 Rocks.nvim                                        *markview.nvim-i-rocks*

`markview.nvim` can be installed using the following command.
>vim
	:Rocks install markview.nvim
<
------------------------------------------------------------------------------
Others

Installation process for other plugin managers are similar.
>vim
	Plug "nvim-treesitter/nvim-treesitter"
	Plug "nvim-tree/nvim-web-devicons"

	Plug "OXY2DEV/markview.nvim"
<
==============================================================================
Highlight groups                                         *markview.nvim-hls*

Note:
 The `$` are NOT part of the name.

- $MarkviewHeading1$     $MarkviewHeading1Sign$
  $MarkviewHeading2$     $MarkviewHeading2Sign$
  $MarkviewHeading3$     $MarkviewHeading3Sign$
  $MarkviewHeading4$     $MarkviewHeading4Sign$
  $MarkviewHeading5$     $MarkviewHeading5Sign$
  $MarkviewHeading6$     $MarkviewHeading6Sign$

  Highlight groups for different heading levels. `atx_headings` &
  `setext_headings` both uses them

- $MarkviewBlockQuoteDefault$
  $MarkviewBlockQuoteOk$
  $MarkviewBlockQuoteWarn$
  $MarkviewBlockQuoteError$
  $MarkviewBlockQuoteNote$
  $MarkviewBlockQuoteSpecial$

  Highlight groups responsible for various block quotes, `callouts` &
  `alerts`.

- $MarkviewCode$
  $MarkviewInlineCode$

  Highlight group for showing `code blocks` and `inline codes`.

- $MarkviewCheckboxChecked$
  $MarkviewCheckboxUnchecked$
  $MarkviewCheckboxPending$
  $MarkviewCheckboxProgress$
  $MarkviewCheckboxCancelled$

  Highlight group for the different `checkbox` states.

- $MarkviewListItemPlus$
  $MarkviewListItemMinus$
  $MarkviewListItemStar$

  Highlight groups for `unordered lists`. The plugin doesn't add decorations
  to ordered lists.

- $MarkviewTableBorder$

  Highlight group for the borders of `tables`.

  $MarkviewTableAlignLeft$
  $MarkviewTableAlignRight$
  $MarkviewTableAlignCenter$

  Highlight groups for the various `alignment indicators` on rows.

- $MarkviewGradient1$
  $MarkviewGradient2$
  $MarkviewGradient2$
  $MarkviewGradient3$
  $MarkviewGradient4$
  $MarkviewGradient5$
  $MarkviewGradient6$
  $MarkviewGradient7$
  $MarkviewGradient8$
  $MarkviewGradient9$
  $MarkviewGradient10$

  Highlight groups used by the `horizontal rules`.

- $MarkviewHyperlink$
  $MarkviewImageLink$
  $MarkviewEmail$

  Highlight groups use by various `links`.

==============================================================================
Commands                                            *markview.nvim-commands*

Markview comes with the following command,
>vim
	:Markview
<
When used without any arguments it `toggles` the plugin state.

It comes with the following sub-commands,

- toggleAll

  Toggles the plugin state. This will set ALL attached buffers to the same
  state.

- enableAll

  Enables the plugin in all attached buffers. If the plugin is already enabled
  then it will redraw everything.

- disableAll

  Disables the plugin in all attached buffers. If the plugin is already
  diaable it will clear any remaining decorations.

Note:
When the {buffer} isn't provided these commands will run on the current
buffer.

- toggle {buffer}

  Toggles the state of a buffer. Used for disabling the plugin on a specific
  buffer.

- enable {buffer}

  Enables the plugin on a buffer. Redraws decorations if it's already enabled
  in that buffer.

- disable {buffer}

  Disables the plugin on a specific buffer. Removes decorations if it's
  already disabled in that buffer.

------------------------------------------------------------------------------

==============================================================================
Plugin configuration                                  *markview.nvim-config*

The plugin can be configured via the `setup()` function.
>lua
	local presets = require("markview.presets");

	require("markview").setup({
		headings = presets.headings.glow_labels
	});
<
The setup function comes with the following options,

- modes `string[]`

  A list of |vim-modes| where the preview will be shown. Default is,
>lua
	modes = { "n", "no" }
<
- hybrid_modes `string[] or nil`

  A list of |vim-modes| where the text under the cursor is shown as raw text
  without any decorations.

  Default is nil.
>lua
	hybrid_modes = nil
<
- filetypes `string[]`

  List of filetyoes where the plugin will be enabled.
>luw
	filetypes = { "markdown", "quarto", "rmd" }
<
- buf_ignore `string[] or nil`

  A list of |'buftype'|s where the plugin will be disabled. Default is,
>lua
	buf_ignore = { "nofile" }
<
- callbacks

    {
      on_enable `function or nil`,
	  on_disable: `function or nil`,

	  on_mode_change: `function or nil`
    }

  A table containing `callbacks` that will be run by the plugin on specific
  events. See |markview.nvim-callbacks| for more info.

  Example usage,
>lua
	callbacks = {
		on_enable = function (_, win)
			vim.wo[win].cursorline = false;
		end
	}
<
- headings `table or nil`

  A table containing configuration for various `headings`.

  Example usage,
>lua
	headings = {
		enable = false,

		textoff = 0,
		shift_width = 1,

		heading_1 = {
			style = "simple",

			shift_char = " ",
			hl = "DiagnosticOk"
		},
		heading_2 = {},
		heading_3 = {},
		heading_4 = {},
		heading_5 = {},
		heading_6 = {},

		setext_1 = {
			style = "github",

			icon = "🔗",
			hl = "DiagnosticOk"
		},
		setext_2 = {}
	}
<
- code_blocks `table or nil`

  A table containing configuration for the `fenced code blocks`.

  Example usage,
>lua
	code_blocks = {
		enable = false,
		style = "minimal",
	    position = nil,
	    min_width = 70,
    
		pad_amount = 3,
	    pad_char = " ",

	    hl = "CursorLine"
	}
<
- inline_codes `table or nil`

  A table containing configuration for the `inline codes`.

  Example usage,
>lua
	inline_codes = {
		enable = false,
		enable = true,
	    hl = "DiagnosticOk",

	    corner_left = nil,
	    corner_left_hl = nil,

	    padding_left = " ",
		padding_left_hl = nil,

	    padding_right = " ",
		padding_right_hl = nil,

	    corner_right = nil,
		corner_right_hl = nil
	}
<
- block_quotes `table or nil`

  A table containing configuration for the `block quotes`, `alerts` and
  `callouts`.

  Example usage,
>lua
	block_quotes = {
		enable = false,
		enable = true,

	    default = {
			border = "▋",
	    },
		callouts = nil
	}
<
- horizontal_rules `table or nil`

  A table containing configuration for the `horizontal rules`.

  Example usage,
>lua
	horizontal_rules = {
		enable = false,

	    parts = {
	        {
		        type = "repeating",

	            repeat_amount = 10,
		        text = "-",
			    hl = "Special"
	        }
		}
	}
<
- links `table or nil`

  A table containing configuration for various `links`.

  Example usage,
>lua
	links = {
		enable = false
	}
<
- list_items `table or nil`

  A table containing configuration for various `list items`.

  Example usage,
>lua
	list_items = {
		enable = false,

	    hyperlinks = {},
	    images = {},
		emails = {}
	}
<
- checkboxes `table or nil`

  A table containing configuration for various `checkboxes`.

  Example usage,
>lua
	checkboxes = {
		enable = false,

	    checked = {
		    text = "✔", hl = "TabLineSel"
	    },
		unchecked = {},
	    pending = {},

		custom = {
			{
	            match = "~",
		        text = "◕",
			    hl = "CheckboxProgress"
	        }
		}
	}
<
- tables `table or nil`

  A table containing configuration for the `tables`.

  Example usage,
>lua
	tables = {
		enable = false,
		use_virt_lines = false,

	    text = {},
		hl = {}
	}
<
- html, `table or nil`

  A tablw containing configuration for html elements & entities.
>lua
	html = {
	    enable = true,

	    tags = { enable = true },
		entities = { enable = true }
	}
<

------------------------------------------------------------------------------
Helper functions                                       *markview.nvim-helpers*

The plugin comes with a few helper functions to easily create Dynamic
|highlight-groups|.

Color related helper functions can be used either through `markview.colors` or
by requiring the file Directly.
>lua
	local markview = require("markview");
	vim.print(markview.colors.get_hl_value(0, "Special", "fg"));
<
------------------------------------------------------------------------------

                                                        *markview.nvim-h-lerp*
colors.lerp({x}: number, {y}: number, {t}: number) -> number

	The mising `math.lerp()` function. Does `linear interpolation` between
	x & y.

	Parameters: ~

		• {x}   The start value.
		• {y}   The stop/end value.
		• {t}   A float between 0.00 & 1.00 to interpolate to.

	Result: ~

		• {number} The interpolated value.

                                                       *markview.nvim-h-clamp*
colors.clamp({value}: number, {min}: number, {max}: number) -> number

	The mising `math.clamp()` function. Clamps a value between min & max.

	Parameters: ~

		• {value}   The value to clamp.
		• {min}     Minimum value.
		• {max}     Maximum value.
           
	Result: ~

		• {number} The clamped value.

                                                 *markview.nvim-h-name_to_hex*
colors.name_to_hex({name}: string) -> string

	Turns |gui-colors| into heaxadecimal values.

	Used for converting |'guifg'|, |'guibg'| & |'guisp'| values provided
	by |nvim_get_hl()| into human readable colors.

	Parameters: ~

		• {name}    Name of the color.

	Result: ~

		• {string}  The converted hexadecimal color.

												 *markview.nvim-h-name_to_rgb*
colors.name_to_rgb({name}: string) -> { r: number, g: number, b: number }

	Turns |gui-colors| into tables containing r, g, b values.

	Used for converting |'guifg'|, |'guibg'| & |'guisp'| values provided
	by |nvim_get_hl()| into human readable colors.

	Parameters: ~

		• {name}   Name of the color.

	Result: ~

		• {table}  A table containing the r, g, b values.

                                                  *markview.nvim-h-num_to_hex*
colors.num_to_hex({num}: number) -> string

	Converts numbers into hexadecimal string. A `#` is added before the
	output string.

	Used for converting |'guifg'|, |'guibg'| & |'guisp'| values provided
	by |nvim_get_hl()| into human readable colors.

	Parameters: ~

		• {num}    Number to convert.

	Result: ~

		• {string} The converted hexadecimal color.

												  *markview.nvim-h-num_to_rgb*
colors.num_to_rgb({num}: number) -> { r: number, g: number, b: number }

	Sperates color numbers into r, g, b values.

	Rarely used for translating outputs of |nvim_get_hl()|.

	Parameters: ~

		• {num}   Number to seperate.

	Result: ~

		• {table} Table containing r, g, b values.

                                                  *markview.nvim-h-hex_to_rgb*
colors.hex_to_rgb({str}: string) -> { r: number, g: number, b: number }

	Seperates hex color codes to r, g, b colors.

	Supports codes with or without `#` in front of them. Also supports 
	`3-digit` & `6-digit` hex color codes.

	Parameters: ~

		• {str}   Hexadecimal string to seperate.

	Result: ~

		• {table} Table containing r, g, b values.

                                                  *markview.nvim-h-rgb_to_hex*
colors.rgb_to_hex({ {r}: number, {g}: number, {b}: number }) -> string

	Turns table containing r, g, b values into valid hex color codes.

	Used internally for transforming color values.

	Parameters: ~

		• {tbl}   A table containing r, g, b values.

	Result: ~

		• {table} 6-digit hex color code.

                                                *markview.nvim-h-get_hl_value*
colors.get_hl_value({ns_id}: number, {hl_group}: string, {value}: string)
	-> any

	A wrapper function for |nvim_get_hl()|.

	Gets {value} of {hl_group} in the provided {ns_id}. If {value} is `fg`,
	`bg` or `sp` the returned value will be a table containing the r, g, b
	values. Otherwise the value is directly returned.

	Parameters: ~

		• {ns_id}      Namespace ID. See |namespace| for more information.
		• {hl_group}   Highlight group name.
		• {value}      The value to return.
	
	Result: ~

		• {any}        Any of the value returned by |nvim_get_hl()|.

                                             *markview.nvim-h-create_gradient*
colors.create_gradient(
	{name_prefix}: string,

	{from}: color,
	{to}: color,

	{steps}: number,
	{mode}: string
) -> { {group_name}: string, {value}: table }

	Creates a list of `highlight groups` for the {highlight_groups} option.

	A 2-stop gradient is generated between {from} & {to}. The value of
	{from} & {to} can either be a number, string or a table with r, g, b
	values.

	The {mode} can be used to make the gradient into the background color or
	the foreground color or both.

	Parameters: ~

		• {name_prefix}   The prefix to add before each of the {group_name}.

						  E.g. setting the {name_prefix} to "Gradient" will
						  result in group names being "Gradient<n>" where
						  "<n>" is the step number.

		• {from}          The start color of the gradient. Can be a number,
						  a string or a table. It will be converted to a
						  table containing r, g, b values.
		• {to}            The stop color of the gradient. Works like {from}.

		• {steps}         Number of steps in the gradient(including the start
						  and stop colors).
		• {mode}          The color mode of the gradient. Possible values are,
							  • bg: Applies the color to the background.
							  • fg: Applies the color to the foreground.
							  • both: Does all of the above.

	Result: ~

		• {table}         A list of tables containing a {group_name} and a
						  {value}. Mainly for use in {highlight_groups}.

														 *markview.nvim-h-mix*
colors.mix(
	{color_1}: color, {color_2}: color,
	{per_1}: number, {per_2}: number
) -> string

	Mixes {color_1}, {color_2} to create a new color.

	The value of {color_1} & {color_2} can either be a number, string
	or a table with r, g, b values.

	The {per_1} & {per_2} are floats between 0 & 1. They are used as % values
	of the r, g, b values of the corresponding color. They are then added
	together to make the new color.

	Parameters: ~

		• {color_1}       The first color to mix. Can be a number,
						  a string or a table. It will be converted to a
						  table containing r, g, b values.
		• {color_2}       The stop color of the gradient. Works like
						  {color_1}.

		• {per_1}         The % of {color_1} to mix.
		• {per_2}         The % of {color_2} to mix.

	Result: ~

		• {string}        The hex color code of the resulting color.

											  *markview.nvim-h-get_brightness*
colors.get_brightness({color}: color) -> number

	Gets the `luminosity` value of the color. Supports hexadecimal numbers,
	color names, tables containing r, g, b values.

	Parameters: ~

		• {color}       The first color to mix. Can be a number,
						a string or a table. It will be converted to a
						table containing r, g, b values.
	
	Result: ~

		• {number}      Luminosity value between 0 & 1.

												   *markview.nvim-h-brightest*
colors.brightest({list}: color[]) -> string

	Gets the brightest color from the provided list of colors.

	Parameters: ~
		• {list}    A list of colors. Can contain hexadecimal numbers, numbers,
					color names & tables with r, g, b values.

	Result: ~

		• {string}  The brightest color's hex color code. 

														 *markview.nvim-h-get*
colors.get({list}: any[]) -> any

	Gets the first `non-nil` value from a list(with empty holes) of values.

vim:ft=help:bt=help:textwidth=78:ts=4:spell:
