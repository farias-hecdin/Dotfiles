local a=coroutine;local b=require"plenary.functional"local c=require"plenary.compat"local d={}local e={}e.__index=e;function e:__call(f,g)return self.gen(f or self.param,g or self.state)end;function e:__tostring()return"<iterator>"end;local h=function(...)local i=select("#",...)if i>=3 then local j=select(i-2,...)if type(j)=="table"and getmetatable(j)==e and j.param==select(i-1,...)and j.state==select(i,...)then return i-2 end end;return i end;local k=function(l,...)if l==nil then return nil end;return...end;local m=function(n,l,...)if l==nil then return nil end;return l,n(...)end;local o=function(p,q)return nil end;local r=pairs{}local s=function(t,u)local v;u,v=r(t,u)return u,u,v end;local w=function(f,g)g=g+1;if g>#f then return nil end;local x=string.sub(f,g,g)return g,x end;local y=function(z,f,g)assert(z~=nil,"invalid iterator")if type(z)=="table"then local A=getmetatable(z)if A~=nil then if A==e then return z.gen,z.param,z.state end end;if c.islist(z)then return ipairs(z)else return s,z,nil end elseif type(z)=="function"then return z,f,g elseif type(z)=="string"then if#z==0 then return o,nil,nil end;return w,z,0 end;error(string.format('object %s of type "%s" is not iterable',z,type(z)))end;local function B(C,f,g)return setmetatable({gen=C,param=f,state=g},e)end;local D=function(self)return self.gen,self.param,self.state end;local E=function(z,f,g)return B(y(z,f,g))end;d.iter=E;d.wrap=B;d.unwrap=D;function e:for_each(F)local f,g=self.param,self.state;repeat g=m(F,self.gen(f,g))until g==nil end;function e:stateful()return B(a.wrap(function()self:for_each(function(...)a.yield(b.first(...),...)end)while true do a.yield()end end),nil,nil)end;local G=function(f,g)local H,I=f[1],f[2]g=g+I;if g>H then return nil end;return g,g end;local J=function(f,g)local H,I=f[1],f[2]g=g+I;if g<H then return nil end;return g,g end;local K=function(L,H,I)if I==nil then if H==nil then if L==0 then return o,nil,nil end;H=L;L=H>0 and 1 or-1 end;I=L<=H and 1 or-1 end;assert(type(L)=="number","start must be a number")assert(type(H)=="number","stop must be a number")assert(type(I)=="number","step must be a number")assert(I~=0,"step must not be zero")if I>0 then return B(G,{H,I},L-I)elseif I<0 then return B(J,{H,I},L-I)end end;d.range=K;local M=function(N,l)return l+1,unpack(N)end;local O=function(N,l)return l+1,N(l)end;local P=function(N,l)return l+1,N end;local Q=function(...)if select("#",...)<=1 then return B(P,select(1,...),0)else return B(M,{...},0)end end;d.duplicate=Q;local R=function(n)assert(type(n)=="function")return B(O,n,0)end;d.from_fun=R;local S=function()return B(P,0,0)end;d.zeros=S;local T=function()return B(P,1,0)end;d.ones=T;local U=function(N,V)return 0,math.random(N[1],N[2])end;local W=function(X,V)return 0,math.random()end;local Y=function(i,Z)if i==nil and Z==nil then return B(W,0,0)end;assert(type(i)=="number","invalid first arg to rands")if Z==nil then Z=i;i=0 else assert(type(Z)=="number","invalid second arg to rands")end;assert(i<Z,"empty interval")return B(U,{i,Z-1},0)end;d.rands=Y;local _=function(f,g)local a0,a1=f[1],f[2]local a2=#a0;if g>a2+1 then return end;local L,a3=string.find(a0,a1,g,true)if not L then L=a2+1;a3=a2+1 end;local a4=a0:sub(g,L-1)return a3+1,a4 end;local a5=function(a0,a1)return B(_,{a0,a1},1)end;d.split=a5;local a6=function(a0)return a5(a0," ")end;d.words=a6;local a7=function(a0)return a5(a0,"\n")end;d.lines=a7;local a8=function(f,g)local a9,N,n=f[1],f[2],f[3]return m(n,a9(N,g))end;function e:map(n)return B(a8,{self.gen,self.param,n},self.state)end;local aa;do local j=function(ab,l,...)if l==nil then return nil end;return{ab.gen,ab.param,l},...end;aa=function(g,l,...)if l==nil then return nil end;local ac=b.first(...)if getmetatable(ac)==e then local ab=(ac..B(g[1],g[2],l)):flatten()return j(ab,ab.gen(ab.param,ab.state))end;return{g[1],g[2],l},...end end;local ad=function(ae,g)if g==nil then return end;local a9,N,l=g[1],g[2],g[3]return aa(g,a9(N,l))end;function e:flatten()return B(ad,false,{self.gen,self.param,self.state})end;local af=function(n,a9,N,l,ag)while true do if l==nil or n(ag)then break end;l,ag=a9(N,l)end;return l,ag end;local ah;local ai=function(n,a9,N,l)return ah(n,a9,N,a9(N,l))end;ah=function(n,a9,N,l,...)if l==nil then return nil end;if n(...)then return l,...end;return ai(n,a9,N,l)end;local aj=function(n,a9,N,l,...)if select("#",...)<2 then return af(n,a9,N,l,...)else return ah(n,a9,N,l,...)end end;local ak=function(f,l)local a9,N,n=f[1],f[2],f[3]return aj(n,a9,N,a9(N,l))end;function e:filter(n)return B(ak,{self.gen,self.param,n},self.state)end;function e:enumerate()local al=0;return self:map(function(...)al=al+1;return al,...end)end;function e:any(n)local x;local g,f,C=self.state,self.param,self.gen;repeat g,x=m(n,C(f,g))until g==nil or x;return x end;function e:all(n)local x;local g,f,C=self.state,self.param,self.gen;repeat g,x=m(n,C(f,g))until g==nil or not x;return g==nil end;function e:find(am)local C,f,g=self.gen,self.param,self.state;if type(am)=="function"then return k(aj(am,C,f,C(f,g)))else for ae,x in C,f,g do if x==am then return x end end;return nil end end;function e:fold(an,n)local ao=an;local C,f,g=self.gen,self.param,self.state;for ae,x in C,f,g do ao=n(ao,x)end;return ao end;function e:tolist()local ap={}self:for_each(function(ag)table.insert(ap,ag)end)return ap end;function e:tolistn()local ap={}self:for_each(function(...)table.insert(ap,{...})end)return ap end;function e:tomap()local t={}self:for_each(function(u,v)t[u]=v end)return t end;local aq;local ar=function(f,g,l,...)if l==nil then local al=g[1]+1;if f[3*al-1]==nil then return nil end;l=f[3*al]return aq(f,{al,l})end;return{g[1],l},...end;aq=function(f,g)local al,l=g[1],g[2]local a9,N=f[3*al-2],f[3*al-1]return ar(f,g,a9(N,l))end;local as=function(...)local i=h(...)if i==0 then return B(o,nil,nil)end;local f={[3*i]=0}local a9,N,l;for al=1,i,1 do local at=select(al,...)a9,N,l=D(at)f[3*al-2]=a9;f[3*al-1]=N;f[3*al]=l end;return B(aq,f,{1,f[3]})end;e.chain=as;e.__concat=as;d.chain=as;local function au(f,g,av,...)if#av==#f/2 then return av,...end;local al=#av+1;local a9,N=f[2*al-1],f[2*al]local l,x=a9(N,g[al])if l==nil then return nil end;table.insert(av,l)return au(f,g,av,x,...)end;local aw=function(f,g)return au(f,g,{})end;local ax=function(...)local i=h(...)if i==0 then return B(o,nil,nil)end;local f={[2*i]=0}local g={[i]=0}local a9,N,l;for al=1,i,1 do local j=select(i-al+1,...)a9,N,l=y(j)f[2*al-1]=a9;f[2*al]=N;g[al]=l end;return B(aw,f,g)end;e.zip=ax;e.__div=ax;d.zip=ax;return d
