local a=require('luassert.assert')local b=require('luassert.match')local c=require('say')local function d(e,f,g)local g=(g or 1)+1;local h=f.n;a(h>0,c("assertion.internal.argtolittle",{"none",1,tostring(h)}),g)for i=1,h do a(b.is_matcher(f[i]),c("assertion.internal.badargtype",{1,"none","matcher",type(f[i])}),g)end;return function(j)for k,l in ipairs(f)do if l(j)then return false end end;return true end end;local function m(e,f,g)local g=(g or 1)+1;local h=f.n;a(h>0,c("assertion.internal.argtolittle",{"any",1,tostring(h)}),g)for i=1,h do a(b.is_matcher(f[i]),c("assertion.internal.badargtype",{1,"any","matcher",type(f[i])}),g)end;return function(j)for k,l in ipairs(f)do if l(j)then return true end end;return false end end;local function n(e,f,g)local g=(g or 1)+1;local h=f.n;a(h>0,c("assertion.internal.argtolittle",{"all",1,tostring(h)}),g)for i=1,h do a(b.is_matcher(f[i]),c("assertion.internal.badargtype",{1,"all","matcher",type(f[i])}),g)end;return function(j)for k,l in ipairs(f)do if not l(j)then return false end end;return true end end;a:register("matcher","none_of",d)a:register("matcher","any_of",m)a:register("matcher","all_of",n)
