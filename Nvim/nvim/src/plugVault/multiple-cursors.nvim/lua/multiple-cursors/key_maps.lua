local a={}local b=require("multiple-cursors.virtual_cursors")local c=require("multiple-cursors.common")local d=require("multiple-cursors.input")default_key_maps={}custom_key_maps={}local e={}function a.setup(f,g)default_key_maps=f;custom_key_maps=g end;function a.has_custom_keys_maps()return next(custom_key_maps)~=nil end;local function h(i)if type(i)=="table"then return i else return{i}end end;local function j(k,l,m)if next(k)==nil then return false end;for n=1,#k do local o=h(k[n][1])local p=h(k[n][2])for q,r in ipairs(o)do for q,s in ipairs(p)do if l==r and m==s then return true end end end end;return false end;local function t(l,m)return not j(custom_key_maps,l,m)end;local function u(l,m)local v=vim.fn.maparg(m,l,false,true)if v["buffer"]==1 then table.insert(e,{l,v})end end;function a.save_existing()for q,w in ipairs(default_key_maps)do local x=h(w[1])local y=h(w[2])for q,l in ipairs(x)do for q,m in ipairs(y)do if t(l,m)then u(l,m)end end end end;for q,z in ipairs(custom_key_maps)do local A=h(z[1])local B=h(z[2])local C=z[3]if C then for q,D in ipairs(A)do for q,E in ipairs(B)do u(D,E)end end end end end;function a.restore_existing()for q,F in ipairs(e)do local l=F[1]local v=F[2]vim.fn.mapset(l,false,v)end;e={}end;local function G(C)if not c.is_mode_insert_replace()then C()return end;local H=vim.wo.ve;local I=vim.fn.getcurpos()vim.wo.ve="onemore"vim.fn.cursor({I[2],I[3],I[4],I[5]})C()local I=vim.fn.getcurpos()vim.wo.ve=H;vim.fn.cursor({I[2],I[3],I[4],I[5]})end;local function J(C)local K=vim.v.register;local L=vim.v.count;G(function()C(K,L)end)if c.is_mode("v")then b.visual_mode(function(M)C(K,L)end)else b.edit_with_cursor(function(M)C(K,L)end)end end;local function N(C)local K=vim.v.register;local L=vim.v.count;local O=d.get_motion_cmd()if O==nil then return end;G(function()C(K,L,O)end)if c.is_mode("v")then b.visual_mode(function(M)C(K,L,O)end)else b.edit_with_cursor(function(M)C(K,L,O)end)end end;local function P(C)local K=vim.v.register;local L=vim.v.count;local Q=d.get_char()if Q==nil then return end;G(function()C(K,L,Q)end)if c.is_mode("v")then b.visual_mode(function(M)C(K,L,Q)end)else b.edit_with_cursor(function(M)C(K,L,Q)end)end end;local function R(C)local K=vim.v.register;local L=vim.v.count;local O=d.get_motion_cmd()if O==nil then return end;local Q=d.get_char()if Q==nil then return end;G(function()C(K,L,O,Q)end)if c.is_mode("v")then b.visual_mode(function(M)C(K,L,O,Q)end)else b.edit_with_cursor(function(M)C(K,L,O,Q)end)end end;function a.set_custom()for q,z in ipairs(custom_key_maps)do local A=h(z[1])local B=h(z[2])local C=z[3]if C then local S=function()J(C)end;if#z>=4 then local T=z[4]if T=="m"then S=function()N(C)end elseif T=="c"then S=function()P(C)end elseif T=="mc"then S=function()R(C)end end end;for U=1,#A do for V=1,#B do vim.keymap.set(A[U],B[V],S,{buffer=0})end end end end end;function a.set()for q,w in ipairs(default_key_maps)do local x=h(w[1])local y=h(w[2])local C=w[3]for q,l in ipairs(x)do for q,m in ipairs(y)do if t(l,m)then vim.keymap.set(l,m,C,{buffer=0})end end end end;a.set_custom()end;function a.delete()for q,w in ipairs(default_key_maps)do local x=h(w[1])local y=h(w[2])for q,l in ipairs(x)do for q,m in ipairs(y)do if t(l,m)then vim.keymap.del(l,m,{buffer=0})end end end end;for q,z in ipairs(custom_key_maps)do local A=h(z[1])local B=h(z[2])local C=z[3]if C then for q,D in ipairs(A)do for q,E in ipairs(B)do vim.keymap.del(D,E,{buffer=0})end end end end end;return a
