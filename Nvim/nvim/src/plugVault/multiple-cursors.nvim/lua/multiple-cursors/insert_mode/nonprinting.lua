local a={}local b=require("multiple-cursors.common")local c=require("multiple-cursors.virtual_cursors")local d=require("multiple-cursors.insert_mode.completion")local function e(f,g)local h=vim.fn.match(vim.fn.getline(f),"\\S")if h<0 then return true else return g<=h+1 end end;local function i(f,g)local j=vim.fn.getline(f)local k=string.sub(j,g-1,g-1)return k end;local function l(f,g)return i(f,g)==" "end;local function m(f,g)return i(f,g)=="\t"end;local function n(f,g)local o=vim.opt.shiftwidth._value;if not e(f,g)then if vim.opt.softtabstop._value==0 then return 1 else o=vim.opt.softtabstop._value end end;local p=0;while g>=1 and l(f,g)do p=p+1;g=g-1;if(g-1)%o==0 then break end end;return p end;local function q(r)if r.col==1 then if r.lnum~=1 then if b.get_length_of_line(r.lnum)==0 then vim.cmd("normal! dd")r.lnum=r.lnum-1;r.col=b.get_max_col(r.lnum)r.curswant=vim.v.maxcol else vim.cmd("normal! k$gJ")r:save_cursor_position()end end else local p=vim.fn.max({1,n(r.lnum,r.col)})for s=1,p do vim.cmd("normal! \"_X")end;r.col=r.col-p;r.curswant=r.col end end;local function t(r)if r.col==1 and r.lnum~=1 then r.lnum=r.lnum-1;r.col=b.get_max_col(r.lnum)r.curswant=r.col;return end;local p=vim.fn.max({1,n(r.lnum,r.col)})r.col=r.col-p;r.curswant=r.col end;local function u()if b.is_mode("R")then c.edit_with_cursor_no_save(function(r)t(r)end)else c.edit_with_cursor_no_save(function(r)q(r)end)end end;function a.bs()local v=d.complete_if_selected()u()if v then b.feedkeys(nil,0,"<Esc>a<BS>",nil)else b.feedkeys(nil,0,"<BS>",nil)end end;local function w(r)if r.col==b.get_max_col(r.lnum)then vim.cmd("normal! gJ")else vim.cmd("normal! \"_x")end end;local function x()c.edit_with_cursor_no_save(function(r)w(r)end)end;function a.del()d.complete_if_selected()x()b.feedkeys(nil,0,"<Del>",nil)end;function a.virtual_cursor_carriage_return(r)if r.col<=b.get_length_of_line(r.lnum)then vim.api.nvim_put({"",""},"c",false,true)vim.cmd("normal! ==^")r:save_cursor_position()else vim.api.nvim_put({"","x"},"c",false,true)vim.cmd("normal! ==^\"_x")r:save_cursor_position()r.col=b.get_col(r.lnum,r.col+1)r.curswant=r.col end end;function a.all_virtual_cursors_carriage_return()c.edit_with_cursor_no_save(function(r)a.virtual_cursor_carriage_return(r)end)end;function a.cr()d.complete_if_selected()a.all_virtual_cursors_carriage_return()b.feedkeys(nil,0,"<CR>",nil)end;local function y(o,g)return o-(g-1)%o end;local function z(A,B)for s=1,B do vim.api.nvim_put({A},"c",false,true)end end;local function C(r)local D=vim.opt.expandtab._value;local E=vim.opt.tabstop._value;local F=vim.opt.softtabstop._value;local G=vim.opt.shiftwidth._value;if D then if e(r.lnum,r.col)then z(" ",y(G,r.col))else if F==0 then z(" ",y(E,r.col))else z(" ",y(F,r.col))end end else return end end;function a.all_virtual_cursors_tab()c.edit_with_cursor(function(r)if b.is_mode("R")then vim.cmd("normal! \"_x")end;C(r)end)end;function a.tab()d.complete_if_selected()a.all_virtual_cursors_tab()b.feedkeys(nil,0,"<Tab>",nil)end;return a
