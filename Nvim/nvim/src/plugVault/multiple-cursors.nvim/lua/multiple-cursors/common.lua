local a={}function a.normal_bang(b,c,d,e)local f=""if b then f=f.."\""..b end;if c~=0 then f=f..c end;f=f..d;if e then f=f..e end;vim.cmd("normal! "..f)end;function a.feedkeys(b,c,d,e)local f=""if b then f=f.."\""..b end;if c~=0 then f=f..c end;f=f..d;if e then f=f..e end;local g=vim.api.nvim_replace_termcodes(f,true,false,true)vim.api.nvim_feedkeys(g,"n",false)end;function a.is_mode(h)return vim.api.nvim_get_mode().mode==h end;function a.is_mode_insert_replace()local h=vim.api.nvim_get_mode().mode;return h=="i"or h=="ic"or h=="R"or h=="Rc"end;function a.get_length_of_line(i)return vim.fn.col({i,"$"})-1 end;function a.get_max_col(i)if a.is_mode("n")then return vim.fn.max({a.get_length_of_line(i),1})else return a.get_length_of_line(i)+1 end end;function a.get_col(i,j)return vim.fn.min({a.get_max_col(i),j})end;function a.get_visual_area()local k=vim.fn.getpos("v")local l=vim.fn.getcurpos()return k[2],k[3],l[2],l[3],l[5]end;function a.get_normalised_visual_area()local m,n,i,o=a.get_visual_area()if m<i then return m,n,i,o elseif i<m then return i,o,m,n else if n<=o then return m,n,i,o else return i,o,m,n end end end;function a.set_visual_area(m,n,i,o)vim.api.nvim_buf_set_mark(0,"<",m,n-1,{})vim.api.nvim_buf_set_mark(0,">",i,o-1,{})vim.cmd("normal! gv")end;return a
