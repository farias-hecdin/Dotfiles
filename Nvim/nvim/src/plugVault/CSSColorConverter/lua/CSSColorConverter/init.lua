local a={}local vim=vim;local b=require('CSSPluginHelpers')a.options={display_virtual_text=true,target_color_format="hex",disable_keymaps=false}a.setup=function(c)a.options=vim.tbl_deep_extend("keep",c or{},a.options)if not a.options.disable_keymaps then local d={buffer=0,silent=true}vim.api.nvim_create_autocmd('FileType',{desc='CSSColorConverter.nvim keymaps',pattern='css',callback=function()vim.keymap.set('v','<leader>cn',":lua require('CSSColorConverter').get_color_name()<CR>",d)vim.keymap.set('v','<leader>c#',":lua require('CSSColorConverter').get_color_conversion('hex')<CR>",d)vim.keymap.set('v','<leader>ch',":lua require('CSSColorConverter').get_color_conversion('hsl')<CR>",d)vim.keymap.set('v','<leader>cl',":lua require('CSSColorConverter').get_color_conversion('lch')<CR>",d)vim.keymap.set('v','<leader>cr',":lua require('CSSColorConverter').get_color_conversion('rgb')<CR>",d)end})end;if a.options.display_virtual_text then a.virtual_text()end end;local e=function()local f=vim.api.nvim_create_namespace("csscolorconverter")local g,h=b.get_current_line_content()local i={}a.color_value(h,i)b.show_virtual_text(i,g,f)end;a.virtual_text=function()vim.api.nvim_create_autocmd({"BufEnter","BufWinEnter","CursorMoved"},{pattern="*.css",callback=function()e()end})end;a.get_color_conversion=function(j,i)local k,h=b.get_current_line_content()local l,m=a.color_value(h,i,j)local n,o=b.capture_visual_selection()a.update_color(m,o,l,n)end;a.get_color_name=function()local k,h=b.get_current_line_content()a.check_if_colornames_exist()local p,q=pcall(a.read_json)if not p then return end;local l,m=a.color_value(h,nil,"hex")local n,o=b.capture_visual_selection()local r=q or{}a.update_color(m,o,l,n,r)end;local function s(t,u,v,w,x,y)return math.sqrt((w-t)^2+(x-u)^2+(y-v)^2)end;a.nearest_color=function(z,A)local B=1e9;local C=nil;local D,E,F=a.hex_to_rgb(z)for k,G in ipairs(A)do local H,I,J=a.hex_to_rgb(G.hex)local K=s(D,E,F,H,I,J)if K<B then B=K;C=G end end;return C end;a.hex_to_rgb=function(L)L=L:gsub("#","")return tonumber("0x"..L:sub(1,2)),tonumber("0x"..L:sub(3,4)),tonumber("0x"..L:sub(5,6))end;local function M(N,O,P)if P<0 then P=P+1 end;if P>1 then P=P-1 end;if P<0.1667 then return N+(O-N)*6*P end;if P<0.5 then return O end;if P<0.6667 then return N+(O-N)*(0.6667-P)*6 end;return N end;a.hsl_to_rgb=function(Q,R,S)local H,I,J;if R==0 then H,I,J=S,S,S else local O;if S<0.5 then O=S*(1+R)else O=S+R-S*R end;local N=2*S-O;H=M(N,O,Q+0.3333)I=M(N,O,Q)J=M(N,O,Q-0.3333)end;return H*255,I*255,J*255 end;a.hsl_to_hex=function(Q,R,S)local H,I,J=a.hsl_to_rgb(Q*0.00277778,R*0.01,S*0.01)return string.format("#%02x%02x%02x",H,I,J)end;a.lab_to_lch=function(S,T,J)local U=math.sqrt(T*T+J*J)local Q=math.atan(J,T)if Q<0 then Q=Q+2*math.pi end;Q=Q*57.29577951308232;return S,U,Q end;a.lch_to_hex=function(S,U,Q)local T=math.floor(U*math.cos(math.rad(Q))+0.5)local J=math.floor(U*math.sin(math.rad(Q))+0.5)local V,W,X=0.948110,1.00000,1.07304;local Y=(S+16)/116;local Z=Y+T/500;local _=Y-J/200;local a0=V*(Z^3>0.008856 and Z^3 or(Z-16/116)/7.787)local a1=W*(Y^3>0.008856 and Y^3 or(Y-16/116)/7.787)local a2=X*(_^3>0.008856 and _^3 or(_-16/116)/7.787)local a3=a0*3.2406-a1*1.5372-a2*0.4986;local a4=-a0*0.9689+a1*1.8758+a2*0.0415;local a5=a0*0.0557-a1*0.2040+a2*1.0570;a3=a3>0.0031308 and 1.055*a3^(1/2.4)-0.055 or 12.92*a3;a4=a4>0.0031308 and 1.055*a4^(1/2.4)-0.055 or 12.92*a4;a5=a5>0.0031308 and 1.055*a5^(1/2.4)-0.055 or 12.92*a5;a3=math.floor(math.max(math.min(a3,1),0)*255+0.5)a4=math.floor(math.max(math.min(a4,1),0)*255+0.5)a5=math.floor(math.max(math.min(a5,1),0)*255+0.5)return string.format("#%02x%02x%02x",a3,a4,a5)end;a.rgb_to_hsl=function(H,I,J)H,I,J=H/255,I/255,J/255;local a6,a7=math.max(H,I,J),math.min(H,I,J)local Q,R,S;S=(a6+a7)/2;if a6==a7 then Q,R=0,0 else local a8=a6-a7;if S>0.5 then R=a8/(2-a6-a7)else R=a8/(a6+a7)end;if a6==H then Q=(I-J)/a8;if I<J then Q=Q+6 end elseif a6==I then Q=(J-H)/a8+2 elseif a6==J then Q=(H-I)/a8+4 end;Q=Q/6 end;return a.round(Q*360,0),a.round(R*100,0),a.round(S*100,0)end;local function a9(aa)local ab={"0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"}local ac=aa%16;local ad=math.floor(aa*0.0625)%16;return ab[ad+1]..ab[ac+1]end;a.rgb_to_hex=function(H,I,J)return"#"..a9(H)..a9(I)..a9(J)end;a.rgb_to_xyz=function(a3,a4,a5)local H=a3/255;local I=a4/255;local J=a5/255;if H>0.04045 then H=((H+0.055)/1.055)^2.4 else H=H/12.92 end;if I>0.04045 then I=((I+0.055)/1.055)^2.4 else I=I/12.92 end;if J>0.04045 then J=((J+0.055)/1.055)^2.4 else J=J/12.92 end;local a0=H*0.4124+I*0.3576+J*0.1805;local a1=H*0.2126+I*0.7152+J*0.0722;local a2=H*0.0193+I*0.1192+J*0.9505;return a0*100,a1*100,a2*100 end;a.xyz_to_lab=function(a0,a1,a2)local function ae(P)if P>0.008856 then return P^(1/3)else return 7.787*P+16/116 end end;local af,ag,ah=95.047,100.0,108.883;a0,a1,a2=a0/af,a1/ag,a2/ah;local S=116*ae(a1)-16;local T=500*(ae(a0)-ae(a1))local J=200*(ae(a1)-ae(a2))return S,T,J end;a.color_value=function(h,i,j)local ai={{key="rgb",pattern="rgb%(%d+, %d+, %d+%)",value="rgb%((%d+), (%d+), (%d+)%)"},{key="hsl",pattern="hsl%(%d+, %d+%p?, %d+%p?%)",value="hsl%((%d+), (%d+)%p?, (%d+)%p?%)"},{key="lch",pattern="lch%(%d+%.?%d+%p? %d+%.?%d+ %d+%.?%d+%)",value="lch%((%d+%.?%d+)%p? (%d+%.?%d+) (%d+%.?%d+)%)"},{key="#",pattern="#[%x][%x][%x][%x][%x][%x]",value=""}}local aj=i or{}local ak=j or string.lower(a.options.target_color_format)local l={}local al={}for k,am in ipairs(ai)do local an=string.gmatch(h,am.pattern)for ao in an do local ap=am.key;local aq,ar,as=0,0,0;if ak=="hex"then if ap=="rgb"then l[#l+1]=a.hex_to_rgb(select(1,string.match(ao,am.value)))elseif ap=="hsl"then l[#l+1]=a.hsl_to_hex(select(1,string.match(ao,am.value)))elseif ap=="lch"then l[#l+1]=a.lch_to_hex(select(1,string.match(ao,am.value)))else l[#l+1]=ao end elseif ak=="rgb"then local at='rgb(%d, %d, %d)'if ap=="#"then aq,ar,as=a.hex_to_rgb(ao)l[#l+1]=string.format(at,aq,ar,as)elseif ap=="hsl"then for a0,a1,a2 in string.gmatch(ao,am.value)do aq,ar,as=a.hex_to_rgb(a.hsl_to_hex(tonumber(a0),tonumber(a1),tonumber(a2)))l[#l+1]=string.format(at,aq,ar,as)end elseif ap=="lch"then for a0,a1,a2 in string.gmatch(ao,am.value)do aq,ar,as=a.hex_to_rgb(a.lch_to_hex(tonumber(a0),tonumber(a1),tonumber(a2)))l[#l+1]=string.format(at,aq,ar,as)end else l[#l+1]=ao end elseif ak=="hsl"then local at='hsl(%d, %d, %d)'if ap=="rgb"then for a0,a1,a2 in string.gmatch(ao,am.value)do aq,ar,as=a.rgb_to_hsl(tonumber(a0),tonumber(a1),tonumber(a2))l[#l+1]=string.format(at,aq,ar,as)end elseif ap=="lch"then for a0,a1,a2 in string.gmatch(ao,am.value)do aq,ar,as=a.rgb_to_hsl(a.hex_to_rgb(a.lch_to_hex(tonumber(a0),tonumber(a1),tonumber(a2))))l[#l+1]=string.format(at,aq,ar,as)end elseif ap=="#"then aq,ar,as=a.rgb_to_hsl(a.hex_to_rgb(ao))l[#l+1]=string.format(at,aq,ar,as)else l[#l+1]=ao end elseif ak=="lch"then local at='lch(%.1f%% %.1f %.1f)'if ap=="#"then aq,ar,as=a.hex_to_rgb(ao)aq,ar,as=a.lab_to_lch(a.xyz_to_lab(a.rgb_to_xyz(aq,ar,as)))l[#l+1]=string.format(at,aq,ar,as)elseif ap=="rgb"then for a0,a1,a2 in string.gmatch(ao,am.value)do aq,ar,as=a.lab_to_lch(a.xyz_to_lab(a.rgb_to_xyz(tonumber(a0),tonumber(a1),tonumber(a2))))l[#l+1]=string.format(at,aq,ar,as)end elseif ap=="hsl"then for a0,a1,a2 in string.gmatch(ao,am.value)do aq,ar,as=a.lab_to_lch(a.xyz_to_lab(a.rgb_to_xyz(a.hex_to_rgb(a.hsl_to_hex(tonumber(a0),tonumber(a1),tonumber(a2))))))l[#l+1]=string.format(at,aq,ar,as)end else l[#l+1]=ao end end;al[#al+1]=ao end end;if not j then for au=1,#l do table.insert(aj,l[au])end end;return l,al end;local av=function(aw,ax)local ay=require('plenary.job')ay:new({command='curl',args={'-s',aw,'-o',ax},on_start=function()vim.print('[CSSColorConverter] Downloading colornames.json...')end,on_exit=function(az,aA)local aB="[CSSColorConverter] Success!"if aA~=0 then aB="[CSSColorConverter] Error!"end;vim.notify(aB,vim.log.levels.INFO)end}):start()end;a.check_if_colornames_exist=function()local aC,aD=vim.fn.stdpath('data')..'/CSSColorConverter/',"colornames.json"if vim.fn.isdirectory(aC)~=1 then vim.fn.mkdir(aC,'p')end;if vim.fn.filereadable(aC..aD)~=1 then av("https://unpkg.com/color-name-list@10.16.0/dist/colornames.json",aC..aD)vim.notify('[CSSColorConverter] The colorname.json file has been downloaded.',vim.log.levels.INFO)end end;a.round=function(aa,aE)local aF=10^aE;return math.floor(aa*aF+0.5)/aF end;local function aG(ax)local aH=assert(io.open(ax,"r"))local q=aH:read("*a")aH:close()return q end;a.read_json=function()local aH=aG(vim.fn.expand('~/.local/share/nvim/colorformat/colornames.json'))return vim.json.decode(aH)end;local aI=function(ao)local l=string.lower(ao)l=string.gsub(l,"['â€™]","")return string.gsub(l,"%W","-")end;a.update_color=function(m,o,l,n,aJ)for au=1,#m do if o and m[au]==o[1]then if aJ then local r=a.nearest_color(l[au],aJ)if r then o[1]=aI(r.name)vim.print(string.format("[CSSColorConverter] %s is equal to: %s",l[au],r.name))end else o[1]=l[au]vim.print(string.format("[CSSColorConverter] %s is equal to: %s",m[au],l[au]))end;b.change_text(n,o)end end end;return a
