local a=require'mind.notify'.notify;local b={}b.TreeType={ROOT=0,LOCAL_ROOT=1}b.MoveDir={ABOVE=0,BELOW=1,INSIDE_START=2,INSIDE_END=3}b.new_node=function(c,d)return{contents={{text=c}},is_expanded=false,children=d}end;local function e(f,g,h)if h==0 then return f,g,h end;h=h-1;if g.children~=nil and g.is_expanded then for i,j in ipairs(g.children)do local k,l;k,l,h=e(g,j,h)if l~=nil then return k,l,h end end end;return nil,nil,h end;b.get_node_by_line=function(m,n)local i,g,i=e(nil,m,n)return g end;b.get_node_and_parent_by_line=function(m,n)local f,g,i=e(nil,m,n)return f,g end;local function o(f,m,p,h,q)if h==#p+1 then return f,m end;local r=p[h]if m.children==nil then if q then m.children={b.new_node(r)}else return end end;for i,j in ipairs(m.children)do if j.contents[1].text==r then return o(m,j,p,h+1,q)end end;if q then local g=b.new_node(r)m.children[#m.children+1]=g;return o(m,g,p,h+1,q)end end;b.get_node_by_path=function(m,s,q)if s=='/'then return nil,m end;local t=vim.split(s,'/')if t[1]~=''then a('path must start with a leading slash (/)',vim.log.levels.WARN)return end;return o(nil,m,t,2,q)end;b.insert_node=function(m,h,g)local u=g;if m.children==nil then m.children={}end;if h<0 then h=#m.children-h end;for v=h,#m.children do local l=m.children[v]m.children[v]=u;u=l end;m.children[#m.children+1]=u end;b.delete_node=function(m,h)if m.children==nil then a('cannot delete node; no children',vim.log.levels.ERROR)return end;if h<0 then h=#m.children-h end;for v=h,#m.children do m.children[v]=m.children[v+1]end;if#m.children==0 then m.children=nil end end;b.find_parent_index=function(m,g)for h,j in ipairs(m.children)do if j==g then return h end end end;b.move_source_target_same_tree=function(m,w,x)if w==x then return end;if x<w then local u=m.children[w]for h=x,w do local g=m.children[h]m.children[h]=u;u=g end else local y=m.children[w]for h=w,x-1 do m.children[h]=m.children[h+1]end;m.children[x-1]=y end end;return b
