local a={}local b=require'mind.node'a.render_cache={}local function c(d)if d.type==b.TreeType.ROOT then return'MindNodeRoot'elseif d.type==b.TreeType.LOCAL_ROOT then return'MindNodeRoot'elseif d.children~=nil then return'MindNodeParent'else return'MindNodeLeaf'end end;local function e(d,f)local g=''local h={}local i=c(d)if d.icon~=nil then g=d.icon;h[#h+1]={group=i,width=#g}end;for j,k in ipairs(d.contents)do g=g..k.text;h[#h+1]={group=i,width=#k.text}end;if d.type==nil then if d.children~=nil then h[#h-#d.contents+1].group='MindNodeParent'elseif d.data==nil and d.url==nil then h[#h-#d.contents+1].group='MindModifierEmpty'end end;if d.type==b.TreeType.LOCAL_ROOT then local l=' '..f.ui.local_marker;g=g..l;h[#h+1]={group='MindLocalMarker',width=#l}end;if d.data~=nil then local l=' '..f.ui.data_marker;g=g..l;h[#h+1]={group='MindDataMarker',width=#l}elseif d.url~=nil then local l=' '..f.ui.url_marker;g=g..l;h[#h+1]={group='MindURLMarker',width=#l}end;if d.is_selected then local l=' '..f.ui.select_marker;g=g..l;h[#h+1]={group='MindSelectMarker',width=#l}end;return g,h end;local function m(d,n,o,p,q,f)local r;if o then if d.type~=nil then r=n;n=n else r=n..f.ui.node_indent_marker..' 'n=n..'  'end else r=n..f.ui.empty_indent_marker..' 'n=n..f.ui.empty_indent_marker..' 'end;local g,h=e(d,f)local s=#r;local t=#p;q[#q+1]={group='MindOpenMarker',line=t,col_start=0,col_end=#r}if d.children~=nil then if d.is_expanded then local u=' 'local v=s+#u;q[#q+1]={group='MindOpenMarker',line=t,col_start=s,col_end=v}p[#p+1]=r..u..g;for j,w in ipairs(h)do s=v;v=s+w.width;q[#q+1]={group=w.group,line=t,col_start=s,col_end=v}end;for x=1,#d.children-1 do local y=d.children[x]m(y,n,false,p,q,f)end;m(d.children[#d.children],n,true,p,q,f)else local u=' 'local v=s+#u;q[#q+1]={group='MindClosedMarker',line=t,col_start=s,col_end=v}p[#p+1]=r..u..g;for j,w in ipairs(h)do s=v;v=s+w.width;q[#q+1]={group=w.group,line=t,col_start=s,col_end=v}end end else local v=s;p[#p+1]=r..g;for j,w in ipairs(h)do s=v;v=s+w.width;q[#q+1]={group=w.group,line=t,col_start=s,col_end=v}end end end;local function z(A,f)local p={}local q={}m(A,'',true,p,q,f)return p,q end;a.open_window=function(f)local B;if a.render_cache.bufnr~=nil then B=a.render_cache.bufnr else B=vim.api.nvim_create_buf(false,false)vim.api.nvim_buf_set_option(B,'filetype','mind')vim.api.nvim_buf_set_option(B,'buftype','nofile')vim.api.nvim_exec("vsp",false)vim.api.nvim_exec("wincmd H",false)vim.api.nvim_win_set_width(0,f.ui.width)vim.api.nvim_win_set_buf(0,B)vim.api.nvim_win_set_option(0,'nu',false)vim.api.nvim_win_set_option(0,'rnu',false)end;return B end;a.render=function(A,B,f)local p,q=z(A,f)vim.api.nvim_buf_set_option(B,'modifiable',true)vim.api.nvim_buf_set_lines(B,0,-1,true,p)for j,w in ipairs(q)do vim.api.nvim_buf_add_highlight(B,0,w.group,w.line,w.col_start,w.col_end)end;vim.api.nvim_buf_set_option(B,'modifiable',false)a.render_cache={tree_uid=A.uid,bufnr=B}end;a.rerender=function(A,f)if a.render_cache.tree_uid~=nil and A.uid==a.render_cache.tree_uid then a.render(A,a.render_cache.bufnr,f)end end;a.with_cursor=function(C)local r=vim.api.nvim_win_get_cursor(0)[1]-1;C(r)end;a.with_input=function(D,E,C)vim.ui.input({prompt=D,default=E},function(F)if F~=nil then C(F)end end)end;a.with_confirmation=function(D,C)vim.ui.input({prompt=D..' (y/N) '},function(F)if F~=nil and F=='y'then C()end end)end;return a
