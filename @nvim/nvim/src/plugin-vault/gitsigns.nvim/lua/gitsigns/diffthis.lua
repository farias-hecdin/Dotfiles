local a=vim.api;local b=require('gitsigns.async').void;local c=require('gitsigns.async').scheduler;local d=require('gitsigns.async').wrap;local e=require('gitsigns.cache')local f=e.cache;local g=require('gitsigns.util')local h=require('gitsigns.manager')local i=require('gitsigns.message')local j=require('gitsigns.debounce').throttle_by_id;local k=d(vim.ui.input,2)local l={}local m=b(function(n,o,p)local q=f[n]local r=q:get_compare_rev(g.calc_base(p))local s;if g.calc_base(p)==g.calc_base(q.base)then s=assert(q.compare_text)else local t;s,t=q.git_obj:get_show_text(r)if t then error(t,2)end;c()if vim.bo[n].fileformat=='dos'then s=g.strip_cr(s)end end;local u=vim.bo[o].modifiable;vim.bo[o].modifiable=true;g.set_lines(o,0,-1,s)vim.bo[o].modifiable=u;vim.bo[o].modified=false;vim.bo[o].filetype=vim.bo[n].filetype;vim.bo[o].bufhidden='wipe'end)local v=b(function(n,o,p)local q=f[n]local w=g.buf_lines(o)q.git_obj:stage_lines(w)c()vim.bo[o].modified=false;if g.calc_base(p)==g.calc_base(q.base)then q.compare_text=w;h.update(n,q)end end)local function x(n,p)local q=assert(f[n])local y=q:get_compare_rev(g.calc_base(p))local z=q:get_rev_bufname(y)if g.bufexists(z)then return z end;local A=a.nvim_create_buf(false,true)a.nvim_buf_set_name(A,z)local B,t=pcall(m,n,A,p)if not B then i.error(t)c()a.nvim_buf_delete(A,{force=true})return end;if y==':0'then vim.bo[A].buftype='acwrite'a.nvim_create_autocmd('BufReadCmd',{group='gitsigns',buffer=A,callback=function()m(n,A,p)end})a.nvim_create_autocmd('BufWriteCmd',{group='gitsigns',buffer=A,callback=function()v(n,A,p)end})else vim.bo[A].buftype='nowrite'vim.bo[A].modifiable=false end;return z end;local function C(p,D)local n=a.nvim_get_current_buf()local z=x(n,p)if not z then return end;D=D or{}vim.cmd(table.concat({'keepalt',D.split or'aboveleft',D.vertical and'vertical'or'','diffsplit',z},' '))end;l.diffthis=b(function(p,D)if vim.wo.diff then return end;local n=a.nvim_get_current_buf()local q=f[n]if not q then return end;local E=a.nvim_get_current_win()if not p and q.git_obj.has_conflicts then C(':2',D)a.nvim_set_current_win(E)D.split='belowright'C(':3',D)else C(p,D)end;a.nvim_set_current_win(E)end)l.show=b(function(p)local n=a.nvim_get_current_buf()local z=x(n,p)if not z then return end;vim.cmd.edit(z)end)local function F(n)if not vim.bo[n].modified then return true end;local G;while not vim.tbl_contains({'O','L'},G)do G=k({prompt='Warning: The git index has changed and the buffer was changed as well. [O]K, (L)oad File:'})end;return G=='L'end;l.update=j(b(function(n)if not vim.wo.diff then return end;local q=f[n]local z=q:get_rev_bufname()for H,I in ipairs(a.nvim_list_wins())do if a.nvim_win_is_valid(I)then local J=a.nvim_win_get_buf(I)local K=a.nvim_buf_get_name(J)if K==z or vim.startswith(K,'fugitive://')then if F(J)then a.nvim_buf_call(J,function()vim.cmd.doautocmd('BufReadCmd')vim.cmd.diffthis()end)end end end end end))return l
