local a=require("vim.lsp.util")local b=vim.api.nvim_create_augroup;local c=vim.api.nvim_create_autocmd;local d="LightbulbSign"local e="LightbulbGroup"local f={}local g=require("nvim-lsp-extras.config")local h={}local i=function()local j=vim.fn.line(".")if j==f[1]then return false end;f={j}return true end;local k=function(l,m)local n=l and l[1]or{}local o=n.result and#n.result or 0;if o==0 then vim.fn.sign_unplace(e)return end;if g.get("lightbulb").diagnostic_only and#vim.diagnostic.get(0,{lnum=vim.fn.line(".")-1})==0 then vim.fn.sign_unplace(e)return end;if i()then vim.fn.sign_unplace(e)end;vim.fn.sign_place(0,e,d,m.bufnr,{lnum=vim.fn.line("."),priority=1000})end;local p=function()if vim.fn.mode()~="n"then return end;local q=vim.api.nvim_get_current_buf()local r={diagnostics=vim.lsp.diagnostic.get_line_diagnostics(q)}local s=a.make_range_params()s.context=r;local t="textDocument/codeAction"vim.lsp.buf_request_all(q,t,s,function(l)k(l,{bufnr=q,method=t,params=s})end)end;h.setup=function(u)if not u.supports_method("textDocument/codeAction")then return end;vim.fn.sign_define(d,{text=g.get("lightbulb").icon,texthl="DiagnosticInfo"})local v=b("SetupLightbulb",{clear=false})vim.api.nvim_clear_autocmds({group=v,pattern="<buffer>"})c({"CursorHold","CursorMoved"},{group=v,pattern="<buffer>",callback=function()local w=vim.lsp.get_active_clients()if#w<1 then return end;p()end,desc="Start lightbulb for code actions"})end;return h
