local a=require("which-key.keys")local b={}local c=vim.health.start or vim.health.report_start;local d=vim.health.ok or vim.health.report_ok;local e=vim.health.warn or vim.health.report_warn;local f=vim.health.error or vim.health.report_error;local g=vim.health.info or vim.health.report_info;function b.check()c("WhichKey: checking conflicting keymaps")local h=0;for i,j in pairs(a.mappings)do a.update_keymaps(j.mode,j.buf)j.tree:walk(function(k)local l=0;for i in pairs(k.children)do l=l+1 end;local m=not k.mapping or k.mapping.group==true and not k.mapping.cmd;if k.prefix_i~=""and l>0 and not m then h=h+1;local n=("conflicting keymap exists for mode **%q**, lhs: **%q**"):format(j.mode,k.mapping.prefix)e(n)local o=k.mapping.cmd or" "g(("rhs: `%s`"):format(o))end end)end;if h==0 then d("No conflicting keymaps found")return end;for i,p in ipairs(a.duplicates)do local n=""if p.buf==p.other.buffer then n="duplicate keymap"else n="buffer-local keymap overriding global"end;n=(n.." for mode **%q**, buf: %d, lhs: **%q**"):format(p.mode,p.buf or 0,p.prefix)if p.buf==p.other.buffer then f(n)else e(n)end;g(("old rhs: `%s`"):format(p.other.rhs or""))g(("new rhs: `%s`"):format(p.cmd or""))end end;return b
