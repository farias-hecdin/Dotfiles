local a=require"fzf-lua.path"local b=require"fzf-lua.utils"local c=require"fzf-lua.actions"local d={}d._has_devicons,d._devicons=pcall(require,"nvim-web-devicons")d._devicons_path=d._has_devicons and d._devicons and d._devicons.setup and debug.getinfo(d._devicons.setup,"S").source:gsub("^@","")d._devicons_geticons=function()if not d._has_devicons or not d._devicons or not d._devicons.get_icons then return end;if d.__DEVICONS then return d.__DEVICONS end;local e=d._devicons.get_icons()if not e or vim.tbl_isempty(e)then print("[Fzf-lua] error: devicons.get_icons() is nil or empty!")return end;local f=e[1]or{}d.__DEVICONS={["<default>"]={name=f.name or"Default",icon=f.icon or"",color=f.color or"#6d8086"}}for g,h in pairs(e)do if type(g)=="string"then d.__DEVICONS[g]={name=h.name or g,icon=h.icon or"",color=h.color or(function()local i="DevIcon"..(h.name or g)local j=b.hexcol_from_hl(i,"fg")if j and#j>0 then return j end end)()}end end;return d.__DEVICONS end;d.__resume_data={}d.set_pid=function(k)d.__pid=k end;d.get_pid=function()return d.__pid end;function d.reset_defaults()local l=require("fzf-lua.defaults")d.DEFAULTS=l;d.defaults=l.defaults;d.globals=b.deepcopy(d.defaults)l.globals=d.globals end;d.reset_defaults()function d.normalize_opts(m,n)if not m then m={}end;if type(m)=="function"then m=m()end;local o=function(l)return l and{fzf=b.map_tolower(l.fzf),builtin=b.map_tolower(l.builtin)}or nil end;m.keymap=o(m.keymap)m.actions=b.map_tolower(m.actions)n.keymap=o(n.keymap)n.actions=b.map_tolower(n.actions)if d.globals.actions then d.globals.actions.files=b.map_tolower(d.globals.actions.files)d.globals.actions.buffers=b.map_tolower(d.globals.actions.buffers)end;d.globals.keymap=o(d.globals.keymap)m.__call_opts=m.__call_opts or b.deepcopy(m)if type(n._actions)=="function"then n.actions=vim.tbl_deep_extend("keep",n.actions or{},n._actions())end;m=vim.tbl_deep_extend("keep",m,b.tbl_deep_clone(n))for p,g in ipairs({"winopts","keymap","fzf_opts","fzf_tmux_opts","previewers","hls"})do m[g]=vim.tbl_deep_extend("keep",type(m[g])=="function"and m[g]()or m[g]or{},type(d.globals[g])=="function"and d.globals[g]()or type(d.globals[g])=="table"and b.tbl_deep_clone(d.globals[g])or{})end;local q=m.winopts_fn or d.globals.winopts_fn;if type(q)=="function"then m.winopts=vim.tbl_deep_extend("force",m.winopts,q()or{})end;for p,g in ipairs({"file_ignore_patterns"})do for p,l in ipairs({n,d.globals})do if l[g]then for p,r in ipairs(l[g])do if not m[g]then m[g]={}end;table.insert(m[g],r)end end end end;for p,s in ipairs({"fzf_args","fzf_cli_args","fzf_raw_args"})do if m[s]==nil then m[s]=d.globals[s]end;local t="%-%-prompt="local u=".-"local v=m[s]and m[s]:match(t.."(.)")if v and v~=[[']]and v~=[["]]then v=""u="[^%s]+"end;if v then local w=t..("%s(%s)%s"):format(v,u,v)local x=t..("%s%s%s"):format(v,u,v)if m[s]:match(x)then m.prompt=m[s]:match(w)m[s]=m[s]:gsub(x,"")end end end;local function y(z,A,B)if A[z]~=nil then return A[z]else return B[z]end end;m.global_resume=y("global_resume",m,d.globals)for p,z in ipairs({"file_icons","git_icons","color_icons"})do local C=y("global_"..z,m,d.globals)if C~=nil then m[z]=m[z]and C end end;local D={{"winopts.row","winopts.win_row"},{"winopts.col","winopts.win_col"},{"winopts.width","winopts.win_width"},{"winopts.height","winopts.win_height"},{"winopts.border","winopts.win_border"},{"winopts.on_create","winopts.window_on_create"},{"winopts.preview.wrap","preview_wrap"},{"winopts.preview.border","preview_border"},{"winopts.preview.hidden","preview_opts"},{"winopts.preview.vertical","preview_vertical"},{"winopts.preview.horizontal","preview_horizontal"},{"winopts.preview.layout","preview_layout"},{"winopts.preview.flip_columns","flip_columns"},{"winopts.preview.default","default_previewer"},{"winopts.preview.delay","previewers.builtin.delay"},{"winopts.preview.title","previewers.builtin.title"},{"winopts.preview.title_pos","winopts.preview.title_align"},{"winopts.preview.scrollbar","previewers.builtin.scrollbar"},{"winopts.preview.scrollchar","previewers.builtin.scrollchar"},{"diag_icons","lsp.lsp_icons"},{"cwd_header","show_cwd_header"},{"cwd_prompt","show_cwd_prompt"},{"resume","continue_last_search"},{"resume","repeat_last_search"},{"hls.normal","winopts.hl_normal"},{"hls.border","winopts.hl_border"},{"hls.cursor","previewers.builtin.hl_cursor"},{"hls.cursorline","previewers.builtin.hl_cursorline"},{"hls","winopts.hl"}}for p,E in ipairs(D)do local F,G=E[1],E[2]local H=b.map_get(m,G)or b.map_get(d.globals,G)local I=b.map_get(m,F)if H~=nil then if type(H)=="table"and type(I)=="table"then b.map_set(m,F,vim.tbl_deep_extend("keep",I,H))else b.map_set(m,F,H)end;b.map_set(m,G,nil)end end;m.hls=vim.tbl_deep_extend("keep",m.hls or{},d.globals.__HLS)for p,J in ipairs(m._cached_hls or{})do local i=m.hls[J]assert(i~=nil)local p,K=b.ansi_from_hl(i)b.cache_ansi_escseq(i,K)end;if type(m.previewer)=="function"then m.previewer=m.previewer()end;if type(m.previewer)=="table"then m.previewer=vim.tbl_deep_extend("keep",m.previewer,d.globals.previewers.builtin)end;if m.cwd and#m.cwd>0 then m.cwd=vim.fn.expand(m.cwd)if not vim.loop.fs_stat(m.cwd)then b.warn(("Unable to access '%s', removing 'cwd' option."):format(m.cwd))m.cwd=nil else if not a.starts_with_separator(m.cwd)then m.cwd=a.join({vim.loop.cwd(),m.cwd})end end end;m.git_icons=m.git_icons and a.is_git_repo(m,true)local L=function(M,N,O)if M and vim.fn.executable(M)~=1 then N(("'%s' is not a valid executable, %s"):format(M,O))return false end;return true end;m.fzf_bin=m.fzf_bin or d.globals.fzf_bin;m.fzf_bin=m.fzf_bin and vim.fn.expand(m.fzf_bin)or nil;if not m.fzf_bin or not L(m.fzf_bin,b.warn,"fallback to 'fzf'.")then m.fzf_bin="fzf"if vim.fn.executable(m.fzf_bin)~=1 then local P,Q=pcall(vim.api.nvim_call_function,"fzf#exec",{})if P and Q then m.fzf_bin=Q end end;if not L(m.fzf_bin,b.err,"aborting. Please make sure 'fzf' is in installed.")then return nil end end;m._is_skim=m.fzf_bin:find("sk")~=nil;if not m._is_skim then local R,S,T=b.fzf_version(m)m.__FZF_VERSION=R;if not m.__FZF_VERSION then b.err(string.format("'fzf --version' failed with error %s: %s",S,T))return nil elseif m.__FZF_VERSION<0.24 then b.err(string.format("fzf version %.2f is lower than minimum (0.24), aborting.",m.__FZF_VERSION))return nil elseif m.__FZF_VERSION<0.27 then m.fzf_opts=m.fzf_opts or{}m.fzf_opts["--border"]=false end end;m._is_fzf_tmux=vim.env.TMUX and m.fzf_bin:match("fzf%-tmux$")m._set_pid=d.set_pid;m._get_pid=d.get_pid;m._normalized=true;return m end;d.bytecode=function(s,U)local V=b.strsplit(s,".")local W=d;for X=1,#V do W=W[V[X]]if not W then break end;if X==#V and type(W)==U then return string.dump(W,true)end end end;d.set_action_helpstr=function(Y,Z)assert(type(Y)=="function")d._action_to_helpstr[Y]=Z end;d.get_action_helpstr=function(Y)return d._action_to_helpstr[Y]end;d._action_to_helpstr={[c.dummy_abort]="abort",[c.file_edit]="file-edit",[c.file_edit_or_qf]="file-edit-or-qf",[c.file_split]="file-split",[c.file_vsplit]="file-vsplit",[c.file_tabedit]="file-tabedit",[c.file_sel_to_qf]="file-selection-to-qf",[c.file_sel_to_ll]="file-selection-to-loclist",[c.file_switch]="file-switch",[c.file_switch_or_edit]="file-switch-or-edit",[c.buf_edit]="buffer-edit",[c.buf_edit_or_qf]="buffer-edit-or-qf",[c.buf_sel_to_qf]="buffer-selection-to-qf",[c.buf_sel_to_ll]="buffer-selection-to-loclist",[c.buf_split]="buffer-split",[c.buf_vsplit]="buffer-vsplit",[c.buf_tabedit]="buffer-tabedit",[c.buf_del]="buffer-delete",[c.buf_switch]="buffer-switch",[c.buf_switch_or_edit]="buffer-switch-or-edit",[c.colorscheme]="set-colorscheme",[c.run_builtin]="run-builtin",[c.ex_run]="edit-cmd",[c.ex_run_cr]="exec-cmd",[c.exec_menu]="exec-menu",[c.search]="edit-search",[c.search_cr]="exec-search",[c.goto_mark]="goto-mark",[c.goto_jump]="goto-jump",[c.keymap_apply]="keymap-apply",[c.spell_apply]="spell-apply",[c.set_filetype]="set-filetype",[c.packadd]="packadd",[c.help]="help-open",[c.help_vert]="help-vertical",[c.help_tab]="help-tab",[c.man]="man-open",[c.man_vert]="man-vertical",[c.man_tab]="man-tab",[c.git_switch]="git-switch",[c.git_checkout]="git-checkout",[c.git_reset]="git-reset",[c.git_stage]="git-stage",[c.git_unstage]="git-unstage",[c.git_stage_unstage]="git-stage-unstage",[c.git_stash_pop]="git-stash-pop",[c.git_stash_drop]="git-stash-drop",[c.git_stash_apply]="git-stash-apply",[c.git_buf_edit]="git-buffer-edit",[c.git_buf_tabedit]="git-buffer-tabedit",[c.git_buf_split]="git-buffer-split",[c.git_buf_vsplit]="git-buffer-vsplit",[c.git_yank_commit]="git-yank-commit",[c.arg_add]="arg-list-add",[c.arg_del]="arg-list-delete",[c.grep_lgrep]="grep<->lgrep",[c.sym_lsym]="sym<->lsym",[c.tmux_buf_set_reg]="set-register",[c.paste_register]="paste-register",[c.set_qflist]="set-{qf|loc}list",[c.apply_profile]="apply-profile",[c.complete_insert]="complete-insert"}return d
