local a=require"fzf-lua.path"local b=require"fzf-lua.shell"local c=require"fzf-lua.utils"local d=require"fzf-lua.class"local e={}e.base=d:extend()function e.base:new(f,g)f=f or{}self.type="cmd"self.cmd=f.cmd;self.args=f.args or""self.opts=g;return self end;function e.base:preview_window(h)return nil end;function e.base:preview_offset()if self.opts.line_field_index then return("+{%d}-/2"):format(self.opts.line_field_index)end end;function e.base:fzf_delimiter()if not self.opts.line_field_index then return end;local i=self.opts.fzf_opts and self.opts.fzf_opts["--delimiter"]if not i then i="[:]"elseif not i:match(":")then if i:match("%[.*%]")then i=i:match("(%[.*)%]")..":]"else i=i:match("^'?(.*)'$?")or i;i="["..c.rg_escape(i):gsub("%]","\\]")..":]"end end;return i end;e.cmd=e.base:extend()function e.cmd:new(f,g)e.cmd.super.new(self,f,g)return self end;function e.cmd:format_cmd(j,k,l,m)return string.format([[%s %s %s $(%s)]],j,k or"",m or"",l)end;function e.cmd:cmdline(f)f=f or{}f.action=f.action or self:action(f)return self:format_cmd(self.cmd,self.args,f.action)end;function e.cmd:action(f)f=f or{}local n=b.raw_action(function(o,h,h)local p=a.entry_to_file(o[1],self.opts)return p.bufname or p.path end,self.opts.field_index_expr or"{}",self.opts.debug)return n end;e.bat=e.cmd:extend()function e.bat:new(f,g)e.bat.super.new(self,f,g)self.theme=f.theme;return self end;function e.bat:cmdline(f)f=f or{}f.action=f.action or self:action(f)local m=""if self.theme then m=string.format([[ --theme="%s"]],self.theme)end;if self.opts.line_field_index then m=m..string.format(" --highlight-line={%d}",self.opts.line_field_index)end;return self:format_cmd(self.cmd,self.args,f.action,m)end;e.head=e.cmd:extend()function e.head:new(f,g)e.head.super.new(self,f,g)return self end;function e.head:cmdline(f)f=f or{}f.action=f.action or self:action(f)local q="--lines=-0"return self:format_cmd(self.cmd,self.args,f.action,q)end;e.cmd_async=e.base:extend()function e.cmd_async:new(f,g)e.cmd_async.super.new(self,f,g)return self end;local r=function(s,t)local u=1;local v=s;local w=c.rg_escape(t)if not w or not v then return u end;local x=vim.fn.executable("rg")==1 and{"rg","--line-number"}or{"grep","-n","-P"}w=w:gsub("\\%$$","\\r??%$")local j=c.tbl_deep_clone(x)table.insert(j,w)table.insert(j,v)local y=c.io_system(j)if not c.shell_error()then u=tonumber(y:match("[^:]+"))or 1 else c.warn(("previewer: unable to find pattern '%s' in file '%s'"):format(w,s))end;return u end;function e.cmd_async:parse_entry_and_verify(z)local p=a.entry_to_file(z,self.opts)local v=p.bufname or p.path or""if self.opts._ctag and p.line<=1 then local u=p.stripped:match("[^:]+(%d+):")local A=a.entry_to_ctag(p.stripped,true)if not u and A then p.ctag=A;p.line=r(v,p.ctag)end end;local B=nil;if#v==0 or not vim.loop.fs_stat(v)then B=([[echo "%s: NO SUCH FILE OR ACCESS DENIED"]]):format(v and#v>0 and vim.fn.shellescape(v)or"<null>")end;return v,p,B end;function e.cmd_async:cmdline(f)f=f or{}local n=b.raw_preview_action_cmd(function(o)local v,h,B=self:parse_entry_and_verify(o[1])local j=B or("%s %s %s"):format(self.cmd,self.args,vim.fn.shellescape(v))return j end,"{}",self.opts.debug)return n end;e.bat_async=e.cmd_async:extend()function e.bat_async:new(f,g)e.bat_async.super.new(self,f,g)self.theme=f.theme;return self end;function e.bat_async:cmdline(f)f=f or{}local n=b.raw_preview_action_cmd(function(o,C)local v,p,B=self:parse_entry_and_verify(o[1])local D=""if p.ctag then local E=math.max(1,p.line-C/2)local F=E+C-1;D=("--line-range=%d:%d"):format(E,F)end;local j=B or("%s %s %s %s %s %s"):format(self.cmd,self.args,self.theme and string.format([[--theme="%s"]],self.theme)or"",self.opts.line_field_index and string.format("--highlight-line=%d",p.line)or"",D,vim.fn.shellescape(v))return j end,"{}",self.opts.debug)return n end;e.git_diff=e.base:extend()function e.git_diff:new(f,g)e.git_diff.super.new(self,f,g)self.cmd_deleted=a.git_cwd(f.cmd_deleted,g)self.cmd_modified=a.git_cwd(f.cmd_modified,g)self.cmd_untracked=a.git_cwd(f.cmd_untracked,g)self.pager=f.pager or g.preview_pager;do local G=f._fn_git_icons and f._fn_git_icons()self.git_icons={}for h,H in ipairs({"D","M","R","A","C","T","?"})do self.git_icons[H]=G and G[H]and c.lua_regex_escape(G[H].icon)or H end end;return self end;function e.git_diff:cmdline(f)f=f or{}local n=b.raw_preview_action_cmd(function(o,C,I)if not o or vim.tbl_isempty(o)then c.warn("shell error while running preview action.")return end;local J=o[1]:match(self.git_icons["D"]..c.nbsp)~=nil;local K=o[1]:match("["..self.git_icons["M"]..self.git_icons["R"]..self.git_icons["A"]..self.git_icons["T"].."]"..c.nbsp)~=nil;local L=o[1]:match("["..self.git_icons["?"]..self.git_icons["C"].."]"..c.nbsp)~=nil;local s=a.entry_to_file(o[1],self.opts)local j=nil;if K then j=self.cmd_modified elseif J then j=self.cmd_deleted elseif L then j=self.cmd_untracked end;if not j then return""end;local M=""if self.pager and#self.pager>0 and vim.fn.executable(self.pager:match("[^%s]+"))==1 then M="| "..self.pager end;if not j:match("%%s")then j=j.." %s"end;j=j:format(vim.fn.shellescape(s.path))j=("LINES=%d;COLUMNS=%d;FZF_PREVIEW_LINES=%d;FZF_PREVIEW_COLUMNS=%d;%s %s"):format(C,I,C,I,j,M)j="sh -c "..vim.fn.shellescape(j)return j end,"{}",self.opts.debug)return n end;e.man_pages=e.base:extend()function e.man_pages:new(f,g)e.man_pages.super.new(self,f,g)if not self.cmd then if c.is_darwin()then self.cmd=vim.fn.executable("bat")==1 and[[man -P "bat -l man -p --color=always" %s]]or"man -P cat %s"else self.cmd=vim.fn.executable("bat")==1 and"man -c %s | bat -l man -p --color=always"or"man %s"end;self.cmd=self.cmd or vim.fn.executable("bat")==1 and"bat -p -l help --color=always %s"or"cat %s"end;return self end;function e.man_pages:cmdline(f)f=f or{}local n=b.raw_preview_action_cmd(function(o)local N=o[1]:match("[^[,( ]+")local j=self.cmd:format(vim.fn.shellescape(N))return j end,"{}",self.opts.debug)return n end;e.help_tags=e.base:extend()function e.help_tags:new(f,g)e.help_tags.super.new(self,f,g)self.cmd=self.cmd or vim.fn.executable("bat")==1 and"bat -p -l help --color=always %s"or"cat %s"return self end;function e.help_tags:cmdline(f)f=f or{}local n=b.raw_preview_action_cmd(function(o)local O=o[1]:match("[^%s]+$")local t=o[1]:match("^[^%s]+")local P=a.extension(O)local j=self.cmd:format(vim.fn.shellescape(O))if self.cmd:match("^bat ")then local u=r(O,P=="md"and t or string.format("*%s*",t))if tonumber(u)>0 then j=j..string.format(" --line-range=%d:",tonumber(u))end end;return j end,"{}",self.opts.debug)return n end;return e
