local a=require"fzf-lua.core"local b=require"fzf-lua.config"local c=require"fzf-lua.make_entry"local d={}d.oldfiles=function(e)e=b.normalize_opts(e,b.globals.oldfiles)if not e then return end;local f=vim.api.nvim_get_current_buf()local g=vim.api.nvim_buf_get_name(f)local h={}local i={}if e.include_current_session then for j,k in ipairs(vim.split(vim.fn.execute(":buffers! t"),"\n"))do local l=tonumber(k:match("%s*(%d+)"))if l then local m=vim.api.nvim_buf_get_name(l)local n=not e.stat_file and true or vim.loop.fs_stat(m)if#m>0 and n and l~=f then i[m]=true;table.insert(h,m)end end end end;local o=function(p)local function q(r,s)r=c.file(r,e)if not r then return end;p(r,function(t)coroutine.resume(s)if t then p(nil)end end)coroutine.yield()end;coroutine.wrap(function()local s=coroutine.running()for j,m in ipairs(h)do q(m,s)end;for j,m in ipairs(vim.v.oldfiles)do local n=not e.stat_file and true or vim.loop.fs_stat(m)if n and m~=g and not i[m]then q(m,s)end end;p(nil)end)()end;e.cwd=e.cwd or vim.loop.cwd()e=a.set_header(e,e.headers or{"cwd"})return a.fzf_exec(o,e)end;return d
