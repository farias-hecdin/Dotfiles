local a=require"fzf-lua.core"local b=require"fzf-lua.utils"local c=require"fzf-lua.shell"local d=require"fzf-lua.config"local e=require"fzf-lua.make_entry"local f={}local function g(h)local i=b.find_version()if not i and h:match("%-printf")then b.warn("POSIX find does not support the '-printf' option.".." Install 'fd' or set 'files.find_opts' to '-type f'.")end end;local j=function(h)if h.raw_cmd and#h.raw_cmd>0 then return h.raw_cmd end;if h.cmd and#h.cmd>0 then return h.cmd end;local k=nil;if vim.fn.executable("fdfind")==1 then k=string.format("fdfind %s",h.fd_opts)elseif vim.fn.executable("fd")==1 then k=string.format("fd %s",h.fd_opts)elseif vim.fn.executable("rg")==1 then k=string.format("rg %s",h.rg_opts)else g(h.find_opts)k=string.format("find -L . %s",h.find_opts)end;return k end;f.files=function(h)h=d.normalize_opts(h,d.globals.files)if not h then return end;h.cmd=j(h)local l=a.mt_cmd_wrapper(h)h=a.set_header(h,h.headers or{"cwd"})return a.fzf_exec(l,h)end;f.args=function(h)h=d.normalize_opts(h,d.globals.args)if not h then return end;h.__fn_reload=h.__fn_reload or function(m)local n=vim.fn.execute("args")n=b.strsplit(n,"%s\n")return function(o)for m,p in ipairs(n)do if p:match("^%[")then p=p:gsub("^%[",""):gsub("%]$","")end;local q=vim.loop.fs_stat(p)if h.files_only==false or q and q.type=="file"then p=e.file(p,h)o(p)end end;o(nil)end end;local r,s=c.reload_action_cmd(h,"{+}")local l=r:gsub("%-%-%s+{%+}$","")h.__reload_cmd=r;h._fn_pre_fzf=function()c.set_protected(s)end;h=a.set_header(h,h.headers or{"actions","cwd"})return a.fzf_exec(l,h)end;return f
