local a=require"fzf-lua.core"local b=require"fzf-lua.utils"local c=require"fzf-lua.shell"local d=require"fzf-lua.config"local e=require"fzf-lua.actions"local function f()if vim.g.colors_name then return vim.g.colors_name else return"default"end end;local g={}g.colorschemes=function(h)h=d.normalize_opts(h,d.globals.colorschemes)if not h then return end;local i=f()local j=vim.o.background;local k=h.colors or vim.fn.getcompletion("","color")if type(h.ignore_patterns)=="table"then k=vim.tbl_filter(function(l)for m,n in ipairs(h.ignore_patterns)do if l:match(n)then return false end end;return true end,k)end;h.fzf_opts["--no-multi"]=""if h.live_preview then h.fzf_opts["--preview-window"]="nohidden:right:0"h.preview=c.raw_action(function(o)if h.live_preview and o then local p=o[1]vim.cmd("colorscheme "..p)end end,nil,h.debug)end;h.fn_selected=function(q)if h.live_preview and(not q or#q[1]>0)then vim.o.background=j;vim.cmd("colorscheme "..i)vim.o.background=j end;if q then e.act(h.actions,q)end;if h.post_reset_cb then h.post_reset_cb()end end;a.fzf_exec(k,h)end;g.highlights=function(h)h=d.normalize_opts(h,d.globals.highlights)if not h then return end;local r=function(s)local t=vim.fn.getcompletion("","highlight")local function u(v,w)local l=b.ansi_from_hl(v,v)s(l,function(x)if w then coroutine.resume(w)end;if x then s(nil)end end)if w then coroutine.yield()end end;local function y(z,A,w)for m,B in ipairs(z)do A(B,w)end;s(nil,function()if w then coroutine.resume(w)end end)end;local C=h.coroutinify==nil and false or h.coroutinify;if not C then y(t,u)else coroutine.wrap(function()y(t,function(l,w)vim.schedule(function()u(l,w)end)end,coroutine.running())coroutine.yield()end)()end end;h.fzf_opts["--no-multi"]=""a.fzf_exec(r,h)end;return g
