local a={}local b={}a.setup=function(c)_G.MiniTabline=a;c=b.setup_config(c)b.apply_config(c)vim.api.nvim_exec([[function! MiniTablineSwitchBuffer(buf_id, clicks, button, mod)
        execute 'buffer' a:buf_id
      endfunction]],false)b.create_default_hl()end;a.config={show_icons=true,set_vim_settings=true,tabpage_section='left'}a.make_tabline_string=function()if b.is_disabled()then return''end;b.make_tabpage_section()b.list_tabs()b.finalize_labels()b.fit_width()return b.concat_tabs()end;b.default_config=a.config;b.tabs={}b.tablineat=vim.fn.has('tablineat')b.unnamed_buffers_seq_ids={}b.path_sep=package.config:sub(1,1)b.tabpage_section=''b.center_buf_id=nil;b.setup_config=function(c)vim.validate({config={c,'table',true}})c=vim.tbl_deep_extend('force',b.default_config,c or{})vim.validate({show_icons={c.show_icons,'boolean'},set_vim_settings={c.set_vim_settings,'boolean'},tabpage_section={c.tabpage_section,'string'}})return c end;b.apply_config=function(c)a.config=c;if c.set_vim_settings then vim.o.showtabline=2;vim.o.hidden=true end;vim.o.tabline='%!v:lua.MiniTabline.make_tabline_string()'end;b.create_default_hl=function()local d=function(e,f)f.default=true;vim.api.nvim_set_hl(0,e,f)end;d('MiniTablineCurrent',{link='TabLineSel'})d('MiniTablineVisible',{link='TabLineSel'})d('MiniTablineHidden',{link='TabLine'})d('MiniTablineModifiedCurrent',{link='StatusLine'})d('MiniTablineModifiedVisible',{link='StatusLine'})d('MiniTablineModifiedHidden',{link='StatusLineNC'})d('MiniTablineTabpagesection',{link='Search'})d('MiniTablineFill',{link='Normal'})end;b.is_disabled=function()return vim.g.minitabline_disable==true or vim.b.minitabline_disable==true end;b.get_config=function(c)return vim.tbl_deep_extend('force',a.config,vim.b.minitabline_config or{},c or{})end;b.make_tabpage_section=function()local g=vim.fn.tabpagenr('$')if g==1 or b.get_config().tabpage_section=='none'then b.tabpage_section=''return end;local h=vim.fn.tabpagenr()b.tabpage_section=(' Tab %s/%s '):format(h,g)end;b.list_tabs=function()local i={}for j,k in ipairs(vim.api.nvim_list_bufs())do if b.is_buffer_in_minitabline(k)then local l={buf_id=k}l['hl']=b.construct_highlight(k)l['tabfunc']=b.construct_tabfunc(k)l['label'],l['label_extender']=b.construct_label_data(k)table.insert(i,l)end end;b.tabs=i end;b.is_buffer_in_minitabline=function(k)return vim.api.nvim_buf_get_option(k,'buflisted')end;b.construct_highlight=function(k)local m;if k==vim.api.nvim_get_current_buf()then m='Current'elseif vim.fn.bufwinnr(k)>0 then m='Visible'else m='Hidden'end;if vim.api.nvim_buf_get_option(k,'modified')then m='Modified'..m end;return string.format('%%#MiniTabline%s#',m)end;b.construct_tabfunc=function(k)if b.tablineat>0 then return string.format('%%%d@MiniTablineSwitchBuffer@',k)else return''end end;b.construct_label_data=function(k)local n,o;local p=vim.api.nvim_buf_get_name(k)if p~=''then n=vim.fn.fnamemodify(p,':t')o=b.make_path_extender(k)else n=b.make_unnamed_label(k)o=function(q)return q end end;return n,o end;b.make_path_extender=function(k)return function(n)local r=vim.api.nvim_buf_get_name(k)local s=string.format('[^%s]+%s%s$',vim.pesc(b.path_sep),vim.pesc(b.path_sep),vim.pesc(n))return string.match(r,s)or n end end;b.make_unnamed_label=function(k)local n;if vim.api.nvim_buf_get_option(k,'buftype')=='quickfix'then n='*quickfix*'else n=b.is_buffer_scratch(k)and'!'or'*'end;local t=b.get_unnamed_id(k)if t>1 then n=string.format('%s(%d)',n,t)end;return n end;b.is_buffer_scratch=function(k)local u=vim.api.nvim_buf_get_option(k,'buftype')return u=='acwrite'or u=='nofile'end;b.get_unnamed_id=function(k)local v=b.unnamed_buffers_seq_ids[k]if v~=nil then return v end;b.unnamed_buffers_seq_ids[k]=vim.tbl_count(b.unnamed_buffers_seq_ids)+1;return b.unnamed_buffers_seq_ids[k]end;b.finalize_labels=function()local w=b.get_nonunique_tab_ids()while#w>0 do local x=true;for j,k in ipairs(w)do local l=b.tabs[k]local y=l.label;l.label=l.label_extender(l.label)if y~=l.label then x=false end end;if x then break end;w=b.get_nonunique_tab_ids()end;local z,A;local B=b.get_config().show_icons;if B then z,A=pcall(require,'nvim-web-devicons')end;for j,l in pairs(b.tabs)do if B and z then local C=vim.fn.fnamemodify(l.label,':e')local D=A.get_icon(l.label,C,{default=true})l.label=string.format(' %s %s ',D,l.label)else l.label=string.format(' %s ',l.label)end end end;b.get_nonunique_tab_ids=function()local E={}for F,l in ipairs(b.tabs)do local n=l.label;if E[n]==nil then E[n]={F}else table.insert(E[n],F)end end;return vim.tbl_flatten(vim.tbl_filter(function(q)return#q>1 end,E))end;b.fit_width=function()b.update_center_buf_id()local G=1;local H=0;for j,l in pairs(b.tabs)do l.label_width=vim.api.nvim_strwidth(l.label)l.chars_on_left=H;H=H+l.label_width;if l.buf_id==b.center_buf_id then G=H end end;local I=b.compute_display_interval(G,H)b.truncate_tabs_display(I)end;b.update_center_buf_id=function()local J=vim.api.nvim_get_current_buf()if b.is_buffer_in_minitabline(J)then b.center_buf_id=J end end;b.compute_display_interval=function(G,K)local H=vim.o.columns-vim.api.nvim_strwidth(b.tabpage_section)local L=math.min(K,math.floor(G+0.5*H))local M=math.max(1,L-H+1)L=M+math.min(H,K)-1;return{M,L}end;b.truncate_tabs_display=function(I)local N,O=I[1],I[2]local i={}for j,l in ipairs(b.tabs)do local P=l.chars_on_left+1;local Q=l.chars_on_left+l.label_width;if N<=Q and P<=O then local R=math.max(0,N-P)local S=math.max(0,Q-O)l.label=vim.fn.strcharpart(l.label,R,l.label_width-S)table.insert(i,l)end end;b.tabs=i end;b.concat_tabs=function()local T={}for j,l in ipairs(b.tabs)do table.insert(T,('%s%s%s'):format(l.hl,l.tabfunc,l.label:gsub('%%','%%%%')))end;local U=('%s%%X%%#MiniTablineFill#'):format(table.concat(T,''))local V=b.get_config().tabpage_section;if b.tabpage_section~=''then if V=='left'then U=('%%#MiniTablineTabpagesection#%s%s'):format(b.tabpage_section,U)end;if V=='right'then U=('%s%%=%%#MiniTablineTabpagesection#%s'):format(U,b.tabpage_section)end end;return U end;return a
