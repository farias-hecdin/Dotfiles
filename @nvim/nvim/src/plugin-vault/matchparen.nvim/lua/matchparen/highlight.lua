local a=require('matchparen.options').opts;local b=require('matchparen.utils')local c=require('matchparen.search')local d={}local e=vim.api.nvim_create_namespace(a.augroup_name)local f={current=0,match=0}local g=vim.loop.new_timer()if not g then a.debounce_time=nil;g={}end;local function h(i,j)return vim.api.nvim_buf_set_extmark(0,e,i,j,{end_col=j+1,hl_group=a.hl_group})end;local function k(l,m,n,o)f.current=h(l,m)f.match=h(n,o)end;function d.remove()vim.api.nvim_buf_del_extmark(0,e,f.current)vim.api.nvim_buf_del_extmark(0,e,f.match)end;local function p(j,q)local r=vim.api.nvim_get_current_line()q=q or b.is_in_insert_mode()if j>0 and q then local s=r:sub(j,j)if a.matchpairs[s]then return a.matchpairs[s],j-1 end end;local t=j+1;local u=r:sub(t,t)return a.matchpairs[u],j end;function d.update(q)if a.debounce_time then g:stop()end;local i,j=b.get_cursor_pos()if b.is_inside_fold(i)then d.remove()return end;local v;v,j=p(j,q)if not v then d.remove()return end;local w=function()local n,o=c.match_pos(v,i,j)d.remove()if n then k(i,j,n,o or 0)end end;if a.debounce_time then g:start(a.debounce_time,0,function()vim.schedule(w)end)else w()end end;return d
