local a=require('matchparen.syntax')local b=require('matchparen.treesitter')local c=require('matchparen.utils')local d={}local function e(f,g,h,i)local j=c.get_lines(g,i)local k=g-1;local l=1;local m=j[l]local n=h+1;local o;return function()while m do n,o=c.find_forward(m,f,n)if n then return k+l,n-1,o end;l=l+1;m=j[l]end end end;local function p(f,g,h,i)local q=math.max(0,g-i)local j=c.get_lines(q,g-q+1)local k=g-#j;local l=#j;local n=h+1;local o;local r=j[l]and string.reverse(j[l])return function()while r do n,o=c.find_backward(r,f,n)if n then return k+l,n-1,o end;l=l-1;r=j[l]and string.reverse(j[l])end end end;function d.match(f,g,h,s,i,t)t=t or function()return{skip=false}end;local u=s and p or e;for v,w,o in u(f,g,h,i)do local x,y=pcall(t,v,w,o)if not x then return end;if y.stop then return elseif not y.skip then return v,w end end end;local function z(A,B,s)local i=0;local C=s and B or A;return function(D)if D==C then i=i+1 else if i==0 then return{skip=false}else i=i-1 end end;return{skip=true}end end;function d.pair(A,B,g,h,s,t)local f='(['..B..A..'])'local E=vim.api.nvim_win_get_height(0)local F=z(A,B,s)local G;if t then G=function(v,w,D)local H=t(v,w)if H.stop or H.skip then return H else return F(D)end end else G=function(I,I,D)return F(D)end end;return d.match(f,g,h,s,E,G)end;function d.match_pos(J,g,h)local t;b.highlighter=b.get_highlighter()if b.highlighter then t=b.skip_by_region(g,h,J.backward)else t=a.skip_by_region(g,h)end;return d.pair(J.left,J.right,g,h,J.backward,t)end;return d
