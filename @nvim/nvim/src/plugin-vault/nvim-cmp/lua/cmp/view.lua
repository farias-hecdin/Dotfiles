local a=require('cmp.config')local b=require('cmp.utils.async')local c=require('cmp.utils.event')local d=require('cmp.utils.keymap')local e=require('cmp.view.docs_view')local f=require('cmp.view.custom_entries_view')local g=require('cmp.view.wildmenu_entries_view')local h=require('cmp.view.native_entries_view')local i=require('cmp.view.ghost_text_view')local j={}j.new=function()local self=setmetatable({},{__index=j})self.resolve_dedup=b.dedup()self.custom_entries_view=f.new()self.native_entries_view=h.new()self.wildmenu_entries_view=g.new()self.docs_view=e.new()self.ghost_text_view=i.new()self.event=c.new()return self end;j.ready=function(self)return self:_get_entries_view():ready()end;j.on_change=function(self)self:_get_entries_view():on_change()end;j.open=function(self,k,l)local m={}for n,o in ipairs(l)do local p=o:get_source_config().group_index or 0;if not m[p]then m[p]={}end;table.insert(m[p],o)end;local q=vim.tbl_keys(m)table.sort(q,function(r,s)return r~=s and r<s or nil end)local t={}for n,p in ipairs(q)do local u=m[p]or{}local v=false;for n,o in ipairs(u)do if#o:get_entries(k)>0 then if o.is_triggered_by_symbol then v=true;break end end end;local w=k.cursor.col;for x,o in ipairs(u)do if o.offset<=k.cursor.col then if not v or o.is_triggered_by_symbol then local y=o:get_source_config().priority or(#u-(x-1))*a.get().sorting.priority_weight;for n,z in ipairs(o:get_entries(k))do z.score=z.score+y;table.insert(t,z)w=math.min(w,z:get_offset())end end end end;local A=a.get().sorting.comparators;table.sort(t,function(B,C)for n,D in ipairs(A)do local E=D(B,C)if E~=nil then return E end end end)local F=a.get().performance.max_view_entries or 200;t=vim.list_slice(t,1,F)if#t>0 then self:_get_entries_view():open(w,t)self.event:emit('menu_opened',{window=self:_get_entries_view()})break end end;if#t==0 then self:close()end;return#t>0 end;j.close=function(self)if self:visible()then self.event:emit('complete_done',{entry=self:_get_entries_view():get_selected_entry()})end;self:_get_entries_view():close()self.docs_view:close()self.ghost_text_view:hide()self.event:emit('menu_closed',{window=self:_get_entries_view()})end;j.abort=function(self)self:_get_entries_view():abort()self.docs_view:close()self.ghost_text_view:hide()self.event:emit('menu_closed',{window=self:_get_entries_view()})end;j.visible=function(self)return self:_get_entries_view():visible()end;j.scroll_docs=function(self,G)self.docs_view:scroll(G)end;j.select_next_item=function(self,H)self:_get_entries_view():select_next_item(H)end;j.select_prev_item=function(self,H)self:_get_entries_view():select_prev_item(H)end;j.get_offset=function(self)return self:_get_entries_view():get_offset()end;j.get_entries=function(self)return self:_get_entries_view():get_entries()end;j.get_first_entry=function(self)return self:_get_entries_view():get_first_entry()end;j.get_selected_entry=function(self)return self:_get_entries_view():get_selected_entry()end;j.get_active_entry=function(self)return self:_get_entries_view():get_active_entry()end;j._get_entries_view=function(self)self.native_entries_view.event:clear()self.custom_entries_view.event:clear()self.wildmenu_entries_view.event:clear()local I=a.get()local J=self.custom_entries_view;if(I.view and I.view.entries and(I.view.entries.name or I.view.entries))=='wildmenu'then J=self.wildmenu_entries_view elseif(I.view and I.view.entries and(I.view.entries.name or I.view.entries))=='native'then J=self.native_entries_view end;J.event:on('change',function()self:on_entry_change()end)return J end;j.on_entry_change=b.throttle(function(self)if not self:visible()then return end;local z=self:get_selected_entry()if z then for n,I in ipairs(a.get().confirmation.get_commit_characters(z:get_commit_characters()))do d.listen('i',I,function(...)self.event:emit('keymap',...)end)end;z:resolve(vim.schedule_wrap(self.resolve_dedup(function()if not self:visible()then return end;self.docs_view:open(z,self:_get_entries_view():info())end)))else self.docs_view:close()end;z=z or self:get_first_entry()if z then self.ghost_text_view:show(z)else self.ghost_text_view:hide()end end,20)return j
