local a=require('cmp.utils.async')describe('utils.async',function()it('throttle',function()local b=0;local c;local d=a.throttle(function()b=b+1 end,100)c=vim.loop.now()d.timeout=100;d()vim.wait(1000,function()return b==1 end)assert.is.truthy(math.abs(d.timeout-(vim.loop.now()-c))<10)c=vim.loop.now()d.timeout=500;d()vim.wait(1000,function()return b==2 end)assert.is.truthy(math.abs(d.timeout-(vim.loop.now()-c))<10)d.timeout=500;d()vim.wait(100)c=vim.loop.now()d.timeout=100;d()vim.wait(1000,function()return b==3 end)assert.is.truthy(math.abs(vim.loop.now()-c)<10)end)it('step',function()local e=false;local f={}a.step(function(g)vim.defer_fn(function()table.insert(f,1)g()end,10)end,function(g)vim.defer_fn(function()table.insert(f,2)g()end,10)end,function(g)vim.defer_fn(function()table.insert(f,3)g()end,10)end,function()e=true end)vim.wait(1000,function()return e end)assert.are.same(f,{1,2,3})end)end)
