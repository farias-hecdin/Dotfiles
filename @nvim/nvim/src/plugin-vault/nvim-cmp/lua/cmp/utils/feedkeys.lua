local a=require('cmp.utils.keymap')local b=require('cmp.utils.misc')local c={}c.call=setmetatable({callbacks={}},{__call=function(self,d,e,f)local g=string.match(e,'i')~=nil;local h=string.match(e,'x')~=nil;local i={}if#d>0 then table.insert(i,{a.t('<Cmd>setlocal lazyredraw<CR>'),'n'})table.insert(i,{a.t('<Cmd>setlocal textwidth=0<CR>'),'n'})table.insert(i,{a.t('<Cmd>setlocal backspace=2<CR>'),'n'})table.insert(i,{d,string.gsub(e,'[itx]',''),true})table.insert(i,{a.t('<Cmd>setlocal %slazyredraw<CR>'):format(vim.o.lazyredraw and''or'no'),'n'})table.insert(i,{a.t('<Cmd>setlocal textwidth=%s<CR>'):format(vim.bo.textwidth or 0),'n'})table.insert(i,{a.t('<Cmd>setlocal backspace=%s<CR>'):format(vim.go.backspace or 2),'n'})end;if f then local j=b.id('cmp.utils.feedkeys.call')self.callbacks[j]=f;table.insert(i,{a.t('<Cmd>call v:lua.cmp.utils.feedkeys.call.run(%s)<CR>'):format(j),'n',true})end;if g then for k=#i,1,-1 do vim.api.nvim_feedkeys(i[k][1],i[k][2]..'i',i[k][3])end else for k=1,#i do vim.api.nvim_feedkeys(i[k][1],i[k][2],i[k][3])end end;if h then vim.api.nvim_feedkeys('','x',true)end end})b.set(_G,{'cmp','utils','feedkeys','call','run'},function(j)if c.call.callbacks[j]then c.call.callbacks[j]()c.call.callbacks[j]=nil end;return''end)return c
