local a=require('cmp.utils.spec')local b=require('cmp.utils.api')local c=require('cmp.utils.feedkeys')local d=require('cmp.utils.keymap')describe('keymap',function()before_each(a.before)it('t',function()for e,f in ipairs({'<F1>','<C-a>','<C-]>','<C-[>','<C-^>','<C-@>','<C-\\>','<Tab>','<S-Tab>','<Plug>(example)','<C-r>="abc"<CR>','<Cmd>normal! ==<CR>'})do assert.are.equal(d.t(f),vim.api.nvim_replace_termcodes(f,true,true,true))assert.are.equal(d.t(f..f),vim.api.nvim_replace_termcodes(f..f,true,true,true))assert.are.equal(d.t(f..f..f),vim.api.nvim_replace_termcodes(f..f..f,true,true,true))end end)it('to_keymap',function()assert.are.equal(d.to_keymap('\n'),'<CR>')assert.are.equal(d.to_keymap('<CR>'),'<CR>')assert.are.equal(d.to_keymap('|'),'<Bar>')end)describe('fallback',function()before_each(a.before)local g=function(h,i)local j={}c.call(h,'',function()i()end)c.call('','',function()if b.is_cmdline_mode()then j.buffer={b.get_current_line()}else j.buffer=vim.api.nvim_buf_get_lines(0,0,-1,false)end;j.cursor=b.get_cursor()end)c.call('','x')return j end;describe('basic',function()it('<Plug>',function()vim.api.nvim_buf_set_keymap(0,'i','<Plug>(pairs)','()<Left>',{noremap=true})vim.api.nvim_buf_set_keymap(0,'i','(','<Plug>(pairs)',{noremap=false})local i=d.fallback(0,'i',d.get_map('i','('))local j=g('i',i)assert.are.same({'()'},j.buffer)assert.are.same({1,1},j.cursor)end)it('<C-r>=',function()vim.api.nvim_buf_set_keymap(0,'i','(','<C-r>="()"<CR><Left>',{})local i=d.fallback(0,'i',d.get_map('i','('))local j=g('i',i)assert.are.same({'()'},j.buffer)assert.are.same({1,1},j.cursor)end)it('callback',function()vim.api.nvim_buf_set_keymap(0,'i','(','',{callback=function()vim.api.nvim_feedkeys('()'..d.t('<Left>'),'int',true)end})local i=d.fallback(0,'i',d.get_map('i','('))local j=g('i',i)assert.are.same({'()'},j.buffer)assert.are.same({1,1},j.cursor)end)it('expr-callback',function()vim.api.nvim_buf_set_keymap(0,'i','(','',{expr=true,noremap=false,silent=true,callback=function()return'()'..d.t('<Left>')end})local i=d.fallback(0,'i',d.get_map('i','('))local j=g('i',i)assert.are.same({'()'},j.buffer)assert.are.same({1,1},j.cursor)end)end)describe('recursive',function()it('non-expr',function()vim.api.nvim_buf_set_keymap(0,'i','(','()<Left>',{expr=false,noremap=false,silent=true})local i=d.fallback(0,'i',d.get_map('i','('))local j=g('i',i)assert.are.same({'()'},j.buffer)assert.are.same({1,1},j.cursor)end)it('expr',function()vim.api.nvim_buf_set_keymap(0,'i','(','"()<Left>"',{expr=true,noremap=false,silent=true})local i=d.fallback(0,'i',d.get_map('i','('))local j=g('i',i)assert.are.same({'()'},j.buffer)assert.are.same({1,1},j.cursor)end)it('expr-callback',function()pcall(function()vim.api.nvim_buf_set_keymap(0,'i','(','',{expr=true,noremap=false,silent=true,callback=function()return d.t('()<Left>')end})local i=d.fallback(0,'i',d.get_map('i','('))local j=g('i',i)assert.are.same({'()'},j.buffer)assert.are.same({1,1},j.cursor)end)end)end)end)describe('realworld',function()before_each(a.before)it('#226',function()d.listen('i','<c-n>',function(e,i)i()end)vim.api.nvim_feedkeys(d.t('iaiueo<CR>a<C-n><C-n>'),'tx',true)assert.are.same({'aiueo','aiueo'},vim.api.nvim_buf_get_lines(0,0,-1,true))end)it('#414',function()d.listen('i','<M-j>',function()vim.api.nvim_feedkeys(d.t('<C-n>'),'int',true)end)vim.api.nvim_feedkeys(d.t('iaiueo<CR>a<M-j><M-j>'),'tx',true)assert.are.same({'aiueo','aiueo'},vim.api.nvim_buf_get_lines(0,0,-1,true))end)it('#744',function()vim.api.nvim_buf_set_keymap(0,'i','<C-r>','recursive',{noremap=true})vim.api.nvim_buf_set_keymap(0,'i','<CR>','<CR>recursive',{noremap=false})d.listen('i','<CR>',function(e,i)i()end)c.call(d.t('i<CR>'),'tx')assert.are.same({'','recursive'},vim.api.nvim_buf_get_lines(0,0,-1,true))end)end)end)
