local a={}a.once=function(b)local c=false;return function(...)if c then return end;c=true;b(...)end end;a.concat=function(d,e)local f={}for g,h in ipairs(d)do table.insert(f,h)end;for g,h in ipairs(e)do table.insert(f,h)end;return f end;a.rep=function(i,j)if type(i)=='string'then return string.rep(i,j)end;local k={}for g=1,j do for g,h in ipairs(i)do table.insert(k,h)end end;return k end;a.empty=function(h)if not h then return true end;if h==vim.NIL then return true end;if type(h)=='string'and h==''then return true end;if type(h)=='table'and vim.tbl_isempty(h)then return true end;if type(h)=='number'and h==0 then return true end;return false end;a.none=vim.NIL;a.merge=function(l,m)local n=type(l)=='table'and(not vim.tbl_islist(l)or vim.tbl_isempty(l))local o=type(m)=='table'and(not vim.tbl_islist(m)or vim.tbl_isempty(m))if n and o then local p={}for q,h in pairs(m)do if l[q]~=a.none then p[q]=a.merge(l[q],h)end end;for q,h in pairs(l)do if m[q]==nil then if h~=a.none then p[q]=a.merge(h,{})else p[q]=nil end end end;return p end;if l==a.none then return nil elseif l==nil then return a.merge(m,{})else return l end end;a.id=setmetatable({group={}},{__call=function(g,r)a.id.group[r]=a.id.group[r]or 0;a.id.group[r]=a.id.group[r]+1;return a.id.group[r]end})a.bool=function(h,s)if h==nil then return s end;return h==true or h==1 end;a.set=function(t,u,h)local v=t;for w=1,#u-1 do local x=u[w]v[x]=v[x]or{}v=v[x]end;v[u[#u]]=h end;a.copy=function(y)if type(y)~='table'then return y end;if vim.tbl_islist(y)then local z={}for w,A in ipairs(y)do z[w]=a.copy(A)end;return z end;local z={}for x,A in pairs(y)do z[x]=a.copy(A)end;return z end;a.to_utfindex=function(B,C)C=C or#B+1;return vim.str_utfindex(B,math.max(0,math.min(C-1,#B)))end;a.to_vimindex=function(B,D)D=D or#B;for w=D,1,-1 do local E,h=pcall(function()return vim.str_byteindex(B,w)+1 end)if E then return h end end;return D+1 end;a.deprecated=function(F,G)local H=false;return function(...)if not H then print(G)H=true end;return F(...)end end;a.redraw=setmetatable({doing=false,force=false,incsearch_redraw_keys=' <BS>'},{__call=function(self,I)local J=vim.api.nvim_replace_termcodes(self.incsearch_redraw_keys,true,true,true)if vim.tbl_contains({'/','?'},vim.fn.getcmdtype())then if vim.o.incsearch then return vim.api.nvim_feedkeys(J,'ni',true)end end;if self.doing then return end;self.doing=true;self.force=not not I;vim.schedule(function()if self.force then vim.cmd([[redraw!]])else vim.cmd([[redraw]])end;self.doing=false;self.force=false end)end})return a
