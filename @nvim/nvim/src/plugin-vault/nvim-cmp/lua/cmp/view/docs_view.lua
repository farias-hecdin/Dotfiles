local a=require('cmp.utils.window')local b=require('cmp.config')local c={}c.new=function()local self=setmetatable({},{__index=c})self.entry=nil;self.window=a.new()self.window:option('conceallevel',2)self.window:option('concealcursor','n')self.window:option('foldenable',false)self.window:option('linebreak',true)self.window:option('scrolloff',0)self.window:option('showbreak','NONE')self.window:option('wrap',true)self.window:buffer_option('filetype','cmp_docs')self.window:buffer_option('buftype','nofile')return self end;c.open=function(self,d,e)local f=b.get().window.documentation;if not f then return end;if not d or not e then return self:close()end;local g=a.get_border_info({style=f})local h=vim.o.columns-(e.col+e.width)-1;local i=e.col-1;local j=math.min(f.max_width,math.max(i,h))if not self.entry or d.id~=self.entry.id then local k=d:get_documentation()if#k==0 then return self:close()end;self.entry=d;vim.api.nvim_buf_call(self.window:get_buffer(),function()vim.cmd([[syntax clear]])vim.api.nvim_buf_set_lines(self.window:get_buffer(),0,-1,false,{})end)vim.lsp.util.stylize_markdown(self.window:get_buffer(),k,{max_width=j-g.horiz,max_height=f.max_height})end;vim.api.nvim_buf_set_option(self.window:get_buffer(),'modified',false)local l,m=vim.lsp.util._make_floating_popup_size(vim.api.nvim_buf_get_lines(self.window:get_buffer(),0,-1,false),{max_width=j-g.horiz,max_height=f.max_height-g.vert})if l<=0 or m<=0 then return self:close()end;local n=e.col+e.width;local o=e.col-l-g.horiz;local p,q;if h>=l and i>=l then if h<i then p=o;q=true else p=n end elseif h>=l then p=n elseif i>=l then p=o;q=true else return self:close()end;self.window:option('winblend',vim.o.pumblend)self.window:option('winhighlight',f.winhighlight)local r={relative='editor',style='minimal',width=l,height=m,row=e.row,col=p,border=f.border,zindex=f.zindex or 50}self.window:open(r)if q then r.col=r.col-self.window:info().scrollbar_offset;self.window:open(r)end end;c.close=function(self)self.window:close()self.entry=nil end;c.scroll=function(self,s)if self:visible()then local t=vim.fn.getwininfo(self.window.win)[1]or{}local u=t.topline or 1;u=u+s;u=math.max(u,1)u=math.min(u,self.window:get_content_height()-t.height+1)vim.defer_fn(function()vim.api.nvim_buf_call(self.window:get_buffer(),function()vim.api.nvim_command('normal! '..u..'zt')self.window:update()end)end,0)end end;c.visible=function(self)return self.window:visible()end;return c
