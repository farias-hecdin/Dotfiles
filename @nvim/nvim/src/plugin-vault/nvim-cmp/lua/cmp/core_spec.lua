local a=require('cmp.utils.spec')local b=require('cmp.utils.feedkeys')local c=require('cmp.types')local d=require('cmp.core')local e=require('cmp.source')local f=require('cmp.utils.keymap')local g=require('cmp.utils.api')describe('cmp.core',function()describe('confirm',function()local h=function(i,j,k,l)l=l or{}local m=d.new()local n=e.new('spec',{get_position_encoding_kind=function()return l.position_encoding_kind or c.lsp.PositionEncodingKind.UTF16 end,complete=function(o,o,p)p({k})end})m:register_source(n)b.call(i,'n',function()m:complete(m:get_context({reason=c.cmp.ContextReason.Manual}))vim.wait(5000,function()return#m.sources[n.id].entries>0 end)end)b.call(j,'n',function()m:confirm(m.sources[n.id].entries[1],{},function()end)end)local q={}b.call('','x',function()b.call('','n',function()if g.is_cmdline_mode()then q.buffer={g.get_current_line()}else q.buffer=vim.api.nvim_buf_get_lines(0,0,-1,false)end;q.cursor=g.get_cursor()end)end)return q end;describe('insert-mode',function()before_each(a.before)it('label',function()local q=h('iA','IU',{label='AIUEO'})assert.are.same(q.buffer,{'AIUEO'})assert.are.same(q.cursor,{1,5})end)it('insertText',function()local q=h('iA','IU',{label='AIUEO',insertText='_AIUEO_'})assert.are.same(q.buffer,{'_AIUEO_'})assert.are.same(q.cursor,{1,7})end)it('textEdit',function()local q=h(f.t('i***AEO***<Left><Left><Left><Left><Left>'),'IU',{label='AIUEO',textEdit={range={start={line=0,character=3},['end']={line=0,character=6}},newText='foo\nbar\nbaz'}})assert.are.same(q.buffer,{'***foo','bar','baz***'})assert.are.same(q.cursor,{3,3})end)it('#1552',function()local q=h(f.t('ios.'),'',{filterText='IsPermission',insertTextFormat=2,label='IsPermission',textEdit={newText='IsPermission($0)',range={['end']={character=3,line=0},start={character=3,line=0}}}})assert.are.same(q.buffer,{'os.IsPermission()'})assert.are.same(q.cursor,{1,16})end)it('insertText & snippet',function()local q=h('iA','IU',{label='AIUEO',insertText='AIUEO($0)',insertTextFormat=c.lsp.InsertTextFormat.Snippet})assert.are.same(q.buffer,{'AIUEO()'})assert.are.same(q.cursor,{1,6})end)it('textEdit & snippet',function()local q=h(f.t('i***AEO***<Left><Left><Left><Left><Left>'),'IU',{label='AIUEO',insertTextFormat=c.lsp.InsertTextFormat.Snippet,textEdit={range={start={line=0,character=3},['end']={line=0,character=6}},newText='foo\nba$0r\nbaz'}})assert.are.same(q.buffer,{'***foo','bar','baz***'})assert.are.same(q.cursor,{2,2})end)local r='ðŸ—¿'for o,s in ipairs({{encoding=c.lsp.PositionEncodingKind.UTF8,char_size=#r},{encoding=c.lsp.PositionEncodingKind.UTF16,char_size=select(2,vim.str_utfindex(r))},{encoding=c.lsp.PositionEncodingKind.UTF32,char_size=select(1,vim.str_utfindex(r))}})do it('textEdit & multibyte: '..s.encoding,function()local q=h(f.t('i%s:%s%s:%s<Left><Left><Left>'):format(r,r,r,r),r,{label=r..r..r,textEdit={range={start={line=0,character=s.char_size+#':'},['end']={line=0,character=s.char_size+#':'+s.char_size+s.char_size}},newText=r..r..r..r..r}},{position_encoding_kind=s.encoding})vim.print({state=q,case=s})assert.are.same(q.buffer,{('%s:%s%s%s%s%s:%s'):format(r,r,r,r,r,r,r)})assert.are.same(q.cursor,{1,#('%s:%s%s%s%s%s'):format(r,r,r,r,r,r)})end)end end)describe('cmdline-mode',function()before_each(a.before)it('label',function()local q=h(':A','IU',{label='AIUEO'})assert.are.same(q.buffer,{'AIUEO'})assert.are.same(q.cursor[2],5)end)it('insertText',function()local q=h(':A','IU',{label='AIUEO',insertText='_AIUEO_'})assert.are.same(q.buffer,{'_AIUEO_'})assert.are.same(q.cursor[2],7)end)it('textEdit',function()local q=h(f.t(':***AEO***<Left><Left><Left><Left><Left>'),'IU',{label='AIUEO',textEdit={range={start={line=0,character=3},['end']={line=0,character=6}},newText='foobarbaz'}})assert.are.same(q.buffer,{'***foobarbaz***'})assert.are.same(q.cursor[2],12)end)end)end)end)
