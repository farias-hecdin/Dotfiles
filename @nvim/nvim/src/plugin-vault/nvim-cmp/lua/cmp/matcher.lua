local a=require('cmp.utils.char')local b={}b.WORD_BOUNDALY_ORDER_FACTOR=10;b.PREFIX_FACTOR=8;b.NOT_FUZZY_FACTOR=6;b.debug=function(...)return...end;b.match=function(c,d,e)e=e or{}if#c==0 then return b.PREFIX_FACTOR+b.NOT_FUZZY_FACTOR,{}end;if#c>#d then return 0,{}end;if e.disallow_prefix_unmatching then if not a.match(string.byte(c,1),string.byte(d,1))then return 0,{}end end;local f={}local g=1;local h=1;local i=1;local j=1;local k=false;while h<=#c and i<=#d do local l=b.find_match_region(c,g,h,d,i)if l and h<=l.input_match_end then l.index=j;g=l.input_match_start+1;h=l.input_match_end+1;k=k or l.no_symbol_match;i=a.get_next_semantic_index(d,l.word_match_end)table.insert(f,l)else i=a.get_next_semantic_index(d,i)end;j=j+1 end;if e.disallow_partial_matching and#f>1 then return 0,{}end;if#f==0 then if not e.disallow_fuzzy_matching and not e.disallow_prefix_unmatching and not e.disallow_partial_fuzzy_matching then if b.fuzzy(c,d,f,e)then return 1,f end end;return 0,{}end;b.debug(d,f)local m=false;if f[1].input_match_start==1 and f[1].word_match_start==1 then m=true else for n,o in ipairs(e.synonyms or{})do m=true;local p=1;for q=f[1].input_match_start,f[1].input_match_end do if not a.match(string.byte(o,p),string.byte(c,q))then m=false;break end;p=p+1 end;if m then break end end end;if k and not m then return 0,{}end;local r=m and b.PREFIX_FACTOR or 0;local s=m and f[1].index-1 or 0;local t=1;for n,l in ipairs(f)do local u=0;for q=math.max(t,l.input_match_start),l.input_match_end do u=u+1;t=q end;t=t+1;if u>0 then u=u*(1+l.strict_ratio)u=u*(1+math.max(0,b.WORD_BOUNDALY_ORDER_FACTOR-(l.index-s))/b.WORD_BOUNDALY_ORDER_FACTOR)r=r+u end end;if f[#f].input_match_end<#c then if not e.disallow_fuzzy_matching then if not e.disallow_partial_fuzzy_matching or m then if b.fuzzy(c,d,f,e)then return r,f end end end;return 0,{}end;return r+b.NOT_FUZZY_FACTOR,f end;b.fuzzy=function(c,d,f,e)local v=f[#f]and f[#f].input_match_end+1 or 1;for q=1,#f-1 do local w=f[q]local x=f[q+1]local y=0;local i=a.get_next_semantic_index(d,w.word_match_end)while y+i<x.word_match_start and v<=#c do if a.match(string.byte(d,i+y),string.byte(c,v))then v=v+1;y=y+1 else i=a.get_next_semantic_index(d,i+y)y=0 end end end;local z=false;local y=0;local i=f[#f]and f[#f].word_match_end+1 or 1;local A=-1;local B=-1;local C=-1;local D=0;local E=0;while y+i<=#d and v<=#c do local F,G=string.byte(d,i+y),string.byte(c,v)if a.match(F,G)then if not z then A=v;C=i+y end;z=true;v=v+1;D=D+(F==G and 1 or 0)E=E+1 else if e.disallow_fullfuzzy_matching then break else if z then table.insert(f,{input_match_start=A,input_match_end=v-1,word_match_start=C,word_match_end=i+y-1,strict_ratio=D/E,fuzzy=true})end end;z=false end;y=y+1 end;if v>#c then table.insert(f,{input_match_start=A,input_match_end=B,word_match_start=C,word_match_end=i+y-1,strict_ratio=D/E,fuzzy=true})return true end;return false end;b.find_match_region=function(c,g,h,d,i)while g<h do if a.match(string.byte(c,h),string.byte(d,i))then break end;h=h-1 end;if h<g then return nil end;local A=-1;local v=h;local y=0;local D=0;local E=0;local k=false;while v<=#c and i+y<=#d do local F=string.byte(c,v)local G=string.byte(d,i+y)if a.match(F,G)then if A==-1 then A=v end;D=D+(F==G and 1 or 0)E=E+1;y=y+1;k=k or a.is_symbol(F)else if A~=-1 then return{input_match_start=A,input_match_end=v-1,word_match_start=i,word_match_end=i+y-1,strict_ratio=D/E,no_symbol_match=k,fuzzy=false}else return nil end end;v=v+1 end;if A~=-1 then return{input_match_start=A,input_match_end=v-1,word_match_start=i,word_match_end=i+y-1,strict_ratio=D/E,no_symbol_match=k,fuzzy=false}end;return nil end;return b
