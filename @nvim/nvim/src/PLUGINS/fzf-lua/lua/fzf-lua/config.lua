local a=require"fzf-lua.path"local b=require"fzf-lua.utils"local c=require"fzf-lua.actions"local d={}d._has_devicons,d._devicons=pcall(require,"nvim-web-devicons")d._devicons_path=d._has_devicons and d._devicons and d._devicons.setup and debug.getinfo(d._devicons.setup,"S").source:gsub("^@","")d._devicons_geticons=function()if not d._has_devicons or not d._devicons or not d._devicons.get_icons then return end;local e=vim.tbl_deep_extend("keep",{},d._devicons.get_icons())if e[1]and e[1].name=="Default"then local f=table.remove(e,1)e["<default>"]=f end;return e end;d.__resume_data={}d.set_pid=function(g)d.__pid=g end;d.get_pid=function()return d.__pid end;function d.reset_defaults()local h=require("fzf-lua.defaults")d.DEFAULTS=h;d.defaults=h.defaults;d.globals=b.deepcopy(d.defaults)h.globals=d.globals end;d.reset_defaults()function d.normalize_opts(i,j)if not i then i={}end;if type(i)=="function"then i=i()end;local k=function(h)return h and{fzf=b.map_tolower(h.fzf),builtin=b.map_tolower(h.builtin)}or nil end;i.keymap=k(i.keymap)i.actions=b.map_tolower(i.actions)j.keymap=k(j.keymap)j.actions=b.map_tolower(j.actions)if d.globals.actions then d.globals.actions.files=b.map_tolower(d.globals.actions.files)d.globals.actions.buffers=b.map_tolower(d.globals.actions.buffers)end;d.globals.keymap=k(d.globals.keymap)i.__call_opts=i.__call_opts or b.deepcopy(i)if type(j._actions)=="function"then j.actions=vim.tbl_deep_extend("keep",j.actions or{},j._actions())end;i=vim.tbl_deep_extend("keep",i,b.tbl_deep_clone(j))for l,m in ipairs({"winopts","keymap","fzf_opts","fzf_tmux_opts","previewers"})do i[m]=vim.tbl_deep_extend("keep",i[m]or{},b.tbl_deep_clone(d.globals[m])or{})end;for l,m in ipairs({"file_ignore_patterns"})do for l,h in ipairs({j,d.globals})do if h[m]then for l,n in ipairs(h[m])do if not i[m]then i[m]={}end;table.insert(i[m],n)end end end end;for l,o in ipairs({"fzf_args","fzf_cli_args","fzf_raw_args"})do if i[o]==nil then i[o]=d.globals[o]end;local p="%-%-prompt="local q=".-"local r=i[o]and i[o]:match(p.."(.)")if r and r~=[[']]and r~=[["]]then r=""q="[^%s]+"end;if r then local s=p..("%s(%s)%s"):format(r,q,r)local t=p..("%s%s%s"):format(r,q,r)if i[o]:match(t)then i.prompt=i[o]:match(s)i[o]=i[o]:gsub(t,"")end end end;local function u(v,w,x)if w[v]~=nil then return w[v]else return x[v]end end;i.global_resume=u("global_resume",i,d.globals)if i.resume==nil then for l,v in ipairs({"repeat_last_search","continue_last_search"})do if i[v]~=nil then i.resume=i[v]end end end;for l,v in ipairs({"file_icons","git_icons","color_icons"})do local y=u("global_"..v,i,d.globals)if y~=nil then i[v]=i[v]and y end end;local z={["winopts.row"]="winopts.win_row",["winopts.col"]="winopts.win_col",["winopts.width"]="winopts.win_width",["winopts.height"]="winopts.win_height",["winopts.border"]="winopts.win_border",["winopts.on_create"]="winopts.window_on_create",["winopts.preview.wrap"]="preview_wrap",["winopts.preview.border"]="preview_border",["winopts.preview.hidden"]="preview_opts",["winopts.preview.vertical"]="preview_vertical",["winopts.preview.horizontal"]="preview_horizontal",["winopts.preview.layout"]="preview_layout",["winopts.preview.flip_columns"]="flip_columns",["winopts.preview.default"]="default_previewer",["winopts.hl.normal"]="winopts.hl_normal",["winopts.hl.border"]="winopts.hl_border",["winopts.hl.cursor"]="previewers.builtin.hl_cursor",["winopts.hl.cursorline"]="previewers.builtin.hl_cursorline",["winopts.preview.delay"]="previewers.builtin.delay",["winopts.preview.title"]="previewers.builtin.title",["winopts.preview.title_align"]="previewers.builtin.title_align",["winopts.preview.scrollbar"]="previewers.builtin.scrollbar",["winopts.preview.scrollchar"]="previewers.builtin.scrollchar",["diag_icons"]="lsp.lsp_icons"}local A=function(h,o,B,C)local D=b.strsplit(o,".")local E,F=h,nil;for G=1,#D do F=E;E=E[D[G]]if not E then break end;if B~=nil and G==#D then F[D[G]]=B end end;if B and C then b.warn(C)end;return E end;for m,B in pairs(z)do A(i,m,A(i,B)or A(d.globals,B))end;if type(i.previewer)=="function"then i.previewer=i.previewer()end;if type(i.previewer)=="table"then i.previewer=vim.tbl_deep_extend("keep",i.previewer,d.globals.previewers.builtin)end;if i.cwd and#i.cwd>0 then i.cwd=vim.fn.expand(i.cwd)if not vim.loop.fs_stat(i.cwd)then b.warn(("Unable to access '%s', removing 'cwd' option."):format(i.cwd))i.cwd=nil else if not a.starts_with_separator(i.cwd)then i.cwd=a.join({vim.loop.cwd(),i.cwd})end end end;i.git_icons=i.git_icons and a.is_git_repo(i,true)local H=function(I,J,K)if I and vim.fn.executable(I)~=1 then J(("'%s' is not a valid executable, %s"):format(I,K))return false end;return true end;i.fzf_bin=i.fzf_bin or d.globals.fzf_bin;if not i.fzf_bin or not H(i.fzf_bin,b.warn,"fallback to 'fzf'.")then i.fzf_bin="fzf"if vim.fn.executable(i.fzf_bin)~=1 then local L,M=pcall(vim.api.nvim_call_function,"fzf#exec",{})if L and M then i.fzf_bin=M end end;if not H(i.fzf_bin,b.err,"aborting. Please make sure 'fzf' is in installed.")then return nil end end;i._is_skim=i.fzf_bin:find("sk")~=nil;i._is_fzf_tmux=vim.env.TMUX and i.fzf_bin:match("fzf%-tmux$")i._set_pid=d.set_pid;i._get_pid=d.get_pid;i._normalized=true;return i end;d.bytecode=function(o,N)local D=b.strsplit(o,".")local O=d;for G=1,#D do O=O[D[G]]if not O then break end;if G==#D and type(O)==N then return string.dump(O,true)end end end;d.get_global=function(o)local D=b.strsplit(o,".")local O=d.globals;for G=1,#D do O=O[D[G]]if not O then break end;if G==#D then return O end end end;d.set_global=function(o,P)local D=b.strsplit(o,".")local O=d.globals;for G=1,#D do if G==#D then O[D[G]]=P else local Q=O;if not Q[D[G]]then Q[D[G]]={}end;O=Q[D[G]]end end end;d.set_action_helpstr=function(R,S)assert(type(R)=="function")d._action_to_helpstr[R]=S end;d.get_action_helpstr=function(R)return d._action_to_helpstr[R]end;d._action_to_helpstr={[c.dummy_abort]="abort",[c.file_edit]="file-edit",[c.file_edit_or_qf]="file-edit-or-qf",[c.file_split]="file-split",[c.file_vsplit]="file-vsplit",[c.file_tabedit]="file-tabedit",[c.file_sel_to_qf]="file-selection-to-qf",[c.file_sel_to_ll]="file-selection-to-loclist",[c.file_switch]="file-switch",[c.file_switch_or_edit]="file-switch-or-edit",[c.buf_edit]="buffer-edit",[c.buf_edit_or_qf]="buffer-edit-or-qf",[c.buf_sel_to_qf]="buffer-selection-to-qf",[c.buf_sel_to_ll]="buffer-selection-to-loclist",[c.buf_split]="buffer-split",[c.buf_vsplit]="buffer-vsplit",[c.buf_tabedit]="buffer-tabedit",[c.buf_del]="buffer-delete",[c.buf_switch]="buffer-switch",[c.buf_switch_or_edit]="buffer-switch-or-edit",[c.colorscheme]="set-colorscheme",[c.run_builtin]="run-builtin",[c.ex_run]="edit-cmd",[c.ex_run_cr]="exec-cmd",[c.exec_menu]="exec-menu",[c.search]="edit-search",[c.search_cr]="exec-search",[c.goto_mark]="goto-mark",[c.goto_jump]="goto-jump",[c.keymap_apply]="keymap-apply",[c.spell_apply]="spell-apply",[c.set_filetype]="set-filetype",[c.packadd]="packadd",[c.help]="help-open",[c.help_vert]="help-vertical",[c.help_tab]="help-tab",[c.man]="man-open",[c.man_vert]="man-vertical",[c.man_tab]="man-tab",[c.git_switch]="git-switch",[c.git_checkout]="git-checkout",[c.git_stage]="git-stage",[c.git_unstage]="git-unstage",[c.git_reset]="git-reset",[c.git_stash_pop]="git-stash-pop",[c.git_stash_drop]="git-stash-drop",[c.git_stash_apply]="git-stash-apply",[c.git_buf_edit]="git-buffer-edit",[c.git_buf_tabedit]="git-buffer-tabedit",[c.git_buf_split]="git-buffer-split",[c.git_buf_vsplit]="git-buffer-vsplit",[c.arg_add]="arg-list-add",[c.arg_del]="arg-list-delete",[c.grep_lgrep]="grep<->lgrep",[c.sym_lsym]="sym<->lsym",[c.tmux_buf_set_reg]="set-register",[c.paste_register]="paste-register",[c.set_qflist]="set-{qf|loc}list",[c.apply_profile]="apply-profile",[c.complete_insert]="complete-insert"}return d
