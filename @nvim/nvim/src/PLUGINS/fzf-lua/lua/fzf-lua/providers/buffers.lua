local a=require"fzf-lua.core"local b=require"fzf-lua.path"local c=require"fzf-lua.utils"local d=require"fzf-lua.config"local e=require"fzf-lua.make_entry"local f={}local g={}local h=function()g={curtabidx=vim.fn.tabpagenr(),curtab=vim.api.nvim_win_get_tabpage(0),curbuf=vim.api.nvim_get_current_buf(),prevbuf=vim.fn.bufnr("#"),buflist=vim.api.nvim_list_bufs(),bufmap=(function()local i={}for j,k in ipairs(vim.api.nvim_list_bufs())do i[k]=true end;return i end)()}end;local l=function(m,n)if type(n)=="function"then n=n()end;local o={}if m.current_tab_only then for j,p in ipairs(vim.api.nvim_tabpage_list_wins(g.curtab))do local k=vim.api.nvim_win_get_buf(p)o[k]=true end end;local q={}local r=vim.tbl_filter(function(k)if not m.show_unlisted and 1~=vim.fn.buflisted(k)then q[k]=true end;if m.show_all_buffers==false and not vim.api.nvim_buf_is_loaded(k)then q[k]=true end;if c.buf_is_qf(k)then if m.show_quickfix then q[k]=nil else q[k]=true end end;if m.ignore_current_buffer and k==g.curbuf then q[k]=true end;if m.current_tab_only and not o[k]then q[k]=true end;if m.no_term_buffers and c.is_term_buffer(k)then q[k]=true end;if m.cwd_only and not b.is_relative(vim.api.nvim_buf_get_name(k),vim.loop.cwd())then q[k]=true elseif m.cwd and not b.is_relative(vim.api.nvim_buf_get_name(k),m.cwd)then q[k]=true end;return not q[k]end,n)return r,q end;local s=function(m,r,t)local u={}for j,v in ipairs(r)do local w=v==g.curbuf and"%"or v==g.prevbuf and"#"or" "local x={bufnr=v,flag=w,info=vim.fn.getbufinfo(v)[1]}if t then local y=c.winid_from_tabh(t,v)if y then x.info.lnum=vim.api.nvim_win_get_cursor(y)[1]end end;table.insert(u,x)end;if m.sort_lastused then local z=os.time({year=2100,month=1,day=1,hour=0,minute=00})local A=function(B)if B.flag=="%"then return z elseif B.flag=="#"then return z-1 else return B.info.lastused end end;table.sort(u,function(C,k)return A(C)>A(k)end)end;return u end;local function D(m,B,E,F)local G=""local H=vim.api.nvim_buf_get_option(B.bufnr,"readonly")and"="or" "local I=B.info.changed==1 and"+"or" "local J=G..H..I;local K=c.ansi_codes.clear("[")local L=c.ansi_codes.clear("]")local M=#B.info.name>0 and b.relative(B.info.name,F or vim.loop.cwd())or c.nvim_buf_get_name(B.bufnr,B.info)if m.filename_only then M=b.basename(M)end;M=b.HOME_to_tilde(M)M=("%s:%s"):format(M,B.info.lnum>0 and B.info.lnum or"")if B.flag=="%"then J=c.ansi_codes.red(B.flag)..J;if E then K=c.ansi_codes.green("[")L=c.ansi_codes.green("]")M=c.ansi_codes.green(M)end elseif B.flag=="#"then J=c.ansi_codes.cyan(B.flag)..J else J=c.nbsp..J end;local N=string.format("%s%s%s",K,c.ansi_codes.yellow(string.format(B.bufnr)),L)local O=""local P=""if m.file_icons then if c.is_term_bufname(B.info.name)then O,P=e.get_devicon(B.info.name,"sh")else local Q=b.tail(B.info.name)local R=b.extension(Q)O,P=e.get_devicon(Q,R)end;if m.color_icons then O=c.ansi_codes[P](O)end end;local S=string.format("%s%s%s%s%s%s%s%s",c._if(m._prefix,m._prefix,""),string.format("%-32s",N),c.nbsp,J,c.nbsp,O,c.nbsp,M)return S end;f.buffers=function(m)m=d.normalize_opts(m,d.globals.buffers)if not m then return end;m.fn_pre_fzf=h;local T=function(U)local V=l(m,g.buflist)if next(V)then local u=s(m,V)for j,W in pairs(u)do U(D(m,W,not m.sort_lastused))end end;U(nil)end;if m.fzf_opts["--header-lines"]==nil then m.fzf_opts["--header-lines"]=not m.ignore_current_buffer and m.sort_lastused and"1"end;m=a.set_header(m,m.headers or{"actions","cwd"})m=a.set_fzf_field_index(m)a.fzf_exec(T,m)end;f.lines=function(m)m=d.normalize_opts(m,d.globals.lines)f.buffer_lines(m)end;f.blines=function(m)m=d.normalize_opts(m,d.globals.blines)m.current_buffer_only=true;m.line_field_index=m.line_field_index or 2;f.buffer_lines(m)end;f.buffer_lines=function(m)if not m then return end;m.fn_pre_fzf=h;m.fn_pre_fzf()local u=l(m,m.current_buffer_only and{g.curbuf}or g.buflist)local X={}for j,v in ipairs(u)do local Y={}local Z=vim.api.nvim_buf_get_name(v)if vim.api.nvim_buf_is_loaded(v)then Y=vim.api.nvim_buf_get_lines(v,0,-1,false)elseif vim.fn.filereadable(Z)~=0 then Y=vim.fn.readfile(Z,"")end;local M=b.basename(Z)local O,P;if m.file_icons then local Q=b.tail(M)local R=b.extension(Q)O,P=e.get_devicon(Q,R)if m.color_icons then O=c.ansi_codes[P](O)end end;if not M or#M==0 then M=c.nvim_buf_get_name(v)end;for _,a0 in ipairs(Y)do table.insert(X,("[%s]%s%s%s%s:%s: %s"):format(c.ansi_codes.yellow(tostring(v)),c.nbsp,O or"",O and c.nbsp or"",c.ansi_codes.magenta(M),c.ansi_codes.green(tostring(_)),a0))end end;if m.search and#m.search>0 then m.fzf_opts["--query"]=vim.fn.shellescape(m.search)end;m=a.set_fzf_field_index(m,3,m._is_skim and"{}"or"{..-2}")a.fzf_exec(X,m)end;f.tabs=function(m)m=d.normalize_opts(m,d.globals.tabs)if not m then return end;m.fn_pre_fzf=h;m._list_bufs=function()local a1={}for a2,a3 in ipairs(vim.api.nvim_list_tabpages())do for j,p in ipairs(vim.api.nvim_tabpage_list_wins(a3))do local k=vim.api.nvim_win_get_buf(p)if g.bufmap[k]then m._tab_to_buf[a2]=m._tab_to_buf[a2]or{}m._tab_to_buf[a2][k]=a3;table.insert(a1,k)end end end;return a1 end;local T=function(U)m._tab_to_buf={}local V,q=l(m,m._list_bufs)if not next(V)then return end;for k,j in pairs(q)do for j,r in pairs(m._tab_to_buf)do r[k]=nil end end;for a3,r in pairs(m._tab_to_buf)do local a4=vim.fn.getcwd(-1,a3)local a5=function(a6,a7,a8)local P=a8;local a9=a7 and a7(m[a6])or m[a6]if type(m[a6])=="table"then if type(m[a6][1])=="function"then a9=m[a6][1](a3,a3==g.curtabidx)elseif type(m[a6][1])=="string"then a9=a7(m[a6][1])else a9=a7("Tab")end;if type(m[a6][2])=="string"then P=function(aa)return c.ansi_from_hl(m[a6][2],aa)end end elseif type(m[a6])=="function"then a9=m[a6](a3,a3==g.curtabidx)end;return a9,P end;local ab,ac=a5("tab_title",function(aa)return string.format("%s%s#%d%s",aa,c.nbsp,a3,vim.loop.cwd()==a4 and""or string.format(": %s",b.HOME_to_tilde(a4)))end,c.ansi_codes.blue)local ad,ae=a5("tab_marker",function(aa)return aa end,function(aa)return c.ansi_codes.blue(c.ansi_codes.bold(aa))end)if not m.current_tab_only then U(string.format("%d)%s%s\t%s",a3,c.nbsp,ac(ab),a3==g.curtabidx and ae(ad)or""))end;local af={}for k,j in pairs(r)do table.insert(af,k)end;m.sort_lastused=false;m._prefix=("%d)%s%s%s"):format(a3,c.nbsp,c.nbsp,c.nbsp)local t=vim.api.nvim_list_tabpages()[a3]local u=s(m,af,t)for j,W in pairs(u)do U(D(m,W,false,a4))end end;U(nil)end;m=a.set_header(m,m.headers or{"actions","cwd"})m=a.set_fzf_field_index(m,3,"{}")a.fzf_exec(T,m)end;return f
