_=[[
exec lua "$0" "$@"
]]local a=require('inspect')local b=require('lua.gitsigns.config')function table.slice(c,d,e,f)local g={}for h=d or 1,e or#c,f or 1 do g[#g+1]=c[h]end;return g end;local function i(j)return j=='number'or j=='string'or j=='boolean'end;local function k(l,m)return l.sub(l,1,string.len(m))==m end;local function n(o)local p=assert(io.open(o,'r'))local j=p:read("*all")p:close()return j end;local function q(o)local r={}for s in n(o):gmatch("([^\n]*)\n?")do table.insert(r,s)end;return r end;local function t()local u=n('lua/gitsigns/config.lua')local v=u:gmatch("[^\n\r]+")for s in v do if k(s,'M.schema = {')then break end end;local w={}for s in v do if k(s,'}')then break end;if s:find('^   (%w+).*')then local x=s:gsub('^%s*([%w_]+).*','%1')table.insert(w,x)end end;return w end;local function y(z)local A=q('teal/gitsigns/config.tl')local B,C;for h=1,#A do local s=A[h]if s:match('^  '..z..' =')then B=h end;if B and s:match('^  }')then C=h;break end end;local D,E;for h=B,C do local s=A[h]if s:match('^    default =')then D=h;if s:match('},')or s:match('nil,')or s:match("default = '.*'")then E=h;break end end;if D and s:match('^    }')then E=h;break end end;local F={}for h=D,E do local s=A[h]if h==D then s=s:gsub('%s*default = ','')end;if h==E then s=s:gsub('(.*),','%1')end;table.insert(F,s)end;return table.concat(F,'\n')end;local function G(H,I)if type(H)=='table'and H.hard then I('   HARD-DEPRECATED')else I('   DEPRECATED')end;if type(H)=='table'then if H.message then I('      '..H.message)end;if H.new_field then I('')local J,z=H.new_field:match('(.*)%.(.*)')if J and z then I(('   Please instead use the field `%s` in |gitsigns-config-%s|.'):format(z,J))else I(('   Please instead use |gitsigns-config-%s|.'):format(H.new_field))end end end;I('')end;local function K(z,I)local L=b.schema[z]local j=('*gitsigns-config-%s*'):format(z)if#z+#j<80 then I(('%-29s %48s'):format(z,j))else I(('%-29s'):format(z))I(('%78s'):format(j))end;if L.deprecated then G(L.deprecated,I)end;if L.description then local M;if L.default_help~=nil then M=L.default_help elseif i(L.type)then M=a(L.default)M=('`%s`'):format(M)else M=y(z)if M:find('\n')then M=M:gsub('\n([^\n\r])','\n%1')else M=('`%s`'):format(M)end end;local N=(function()if L.type=='table'and L.deep_extend then return'table[extended]'end;if type(L.type)=='table'then L.type=table.concat(L.type,'|')end;return L.type end)()if M:find('\n')then I(('      Type: `%s`'):format(N))I('      Default: >')I('        '..M:gsub('\n([^\n\r])','\n    %1'))I('<')else I(('      Type: `%s`, Default: %s'):format(N,M))I()end;I(L.description:gsub(' +$',''))end end;local function O()local P={}local function I(Q)P[#P+1]=Q or''end;for _,R in ipairs(t())do K(R,I)end;return table.concat(P,'\n')end;local function S(Q)local T=Q:match('%.([^ ]+)')if not T then error('Unable to parse: '..Q)end;local U=Q:match('function%((.*)%)')local V={}for R in string.gmatch(U,"([%w_]+):")do if R:sub(1,1)~='_'then V[#V+1]=string.format('{%s}',R)end end;return string.format('%-40s%38s',string.format('%s(%s)',T,table.concat(V,', ')),'*gitsigns.'..T..'()*')end;local function W(o)local h=n(o):gmatch("([^\n]*)\n?")local P={}local X={}local Y={''}local Z=false;for s in h do local a0=s:match('^%-%-%- ?(.*)')if a0 then Z=true;if a0~=''and a0~='<'then a0='                '..a0 end;Y[#Y+1]=a0 else if Z then Y[1]=S(s)X[#X+1]=Y;Y={''}end;Z=false end end;for a1=#X,1,-1 do local a2=X[a1]for R=1,#a2 do P[#P+1]=a2[R]end;P[#P+1]=''end;return table.concat(P,'\n')end;local function a3(a4)local P=''for _,o in ipairs(a4)do P=P..'\n'..W(o)end;return P end;local function a5()local h=n('README.md'):gmatch("([^\n]*)\n?")local P={}local function a6(Q)P[#P+1]=Q~=''and'    '..Q or''end;for s in h do if s:match("require%('gitsigns'%).setup {")then a6(s)break end end;for s in h do a6(s)if s=='}'then break end end;return table.concat(P,'\n')end;local function a7(a8)return({VERSION='0.6-dev',CONFIG=O,FUNCTIONS=a3{'teal/gitsigns.tl','teal/gitsigns/actions.tl'},SETUP=a5})[a8]end;local function a9()local h=n('etc/doc_template.txt'):gmatch("([^\n]*)\n?")local I=io.open('doc/gitsigns.txt','w')for s in h do local a8=s:match('{{(.*)}}')if a8 then local aa=a7(a8)if aa then if type(aa)=='function'then aa=aa()end;aa=aa:gsub('%%','%%%%')s=s:gsub('{{'..a8 ..'}}',aa)end end;I:write(s or'','\n')end end;a9()
