local a=require("which-key.keys")local b=require("which-key.config")local c=require("which-key.layout")local d=require("which-key.util")local e=vim.api.nvim_buf_add_highlight;local f={}f.keys=""f.mode="n"f.reg=nil;f.auto=false;f.count=0;f.buf=nil;f.win=nil;function f.is_valid()return f.buf and f.win and vim.api.nvim_buf_is_valid(f.buf)and vim.api.nvim_buf_is_loaded(f.buf)and vim.api.nvim_win_is_valid(f.win)end;function f.show()if vim.b.visual_multi then vim.b.VM_skip_reset_once_on_bufleave=true end;if f.is_valid()then return end;local g=vim.tbl_filter(function(h)return vim.api.nvim_win_is_valid(h)and vim.api.nvim_win_get_config(h).relative==""end,vim.api.nvim_list_wins())local i={relative="editor",width=vim.o.columns-b.options.window.margin[2]-b.options.window.margin[4]-(vim.fn.has("nvim-0.6")==0 and b.options.window.border~="none"and 2 or 0),height=b.options.layout.height.min,focusable=false,anchor="SW",border=b.options.window.border,row=vim.o.lines-b.options.window.margin[3]-(vim.fn.has("nvim-0.6")==0 and b.options.window.border~="none"and 2 or 0)+((vim.o.laststatus==0 or vim.o.laststatus==1 and#g==1)and 1 or 0)-vim.o.cmdheight,col=b.options.window.margin[2],style="minimal",noautocmd=true}if b.options.window.position=="top"then i.anchor="NW"i.row=b.options.window.margin[1]end;f.buf=vim.api.nvim_create_buf(false,true)f.win=vim.api.nvim_open_win(f.buf,false,i)vim.api.nvim_buf_set_option(f.buf,"filetype","WhichKey")vim.api.nvim_buf_set_option(f.buf,"buftype","nofile")vim.api.nvim_buf_set_option(f.buf,"bufhidden","wipe")local j="NormalFloat:WhichKeyFloat"if vim.fn.hlexists("FloatBorder")==1 then j=j..",FloatBorder:WhichKeyBorder"end;vim.api.nvim_win_set_option(f.win,"winhighlight",j)vim.api.nvim_win_set_option(f.win,"foldmethod","manual")vim.api.nvim_win_set_option(f.win,"winblend",b.options.window.winblend)end;function f.read_pending()local k=""while true do local l=vim.fn.getchar(0)if l==0 then break end;local m=type(l)=="number"and vim.fn.nr2char(l)or l;if m==d.t("<esc>")then k=k..m;if#k>10 then return end else if k~=""then f.keys=f.keys..k;k=""end;f.keys=f.keys..m end end;if k~=""then f.keys=f.keys..k;k=""end end;function f.getchar()local n,l=pcall(vim.fn.getchar)if not n then return d.t("<esc>")end;local m=type(l)=="number"and vim.fn.nr2char(l)or l;return m end;function f.scroll(o)local p=vim.api.nvim_win_get_height(f.win)local q=vim.api.nvim_win_get_cursor(f.win)if o then q[1]=math.max(q[1]-p,1)else q[1]=math.min(q[1]+p,vim.api.nvim_buf_line_count(f.buf))end;vim.api.nvim_win_set_cursor(f.win,q)end;function f.on_close()f.hide()end;function f.hide()vim.api.nvim_echo({{""}},false,{})f.hide_cursor()if f.buf and vim.api.nvim_buf_is_valid(f.buf)then vim.api.nvim_buf_delete(f.buf,{force=true})f.buf=nil end;if f.win and vim.api.nvim_win_is_valid(f.win)then vim.api.nvim_win_close(f.win,true)f.win=nil end;vim.cmd("redraw")end;function f.show_cursor()local r=vim.api.nvim_get_current_buf()local q=vim.api.nvim_win_get_cursor(0)vim.api.nvim_buf_add_highlight(r,b.namespace,"Cursor",q[1]-1,q[2],q[2]+1)end;function f.hide_cursor()local r=vim.api.nvim_get_current_buf()vim.api.nvim_buf_clear_namespace(r,b.namespace,0,-1)end;function f.back()local s=a.get_tree(f.mode,f.buf).tree:get(f.keys,-1)or a.get_tree(f.mode).tree:get(f.keys,-1)if s then f.keys=s.prefix_i end end;function f.has_cmd(t)for u,s in pairs(t)do if s.mapping and s.mapping.cmd then return true end end;return false end;function f.execute(v,w,r)local x=a.get_tree(w).tree:get(v)local y=r and a.get_tree(w,r).tree:get(v)or nil;if x and x.mapping and a.is_hook(v,x.mapping.cmd)then return end;if y and y.mapping and a.is_hook(v,y.mapping.cmd)then return end;local z={}local function A(B,C)for u,s in pairs(B)do if a.is_hooked(s.mapping.prefix,w,C)then table.insert(z,{s.mapping.prefix,C})a.hook_del(s.mapping.prefix,w,C)end end end;A(a.get_tree(w).tree:path(v))if r then A(a.get_tree(w,r).tree:path(v),r)end;local D=d.get_mode()if D=="nii"or D=="nir"or D=="niv"or D=="vs"then vim.api.nvim_feedkeys(d.t("<C-O>"),"n",false)end;if f.reg~='"'and f.mode~="i"and f.mode~="c"then vim.api.nvim_feedkeys('"'..f.reg,"n",false)end;if f.count and f.count~=0 then v=f.count..v end;vim.api.nvim_feedkeys(v,"m",true)vim.defer_fn(function()for u,E in pairs(z)do a.hook_add(E[1],w,E[2])end end,0)end;function f.open(F,i)i=i or{}f.keys=F or""f.mode=i.mode or d.get_mode()f.count=vim.api.nvim_get_vvar("count")f.reg=vim.api.nvim_get_vvar("register")if string.find(vim.o.clipboard,"unnamedplus")and f.reg=="+"then f.reg='"'end;if string.find(vim.o.clipboard,"unnamed")and f.reg=="*"then f.reg='"'end;f.show_cursor()f.on_keys(i)end;function f.is_enabled(r)local G=vim.api.nvim_buf_get_option(r,"buftype")for u,H in ipairs(b.options.disable.buftypes)do if H==G then return false end end;local I=vim.api.nvim_buf_get_option(r,"filetype")for u,H in ipairs(b.options.disable.filetypes)do if H==I then return false end end;return true end;function f.on_keys(i)local r=vim.api.nvim_get_current_buf()while true do f.read_pending()local J=a.get_mappings(f.mode,f.keys,r)if J.mapping and not J.mapping.group and#J.mappings==0 then f.hide()if J.mapping.fn then J.mapping.fn()else f.execute(f.keys,f.mode,r)end;return end;if#J.mappings==0 then f.hide()if i.auto then f.execute(f.keys,f.mode,r)end;return end;local K=c:new(J)if f.is_enabled(r)then if not f.is_valid()then f.show()end;f.render(K:layout(f.win))end;vim.cmd([[redraw]])local m=f.getchar()if m==d.t("<esc>")then f.hide()break elseif m==d.t(b.options.popup_mappings.scroll_down)then f.scroll(false)elseif m==d.t(b.options.popup_mappings.scroll_up)then f.scroll(true)elseif m==d.t("<bs>")then f.back()else f.keys=f.keys..m end end end;function f.render(L)vim.api.nvim_buf_set_lines(f.buf,0,-1,false,L.lines)local p=#L.lines;if p>b.options.layout.height.max then p=b.options.layout.height.max end;vim.api.nvim_win_set_height(f.win,p)if vim.api.nvim_buf_is_valid(f.buf)then vim.api.nvim_buf_clear_namespace(f.buf,b.namespace,0,-1)end;for u,M in ipairs(L.hl)do e(f.buf,b.namespace,M.group,M.line,M.from,M.to)end end;return f
